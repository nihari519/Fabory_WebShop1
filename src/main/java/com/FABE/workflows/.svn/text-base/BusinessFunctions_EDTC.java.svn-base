package com.edtc.workflows;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.Color;
import org.openqa.selenium.support.ui.Select;

import com.edtc.accelerators.ActionEngine;
import com.edtc.objrepo.EDTC_OR;
import com.edtc.sqlqueries.SQL_Queries;

public class BusinessFunctions_EDTC extends ActionEngine {

	/********************************************************************************************************
	 * Method 	Name		:	pageLoadingCompleted()
	 * Author				:	
	 * Description			:	This method wait till the page loads(Till the Loading Results Element is not visible)
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	:
	 * @throws Throwable	:
	 ********************************************************************************************************/
	 public void pageLoadingCompleted(By loc) throws Throwable
	 {
		 waitProcessComplete(loc);
		 Thread.sleep(lSleep_Low);
	 }

	/********************************************************************************************************
	 * Method Name : validate_LoginPageFields() 
	 * Author : 
	 * Description : This method Validates the Fields on the Login Page
	 * Date of creation :
	 * modifying person :
	 * Date of modification :
	 * @throws Throwable
	 ********************************************************************************************************/
	public void validate_LoginPageFields() throws Throwable {
		blnEventReport = true;
		// Validate whether User is navigated to MyAccount Login Page
		if (waitForVisibilityOfElementWithoutReport(EDTC_OR.SIGNINBTN, "Sign In Button")) {
			SuccessReport("Validate whether User is navigated to EDTC Login Page",
					"User Is succesfully navigated to EDTC Login Page");
		} else {
			failureReport("Validate whether User is navigated to EDTC Login Page", "Failed to Navigate");
		}
		// Validate the Fields on the Login page
		isElementDisplayed(EDTC_OR.SIGNINBTN, "Sign In Button");
		isElementDisplayed(EDTC_OR.PAYROLLIDTEXTFIELD, "Payroll Text Field");
		isElementDisplayed(EDTC_OR.PWDTEXTFIELD, "Password Text Field");
		isElementDisplayed(EDTC_OR.HELPLINK, "Help Link");
		isElementDisplayed(EDTC_OR.TORRANCEPAYROLLLINK, "Torrance Payroll Link");
		isElementDisplayed(EDTC_OR.LOGINFUNCTIONSHELPLINK, "Login Functions Help Link");
		isElementDisplayed(EDTC_OR.LOGINHELPLINK, "Login Help Link Next to Payroll ID text field");
		
		String strForgotPwd = getText(EDTC_OR.FORGOTPWDLINK, "Forgot password Link");
		if (strForgotPwd.equalsIgnoreCase("Forgot your password? Click here")) {
			SuccessReport("Validate whether Forgot your password? Click here text is present","Forgot your password? Click here text is present");
		} else {
			failureReport("Validate whether Forgot your password? Click here text is present","Forgot your password? Click here text is not " + "present");
		}

		blnEventReport = false;
	}

	/********************************************************************************************************
	 * Method Name : signIn() 
	 * Author : Description : This method will Log into the EDTC Application 
	 * Date of modification :
	 * @param username: Valid Email Address
	 * @param password: Valid Password
	 * @throws Throwable
	 ********************************************************************************************************/
	public void signIn(String strPayrollID, String strPassword) throws Throwable {
		try {
			blnEventReport = true;
			type(EDTC_OR.PAYROLLIDTEXTFIELD, strPayrollID, "Payroll Text Field");
			type(EDTC_OR.PWDTEXTFIELD, strPassword, "Password Text Field");
			click(EDTC_OR.SIGNINBTN, "Sign In button");

			// Check for Logout Link in the Home Page
			waitForElementPresent(EDTC_OR.SIGNOUTLINK, "Sign Out Link");
			if (isElementPresent(EDTC_OR.SIGNOUTLINK, "Sign Out Link")) {
				SuccessReport("Validate whether User is able to login succesffully",
						"User is able to login succesffully");
			} else {
				failureReport("Validate whether User is able to login succesffully", "Failed to login");
			}
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}

	}

	/********************************************************************************************************
	 * Method Name : invalidSignIn() 
	 * Author : 
	 * Description : This method will Log into the EDTC Application Date of creation
	 * Modifying person : 
	 * Date of modification :
	 * @param username: Valid Email Address
	 * @param password : Valid Password
	 * @throws Throwable
	 ********************************************************************************************************/
	public void invalidSignIn(String strPayrollID, String strPassword) throws Throwable {
		try {
			blnEventReport = true;
			type(EDTC_OR.PAYROLLIDTEXTFIELD, strPayrollID, "Payroll Text Field");
			type(EDTC_OR.PWDTEXTFIELD, strPassword, "Password Text Field");
			click(EDTC_OR.SIGNINBTN, "Sign In button");

			waitForElementPresent(EDTC_OR.LOGINFAILEDERRORMSG, "Login Failed Error Message");
			String strUN = getAttribute(EDTC_OR.PAYROLLIDTEXTFIELD, "value", "Payroll Text Field");
			String strPwd = getAttribute(EDTC_OR.PWDTEXTFIELD, "value", "Password Text Field");
			if (strUN.isEmpty() && strPwd.isEmpty()) {
				SuccessReport("Validate whether data is deleted from the Payroll ID and Password text fields","Data is deleted from the Payroll ID and Password text fields");
			} else {
				failureReport("Validate whether data is deleted from the Payroll ID and Password text fields ","Data is not deleted from the Payroll ID and Password text fields");
			}
			String strFailMsg = getText(EDTC_OR.LOGINFAILEDERRORMSG, "Login Failed Error Message").trim();
			if (strFailMsg.equalsIgnoreCase("Login failed: Entered Payroll ID and Password do not match")) {
				SuccessReport("Validate whether " + "\"" + strFailMsg + "\" error message is displayed","\"" + strFailMsg + "\" error message is displayed");
			} else {
				failureReport("Validate whether " + "\"" + strFailMsg + "\" error message is displayed","Error message is not displayed");
			}
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}

	}

	/********************************************************************************************************
	 * Method Name : signOut() 
	 * Author : 
	 * Description : This method will Logout from the EDTC Application 
	 * Date of creation : 
	 * modifying person : 
	 * Date of modification :
	 * @throws Throwable
	 ********************************************************************************************************/
	public void signOut() throws Throwable {
		try {
			blnEventReport = true;	
			waitForElementToBeClickable(EDTC_OR.SIGNOUTLINK, "Sign Out Link");
			Thread.sleep(lSleep_Medium);
			if(!browsertype.equalsIgnoreCase("safari")){
				JSClick(EDTC_OR.SIGNOUTLINK, "Sign Out Link");	
			}else{
				click(EDTC_OR.SIGNOUTLINK, "Sign Out Link");
			}
			if (waitForElementPresent(EDTC_OR.SIGNINBTN, "Sign In Button")) {
				SuccessReport("Validate whether User is Logged out of the EDTC","User Is succesfully Logged out of the EDTC");
			} else {
				failureReport("Validate whether User is Logged out of the EDTC", "Failed to Log out");
			}
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}


	
	/********************************************************************************************************
	 * Method 	Name		:	validatePageHeader()
	 * Author				:	
	 * Description			:	This method will validate the page header
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	: 
	 * @throws Throwable	:
	 ********************************************************************************************************/
	public void validatePageHeader(By locator,String strTitle) throws Throwable{
		try{
			blnEventReport=true;
			Thread.sleep(lSleep_Medium);
			waitForElementPresent(locator, "Title");
			String pageTitle=getText(locator, "Page Title");
		
			if(pageTitle.trim().replaceAll("\n", "").replaceAll(" ", "").toLowerCase().contains(strTitle.trim().replaceAll("\n", "").replaceAll(" ", "").toLowerCase())){
				SuccessReport("Validate User is navigated to "+"\""+strTitle+"\" page", "User is navigated to "+"\""+strTitle+"\" page");
			}
			else{
				failureReport("Validate User is navigated to "+"\""+strTitle+"\" page", "User is not navigated to "+"\""+strTitle+"\" page");
			}
			blnEventReport=true;
		}catch(Exception e){
			throw e;
		}
	}
	
	/********************************************************************************************************
	 * Method 	Name		:	validateModalDialogHeader()
	 * Author				:	
	 * Description			:	This method will validate the page header
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	: 
	 * @throws Throwable	:
	 ********************************************************************************************************/
	public void validateModalDialogHeader(By locator,String strTitle) throws Throwable{
		try{
			blnEventReport=true;
			waitForVisibilityOfElementWithoutReport(locator, "Title");
			String pageTitle=getText(locator, "Page Title");
		
			if(pageTitle.trim().replaceAll("\n", "").toLowerCase().contains(strTitle.trim().toLowerCase())){
				SuccessReport("Validate User is navigated to "+"\""+strTitle+"\" page", "User is navigated to "+"\""+strTitle+"\" page");
			}
			else{
				failureReport("Validate User is navigated to "+"\""+strTitle+"\" page", "User is not navigated to "+"\""+strTitle+"\" page");
			}
			blnEventReport=true;
		}catch(Exception e){
			throw e;
		}
	}
	
	
	
	/********************************************************************************************************
	 * Method 	Name		:	searchEmployee()
	 * Author				:	
	 * Description			:	This method will validate the page header
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	: 
	 * @throws Throwable	:
	 ********************************************************************************************************/
	public void reSearchEmployee(String strEmpID_Name,String strTeminationDate,String strProrationDate,String strProratePTOStatus) throws Throwable{
		try{
			blnEventReport=true;
			if(isElementPresent(EDTC_OR.TPSLINK,"TPS Link")){
				click(EDTC_OR.TPSLINK,"TPS Link");
				//This page validates the TERMINATION PROCESSING SYSTEM Title
				validatePageHeader(EDTC_OR.PAGEHEADER, "TERMINATION PROCESSING SYSTEM (Signed in as "+loginEmpName+")");
			}
			click(EDTC_OR.SELECTEMPLOYEEBTN,"Select Employee Button");
			waitForElementPresent(EDTC_OR.EMPID_NAMETEXTFIELD, "Employee ID/Name Text Field");
			type(EDTC_OR.EMPID_NAMETEXTFIELD,strEmpID_Name,"Employee ID/Name Text Field");
			click(EDTC_OR.SEARCHEMPLOYEEBTN,"Search for Employee Button");
			if(isElementPresent(EDTC_OR.EMPSEARCHLOOKUPTABLE, "Employee Search Lookup table")){
				String searchResults=getText(EDTC_OR.EMPSEARCHLOOKUPTABLE, "Employee Search Lookup table").split(" ")[0];
				SuccessReport("Validate whether TPS searches the records based on the input and a popup page is displayed", "Popup page is displayed with "+searchResults+" results");
				click(By.xpath(EDTC_OR.ELEMENTTEXT1+empName+" - "+empID+"')]"),empName+" - "+empID+" Employee");
				waitForElementPresent(EDTC_OR.TERMINATIONDATETEXTFIELD, "Termination Date Text Field");
			}
			pageLoadingCompleted(EDTC_OR.PAGELAODER);
			waitForElementPresent(EDTC_OR.TERMINATIONDATETEXTFIELD,"Termination Date Text Field");
			type(EDTC_OR.TERMINATIONDATETEXTFIELD,strTeminationDate,"Termination Date Text Field");
			Thread.sleep(lSleep_Low);
			driver.findElement(EDTC_OR.TERMINATIONDATETEXTFIELD).sendKeys(Keys.ESCAPE);
			if(strProrationDate.equalsIgnoreCase("Start of Term Year")){
				click(EDTC_OR.STARTOFTERMYEARBTN,"Start of Term Year Button");	
			}else if(strProrationDate.equalsIgnoreCase("Eligibility Date")){
				click(EDTC_OR.ELIGIBILITYDATEBTN,"Eligibility Date Button");	
			}
			strProrationDate=getAttribute(EDTC_OR.PRORATIONSTARTDATETEXTFIELD, "value", "Proration Start Date Text Field");
			
			if(strProratePTOStatus.equalsIgnoreCase("Y")){
				if(!isChecked(EDTC_OR.PRORATEPTOCHECKBOX, "Prorate PTO Checkbox")){
					click(EDTC_OR.PRORATEPTOCHECKBOX, "Prorate PTO Checkbox");
				}
			}else if(strProratePTOStatus.equalsIgnoreCase("N")){
				if(isChecked(EDTC_OR.PRORATEPTOCHECKBOX, "Prorate PTO Checkbox")){
					click(EDTC_OR.PRORATEPTOCHECKBOX, "Prorate PTO Checkbox");
				}  
			}
			click(EDTC_OR.RESEARCHEMPLOYEEBTN,"Research Employee Button");
			
			//This page validates the TERMINATION PROCESSING SYSTEM Title
			validatePageHeader(EDTC_OR.PAGEHEADER, "TPS research for "+empName+" ("+empID+")");
			
			String prorationDate=getText(EDTC_OR.PRORATIONSTARTDATEDISPLAY, "Proration Start Date");
			String terminationDate=getText(EDTC_OR.TERMINATIONDATEDISPLAY, "Termination Date");
			if(prorationDate.contains(strProrationDate) && terminationDate.contains(strTeminationDate)){
				SuccessReport("Validate whether the Termination Date is displayed correctly in TPS Research Page", "\""+strTeminationDate+"\" Termination Date is displayed correctly in TPS Research Page");
				SuccessReport("Validate whether the Proration Start Date is displayed correctly in TPS Research Page", "\""+strProrationDate+"\" Proration Start Date is displayed correctly in TPS Research Page");
			}else{
				failureReport("Validate whether the Termination Date and Proration Start Date are not displayed correctly in TPS Research Page", "Termination Date and Proration Start Date are displayed correctly in TPS Research Page");
			}
			
			
			if(strProratePTOStatus.equalsIgnoreCase("Y")){
				isElementDisplayed(EDTC_OR.PTOPRORATEDDISPLAY, "PTO is prorated");
			}else if(strProratePTOStatus.equalsIgnoreCase("N")){
				if(isElementPresent(EDTC_OR.PTOPRORATEDDISPLAY, "PTO is prorated")){
					failureReport("Validate whether PTO is prorated is not displayed", "PTO is prorated is displayed");
				}  
			}
			
			blnEventReport=false;
		}catch(Exception e){
			throw e;
		}
	}
	/********************************************************************************************************
	 * Method 	Name		:	searchEmployee()
	 * Author				:	
	 * Description			:	This method searches an employee on Employee ID/Name
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	: 
	 * @throws Throwable	:
	 ********************************************************************************************************/		
	  public void searchEmployee(String strEmpID_Name,String strEmpName,String strEmpID) throws Throwable{
		  try{
			  blnEventReport=true;
			  String employeeName="";
			  String strEligibilityDate="";
			  boolean bFlag=false;
			  click(EDTC_OR.TPSLINK,"TPS Link");
			  //This page validates the TERMINATION PROCESSING SYSTEM Title
			  validatePageHeader(EDTC_OR.PAGEHEADER, "TERMINATION PROCESSING SYSTEM");
			  click(EDTC_OR.SELECTEMPLOYEEBTN,"Select Employee Button");
			  waitForElementPresent(EDTC_OR.EMPID_NAMETEXTFIELD, "Employee ID/Name Text Field");
			  type(EDTC_OR.EMPID_NAMETEXTFIELD,"1234567890123456789012","Employee ID/Name Text Field");
			  String strValue=getAttribute(EDTC_OR.EMPID_NAMETEXTFIELD,"value","Employee ID/Name Text Field");
			  if(strValue.equalsIgnoreCase("12345678901234567890")){
				  SuccessReport("Validate whether user is allowed to enter maximum 20 characters in Employee ID/Name Text Field", "User is allowed to enter maximum 20 characters in Employee ID/Name Text Field");
			  }else{
				  failureReport("Validate whether user is allowed to enter maximum 20 characters in Employee ID/Name Text Field", "User is allowed to enter more than 20 characters in Employee ID/Name Text Field");
			  }
			  
			  type(EDTC_OR.EMPID_NAMETEXTFIELD,strEmpID_Name,"Employee ID/Name Text Field");
			  click(EDTC_OR.SEARCHEMPLOYEEBTN,"Search for Employee Button");
			  pageLoadingCompleted(EDTC_OR.PAGELAODER);
			  Thread.sleep(lSleep_Medium);
			  if(!isElementPresent(EDTC_OR.EMPNOTFOUNDMSG, "Employee not Found Message")){
				  bFlag=true;
				  String ErrorMsg=getText(EDTC_OR.EMPNOTFOUNDMSGLABEL, "Employee not Found Message").trim();
				  if(ErrorMsg.equalsIgnoreCase("No matches were found")){
					  SuccessReport("Validate whether appropriate message is displayed if no search results are found ", ErrorMsg+" Message is displayed");
				  }else{
					  failureReport("Validate whether appropriate message is displayed if no search results are found ", ErrorMsg+" Message is not displayed");
				  }
			  }else if(isElementPresent(EDTC_OR.EMPSEARCHLOOKUPTABLE, "Employee Search Lookup table")){
				  String searchResults=getText(EDTC_OR.EMPSEARCHLOOKUPTABLE, "Employee Search Lookup table").split(" ")[0];
				  SuccessReport("Validate whether TPS searches the records based on the input and a popup page is displayed", "Popup page is displayed with "+searchResults+" results");
				  click(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpName+" - "+strEmpID+"')]"),strEmpName+" - "+strEmpID+" Employee");
				  waitForElementPresent(EDTC_OR.TERMINATIONDATETEXTFIELD, "Termination Date Text Field");
			  }else if(isElementPresent(EDTC_OR.TERMINATIONDATETEXTFIELD, "Termination Date Text Field")){
				  SuccessReport("Validate whether TPS user is able to search the employee", "User is able to search the employee");
			  }
			  if(!bFlag){
				//Validate Emp Name/ID and Eligibility Date from the Application
				  employeeName=getText(EDTC_OR.EMPNAME_ID, "Employee Name/ID info");
				  if(employeeName.contains(empID) && employeeName.contains(empName)){
					  SuccessReport("Validate whether the Employee Name/ID is displayed after user clicks on Search for Employee Button",employeeName+"  Employee Name/ID is displayed after user clicks on Search for Employee Button");
				  }else{
					 failureReport("Validate whether the Employee Name/ID is displayed after user clicks on Search for Employee Button", "Employee Name/ID is not displayed after user clicks on Search for Employee Button");
				  }
				  strEligibilityDate=getText(EDTC_OR.ELIGIBILITYDATE, "Eligibility Date");
//				  if(strEligibilityDate.equalsIgnoreCase(SQL_Queries.getEligibilityDate(empID))){
//					  SuccessReport("Validate whether the Eligility date against Database",strEligibilityDate+" Eligibility Date is same is in dataase");
//				  }else{
//					  SuccessReport("Validate whether the Eligility date against Database","Eligibility Date is not same is in dataase");
//				  }
				  SuccessReport("Validate whether TPS user is able to search the employee", "User is able to search the employee");
			  }
			  blnEventReport=false;
			}catch(Exception e){
				throw e;
			}
	
	  }
	/********************************************************************************************************
	 * Method 	Name		:	employeeSearchPageFieldValidation()
	 * Author				:	
	 * Description			:	This method will validate the page header
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	: 
	 * @throws Throwable	:
	 ********************************************************************************************************/	
	 public void employeeSearchPageFieldValidation(String strEmpID_Name,String strTerminationDate) throws Throwable{
		try{
			blnEventReport=true;
			//Click on the TPS Link on the Home Page
			if(isElementPresent(EDTC_OR.TPSLINK,"TPS Link")){
				click(EDTC_OR.TPSLINK,"TPS Link");
				//This page validates the TERMINATION PROCESSING SYSTEM Title
				validatePageHeader(EDTC_OR.PAGEHEADER, "TERMINATION PROCESSING SYSTEM");
			}
			//Search an Employee
			click(EDTC_OR.SELECTEMPLOYEEBTN,"Select Employee Button");
			waitForElementPresent(EDTC_OR.EMPID_NAMETEXTFIELD, "Employee ID/Name Text Field");
			type(EDTC_OR.EMPID_NAMETEXTFIELD,strEmpID_Name,"Employee ID/Name Text Field");
			if(isEnabled(EDTC_OR.SEARCHEMPLOYEEBTN,"Search for Employee Button")){
				SuccessReport("Validate whether Search for Employee Button is enabled after user enters the Employee ID/Name", "Search for Employee Button is Enabled");
			}else{
				failureReport("Validate whether Search for Employee Button is enabled after user enters the Employee ID/Name", "Search for Employee Button is still in Disabled state");
			}
			click(EDTC_OR.SEARCHEMPLOYEEBTN,"Search for Employee Button");
			if(isElementPresent(EDTC_OR.EMPSEARCHLOOKUPTABLE, "Employee Search Lookup table")){
				String searchResults=getText(EDTC_OR.EMPSEARCHLOOKUPTABLE, "Employee Search Lookup table").split(" ")[0];
				SuccessReport("Validate whether TPS searches the records based on the input and a popup page is displayed", "Popup page is displayed with "+searchResults+" results");
				click(By.xpath(EDTC_OR.ELEMENTTEXT1+empName+" - "+empID+"')]"),empName+" - "+empID+" Employee");
				waitForElementPresent(EDTC_OR.TERMINATIONDATETEXTFIELD, "Termination Date Text Field");
			}
			pageLoadingCompleted(EDTC_OR.PAGELAODER);
			waitForElementPresent(EDTC_OR.TERMINATIONDATETEXTFIELD,"Termination Date Text Field");
			
			
			//Validate the Eligibility Date
			String strEligibilityDate=getText(EDTC_OR.ELIGIBILITYDATE, "Eligibility Date");
			strEligibilityDate=strEligibilityDate.split("-")[1].trim();
			
			isElementDisplayed(EDTC_OR.TERMINATIONDATETEXTFIELD,"Termination Date Text Field");
			isElementDisplayed(EDTC_OR.PRORATIONSTARTDATETEXTFIELD,"Proration Start Date Text Field");
			isElementDisplayed(EDTC_OR.STARTOFTERMYEARBTN,"Start of Year Button");
			isElementDisplayed(EDTC_OR.ELIGIBILITYDATEBTN,"Eligibility Date Button");
			isElementDisplayed(EDTC_OR.PRORATEPTOCHECKBOX,"Prorate PTO Check box");
			isElementDisplayed(EDTC_OR.RESEARCHEMPLOYEEBTN,"Research Employee Button");
			isElementDisplayed(EDTC_OR.CLEARBTN,"Clear Button");
			
			//Check whether the Fields Are Enabled "Termination Date and Proration Start Date Text Fields"
			isEnabled(EDTC_OR.TERMINATIONDATETEXTFIELD,"Termination Date Text Field"); 
			isEnabled(EDTC_OR.PRORATIONSTARTDATETEXTFIELD,"Proration Start Date Text Field");
				
			//Check whether the Fields Are Enabled "Start of Year and Eligibility Date Buttons"
			isEnabled(EDTC_OR.STARTOFTERMYEARBTN,"Start of Year Button"); 
			isEnabled(EDTC_OR.ELIGIBILITYDATEBTN,"Eligibility Date Button");
				
			//Check whether the "Prorate PTO Check Box" is Checked
			if(isChecked(EDTC_OR.PRORATEPTOCHECKBOX,"Prorate PTO Check box")){
				SuccessReport("Validate whether by default Prorate PTO Check box is Checked", "Prorate PTO Check box is Checked");
			}else{
				failureReport("Validate whether by default Prorate PTO Check box is Checked", "Prorate PTO Check box is Unchecked");
			}
			//Check whether the "Research Employee Button" is Enabled
			isDisabled(EDTC_OR.RESEARCHEMPLOYEEBTN,"Research Employee Button");
			
			//Check whether the "Clear Button" is Enabled
			isEnabled(EDTC_OR.CLEARBTN,"Clear Button");
		
			type(EDTC_OR.TERMINATIONDATETEXTFIELD,strTerminationDate,"Termination Date Text Field");
			driver.findElement(EDTC_OR.TERMINATIONDATETEXTFIELD).sendKeys(Keys.TAB);
			isEnabled(EDTC_OR.SEARCHEMPLOYEEBTN,"Search for Employee Button");
			click(EDTC_OR.STARTOFTERMYEARBTN,"Start of Year Button");
			Thread.sleep(lSleep_Medium);
			String strStartofYear=strTerminationDate.split("/")[2];
			String strProDate=getAttribute(EDTC_OR.PRORATIONSTARTDATETEXTFIELD,"value","Proration Start Date Text Field");
			if(strProDate.equalsIgnoreCase("01/01/"+strStartofYear)){
				SuccessReport("Validate whether the first date of the year is populated in the Proration Start Date Text Field after user clicks on the Start of Year Button", "First Day of the Year is populated in the Proration Start Date Text Field");
			}else{
				failureReport("Validate whether the first date of the year is populated in the Proration Start Date Text Field after user clicks on the Start of Year Button", "First Day of the Year is not populated in the Proration Start Date Text Field");
			}
			click(EDTC_OR.ELIGIBILITYDATEBTN,"Eligibility Date Button");
			Thread.sleep(lSleep_Low);
			//Check if Research Employee Button is Enabled
			isEnabled(EDTC_OR.RESEARCHEMPLOYEEBTN,"Research Employee Button");
			SuccessReport("Validate Research Employee Button is enabled after entering Termination and Proration Start dates", "Research Employee Button is enabled after entering Termination and Proration Start dates");
			
			strProDate=getAttribute(EDTC_OR.PRORATIONSTARTDATETEXTFIELD,"value","Proration Start Date Text Field");
			if(strProDate.equalsIgnoreCase(strEligibilityDate)){
				SuccessReport("Validate whether the Eligibility date is populated in the Proration Start Date Text Field after user clicks on the Eligibility Date Button", "Eligibility date is populated in the Proration Start Date Text Field");
			}else{
				failureReport("Validate whether the Eligibility date is populated in the Proration Start Date Text Field after user clicks on the Eligibility Date Button", "Eligibility date is not populated in the Proration Start Date Text Field");
			}
			
			//Check the Clear Button
			click(EDTC_OR.CLEARBTN,"Clear Button");
			String terminationDate=getAttribute(EDTC_OR.TERMINATIONDATETEXTFIELD,"value","Termination Date Text Field");
			String prorationDate=getAttribute(EDTC_OR.PRORATIONSTARTDATETEXTFIELD,"value","Proration Date Text Field");
			if(terminationDate.isEmpty() && prorationDate.isEmpty()){
				SuccessReport("Validate whether Termination Date and Proration Start Date Text Fields are cleared after user clicks on Clear button", "Termination Date and Proration Start Date Text Fields are cleared");
			}else{
				failureReport("Validate whether Termination Date and Proration Start Date Text Fields are cleared after user clicks on Clear button", "Termination Date and Proration Start Date Text Fields are not cleared");
			}
			blnEventReport=false;
		}catch(Exception e){
			throw e;
		}
	}
	
	/********************************************************************************************************
	 * Method 	Name		:	validateUpdatePasswordPage()
	 * Author				:	
	 * Description			:	This method will validate the page header
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	: 
	 * @throws Throwable	:
	 ********************************************************************************************************/
		public void validateUpdatePasswordPage() throws Throwable{
			try{
				blnEventReport=true;
				click(EDTC_OR.UPDATEPWDLINK,"Update Password Link");
				waitForElementPresent(EDTC_OR.OLDPWDTEXTFIELD, "Old Password Text Field");
				//Validate the fields
				isElementDisplayed(EDTC_OR.OLDPWDTEXTFIELD, "Old Password Text Field");
				isElementDisplayed(EDTC_OR.NEWPWDTEXTFIELD, "New Password Text Field");
				isElementDisplayed(EDTC_OR.RETYPENEWPWDTEXTFIELD, "Retype new password Text Field");
				isElementDisplayed(EDTC_OR.TESTPWDTEXTFIELD, "Test a Password Text Field");
				isElementDisplayed(EDTC_OR.UPDATEBTN, "Update Button");
				isElementDisplayed(EDTC_OR.PWDREQIREMENTHELPLINK, "Password Requirement Help Link");
				isElementDisplayed(EDTC_OR.NEWPWDREQIREMENTHELPLINK, "About New Password Requirement Help Link");
				isElementDisplayed(EDTC_OR.TESTAPWDHELPLINK, "Test a Password Help Link");
				
				//Check for Update Pwd Disable
				isDisabled(EDTC_OR.UPDATEBTN, "Update Button");
				
//				 //Validate EDTC Help Text
//				 click(EDTC_OR.NEWPWDREQIREMENTHELPLINK, "About new password requirements Help Link");
//				 assertText(EDTC_OR.EDTCHELPTEXT,newPwdHelpText);
//				 click(EDTC_OR.EDTCHELPCLOSEBTN,"EDTC Help Close Button");
//				
//				 
//				 //Validate Test a Password Help Text
//				 click(EDTC_OR.TESTAPWDHELPLINK, "Test a Password Help Link");
//				 assertText(EDTC_OR.EDTCHELPTEXT,testPwdHelpText);
//				 click(EDTC_OR.EDTCHELPCLOSEBTN,"EDTC Help Close Button");

				//Help Links
				blnEventReport=false;
			}catch(Exception e){
				throw e;
			}
		}
		
		
//	/********************************************************************************************************
//	 * Method 	Name		:	validateUpdatePasswordPageFields()
//	 * Author				:	
//	 * Description			:	This method will validate the page header
//	 * Date of creation 	:	
//	 * modifying person 	: 	
//	 * Date of modification	: 
//	 * @throws Throwable	:
//	 ********************************************************************************************************/
//		public void validateUpdatePasswordPageFields(String strOldPwd,String strOldPwdStatus) throws Throwable{
//			try{
//				blnEventReport=true;
//				//Enter the New Password only if it is 
//				type(EDTC_OR.OLDPWDTEXTFIELD,strOldPwd, "Old Password Text Field");
//				if(strOldPwdStatus.equalsIgnoreCase("Invalid")){
//					isElementDisplayed(EDTC_OR.OLDPWDINVALIDENTRYMSG, "Invalid Entry Warning Message");
//					SuccessReport("Validate whether Invalid Entry warning is displayed when Old password do not meet the Password requirement", "Invalid Entry warning is displayed");
//				}
//				
//				type(EDTC_OR.NEWPWDTEXTFIELD,strNewPassword, "New Password Text Field");
//				type(EDTC_OR.RETYPENEWPWDTEXTFIELD,strNewPassword, "Retype new password Text Field");
//				
//				
//				blnEventReport=false;
//			}catch(Exception e){
//				throw e;
//			}
//		}

	/********************************************************************************************************	
	 * Method 	Name		:	updatePassword()
	 * Author				:	
	 * Description			:	This method will validate the page header
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	: 
	 * @throws Throwable	:
	 ********************************************************************************************************/
		public void updatePassword(String strOldPassword,String strNewPassword,String strScenario) throws Throwable{
			try{
				blnEventReport=true;
				String strValue="";
				click(EDTC_OR.UPDATEPWDLINK,"Update Password Link");
				waitForElementPresent(EDTC_OR.OLDPWDTEXTFIELD, "Old Password Text Field");
				//Enter the New Password only if it is 
				type(EDTC_OR.OLDPWDTEXTFIELD,strOldPassword, "Old Password Text Field");
				type(EDTC_OR.NEWPWDTEXTFIELD,strNewPassword, "New Password Text Field");
				type(EDTC_OR.RETYPENEWPWDTEXTFIELD,strNewPassword, "Retype new password Text Field");
				//Check Test a Password
				type(EDTC_OR.TESTPWDTEXTFIELD,strNewPassword,"Test a Password Text Field");
				driver.findElement(EDTC_OR.TESTPWDTEXTFIELD).sendKeys(Keys.TAB);
				
				if(strScenario.equalsIgnoreCase("Valid")){
					strValue=getText(EDTC_OR.TESTPWDMSG, "Test a Password Message").trim();
					if(strValue.contains("Valid password!")){
						SuccessReport("Validate the functionality of Test a Password", "\""+strValue+"\" is Displayed after entering \""+strValue+"\" new password");
						
						
					}else{
						failureReport("Validate the functionality of Test a Password", "Incorrect message is displayed after entering new password");
					}
				}else if(strScenario.equalsIgnoreCase("Invalid")){
					strValue=getText(EDTC_OR.TESTPWDMSG, "Test a Password Message").trim();
					if(strValue.contains("Incorrect format")){
						SuccessReport("Validate the functionality of Test a Password", "\""+strValue+"\" is Displayed after entering \""+strValue+"\" new password");
						
						
					}else{
						failureReport("Validate the functionality of Test a Password", "Incorrect message is displayed after entering new password");
					}
				}
				
				blnEventReport=false;
			}catch(Exception e){
				throw e;
			}
		}
			
		
		
	/********************************************************************************************************
	 * Method 	Name		:	torrancePayroll()
	 * Author				:	
	 * Description			:	This method will validate the page header
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	: 
	 * @throws Throwable	:
	 ********************************************************************************************************/
		public void torrancePayroll() throws Throwable{
			try{
				blnEventReport=true;
				String strMainWin=driver.getWindowHandle();
				click(EDTC_OR.TORRANCEPAYROLLLINK,"Torrance Payroll Link");
				Thread.sleep(lSleep_Medium);
				Set<String> strWindows=driver.getWindowHandles();
				if((strWindows.size()>1)){
					 for(String window:strWindows){
						 if(!window.equalsIgnoreCase(strMainWin)){
							 driver.switchTo().window(window);
							 break;
						 }
					 }
					 if(isElementPresent(EDTC_OR.EDTC_PTOIMG, "EDTC Paid Time Off Image")){
						 SuccessReport("Validate whether the user is navigated to Torrance Payroll main page", "User is navigated to Torrance Payroll main page");
					 }else{
						 failureReport("Validate whether the user is navigated to Torrance Payroll main page", "User is not navigated to Torrance Payroll main page");
					 }
					driver.close();
					driver.switchTo().window(strMainWin);
				}else{
					 if(isElementPresent(EDTC_OR.EDTC_PTOIMG, "EDTC Paid Time Off Image")){
						 SuccessReport("Validate whether the user is navigated to Torrance Payroll main page", "User is navigated to Torrance Payroll main page");
					 }else{
						 failureReport("Validate whether the user is navigated to Torrance Payroll main page", "User is not navigated to Torrance Payroll main page");
					 }
				}
				blnEventReport=false;
			}catch(Exception e){
				throw e;
			}
		}
		
	/********************************************************************************************************
	 * Method 	Name		:	validateTPSHomePage()
	 * Author				:	
	 * Description			:	This method will validate the page header
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	: 
	 * @throws Throwable	:
	 ********************************************************************************************************/
	 public void validateTPSHomePage() throws Throwable{
		try{
			blnEventReport=true;
			//Validate whether the Fields are Present
			isElementDisplayed(EDTC_OR.TORRANCEPAYROLLLINK, "Torrance Payroll Link (at the page Top)");
			isElementDisplayed(EDTC_OR.SIGNOUTLINK, "SignOut Link (at the page Top)");
			isElementDisplayed(EDTC_OR.SIGNOUTHELPLINK, "SignOut Help Link (at the page Top)");
		
			isElementDisplayed(EDTC_OR.SELECTEMPLOYEEBTN, "Select Employee Button");
			isElementDisplayed(EDTC_OR.PENDINGEDITSBTN, "Pending Edits Button");
			isElementDisplayed(EDTC_OR.PENDINGVERIFIESBTN, "Pending Verifies Button");
			isElementDisplayed(EDTC_OR.HISTORYBTN, "History Button");
			isElementDisplayed(EDTC_OR.EMPID_NAMETEXTFIELD, "Payroll ID or Employee name Text Field");
			isElementDisplayed(EDTC_OR.SEARCHEMPLOYEEBTN, "Search for Employee Button");
			//Validate Default Status of the Fields
			isEnabled(EDTC_OR.EMPID_NAMETEXTFIELD, "Payroll ID or Employee name Text Field");
			type(EDTC_OR.EMPID_NAMETEXTFIELD,"North1","Payroll ID or Employee name Text Field");  
			isEnabled(EDTC_OR.SEARCHEMPLOYEEBTN,"Search for Employee Button");
			SuccessReport("Validate whether Search for Employee Button is enabled after User enters the data in Payroll ID or Employee name Text Field", "Search for Employee Button is enabled after User enters the data in Payroll ID or Employee name Text Field");
			blnEventReport=false;
		}catch(Exception e){
			throw e;
		}
	}
		
	/********************************************************************************************************
 	 * Method 	Name		:	verifyTableHeading()
 	 * Author				:	
 	 * Description			:	This method verifies the headings in the table
 	 * Date of creation 	:	
 	 * modifying person 	: 	
 	 * Date of modification	:
 	 ********************************************************************************************************/
	 public void verifyTableHeading(By locator,String strHeadings) throws Throwable {
		try {
			waitForElementPresent(locator, "Table");
			String[] strHeading=strHeadings.split(",");
			java.util.List<WebElement> headings=driver.findElements(locator);
			int flag=0;
			for(WebElement head : headings){
				String actualHeading=head.getText().replace("\n", "").replace(" ", "");
				if(actualHeading.length()>0){
					for(int i=0;i<strHeading.length;i++){
						if(actualHeading.contains(strHeading[i].replace(" ", ""))){						
							flag++;
							break;
						}								
					}	
				}
			}
			if(flag==strHeading.length){
				SuccessReport("Validate whether following columns are available in the table "+strHeadings,"Columns are available");
			}
			else{
				failureReport("Validate whether following columns are available in the table "+strHeadings,"Columns are not available");
			}
		
		} catch (Exception e) {
			throw e;
		}
	}
	 
	 /********************************************************************************************************
		 * Method 	Name		:	pendingEdits_VerifiesPageValidation()
		 * Author				:	
		 * Description			:	This method verifies the headings in the table
		 * Date of creation 	:	
		 * modifying person 	: 	
		 * Date of modification	:
	  ********************************************************************************************************/
	  public void pendingEdits_VerifiesPageValidation(String strTableHeadings) throws Throwable{
		  try{
			  blnEventReport=true;
			  
			  if(isElementPresent(EDTC_OR.TPSLINK,"TPS Link")){
				  click(EDTC_OR.TPSLINK,"TPS Link");
				//This page validates the TERMINATION PROCESSING SYSTEM Title
				  validatePageHeader(EDTC_OR.PAGEHEADER, "TERMINATION PROCESSING SYSTEM");
			  }
			  //Validate the Fields in the Pending Edits page
			  click(EDTC_OR.PENDINGEDITSBTN,"Pending Edits Button");
			  waitForElementPresent(EDTC_OR.SEARCHTEXTFIELD, "Search Table Text Field");
			  isElementDisplayed(EDTC_OR.SEARCHTEXTFIELD, "Search Table Text Field");
			  
			  //This method validates the Table Headings
			  verifyTableHeading(EDTC_OR.TABLEHEADINGS, strTableHeadings);
			  Thread.sleep(lSleep_Low);
			  //Validate the Fields in the Pending Verifies page
			  click(EDTC_OR.PENDINGVERIFIESBTN,"Pending Verifies Button");
			  waitForElementPresent(EDTC_OR.SEARCHTEXTFIELD, "Search Table Text Field");
			  isElementDisplayed(EDTC_OR.SEARCHTEXTFIELD, "Search Table Text Field");
			  
			  //This method validates the Table Headings
			  verifyTableHeading(EDTC_OR.TABLEHEADINGS, strTableHeadings);
			  
			  
			  blnEventReport=false;

			} catch (Exception e) {
				throw e;
			}
	  }
	  
	 /********************************************************************************************************
	 * Method 	Name		:	approved_Void_InProgress()
	 * Author				:	
	 * Description			:	This method verifies the headings in the table
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	:
	 ********************************************************************************************************/
	  public void approved_Void_InProgress(String strFilterStatus,String strWorkSheetStatus) throws Throwable{
		  try{
			  blnEventReport=true;
			  if(isElementPresent(EDTC_OR.TPSLINK,"TPS Link")){
				  click(EDTC_OR.TPSLINK,"TPS Link");
				  //This page validates the TERMINATION PROCESSING SYSTEM Title
				  validatePageHeader(EDTC_OR.PAGEHEADER, "TERMINATION PROCESSING SYSTEM (Signed in as "+loginEmpName+")");
			  }
			  //Validate the Fields in the History page
			  	click(EDTC_OR.HISTORYBTN,"History Button");
			  	waitForElementPresent(EDTC_OR.APPROVEDRADIOBTN, "Approved/Voided Radio Button");
				if(strFilterStatus.equalsIgnoreCase("Approved/Void")){
			  		click(EDTC_OR.APPROVED_VOIDED_RADIOBTN,"Approved/Voided Radio Button");
			  	}else if(strFilterStatus.equalsIgnoreCase("In Process")){
			  		click(EDTC_OR.INPROCESSRADIOBTN,"In Process Radio Button");
			  	}
				pageLoadingCompleted(EDTC_OR.PAGELAODER);
				type(EDTC_OR.SEARCHTEXTFIELD_HISTORYPAGE,empID,"Search table Text Field");
				Thread.sleep(lSleep_Low);
				pageLoadingCompleted(EDTC_OR.PAGELAODER);
				if(isElementPresent(By.xpath(EDTC_OR.RECORDSTABLE+"//table//tbody//tr"), "Records")){
					SuccessReport("Validate whether the record is found", "Record is found");
					String strStatus=getText(By.xpath(EDTC_OR.RECORDSTABLE+"//table//tbody//tr[1]//td[5]//div[not(contains(@class,'ng-hide'))]"), "Records");
					if(strStatus.equalsIgnoreCase(strWorkSheetStatus)){
						SuccessReport("Validate the status of the TPS Record", "The status is "+strStatus);
					}else{
						failureReport("Validate the status of the TPS Record", "The status is "+strStatus);
					}
					
				}else{
					failureReport("Validate whether the record is found", "Record is not found");
				}
				
			  blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
	  }	  
	  
  /********************************************************************************************************
	 * Method 	Name		:	approved_Void_InProgress()
	 * Author				:	
	 * Description			:	This method verifies the headings in the table
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	:
	 ********************************************************************************************************/
	  public void edit_InProgress_Void_Record(String strFilterStatus,String strEmpID_Name,String strWorkSheetStatus) throws Throwable{
		  try{
			  blnEventReport=true;
			  if(strWorkSheetStatus.equalsIgnoreCase("Under edit")){
				  strWorkSheetStatus="Pending Edit";
			  }else if(strWorkSheetStatus.equalsIgnoreCase("Under verification")){
				  strWorkSheetStatus="Pending Verify";
			  }
			 
			  if(isElementPresent(EDTC_OR.TPSLINK,"TPS Link")){
				  click(EDTC_OR.TPSLINK,"TPS Link");
				  //This page validates the TERMINATION PROCESSING SYSTEM Title
				  validatePageHeader(EDTC_OR.PAGEHEADER, "TERMINATION PROCESSING SYSTEM (Signed in as "+loginEmpName+")");
			  }
			  //Validate the Fields in the History page
			  	click(EDTC_OR.HISTORYBTN,"History Button");
			  	waitForElementPresent(By.xpath(EDTC_OR.RECORDSTABLE+"//table//tbody//tr/td[5]//div[not(contains(@class,'ng-hide'))]"), "Records");
			  	Thread.sleep(lSleep_Medium);
			  	Thread.sleep(lSleep_Medium);
				if(strFilterStatus.equalsIgnoreCase("Approved/Void")){
			  		click(EDTC_OR.APPROVED_VOIDED_RADIOBTN,"Approved/Voided Radio Button");
			  		pageLoadingCompleted(EDTC_OR.PAGESPINNER);
				  	waitForElementPresent(By.xpath(EDTC_OR.RECORDSTABLE+"//table//tbody//tr/td[5]//div[not(contains(@class,'ng-hide'))]"), "Records");
				  	Thread.sleep(lSleep_Medium);
			  	}else if(strFilterStatus.equalsIgnoreCase("In Process")){
			  		click(EDTC_OR.INPROCESSRADIOBTN,"In Process Radio Button");
			  		pageLoadingCompleted(EDTC_OR.PAGESPINNER);
					waitForElementPresent(By.xpath(EDTC_OR.RECORDSTABLE+"//table//tbody//tr/td[5]//div[not(contains(@class,'ng-hide'))]"), "Records");
					Thread.sleep(lSleep_Medium);
			  	}
				type(EDTC_OR.SEARCHTEXTFIELD_HISTORYPAGE,strEmpID_Name,"Search table Text Field");
				Thread.sleep(lSleep_Medium);
				if(isElementPresent(By.xpath(EDTC_OR.RECORDSTABLE+"//table//tbody//tr"), "Records")){
					SuccessReport("Validate whether the record is found", "Record is found");
					String strStatus=getText(By.xpath(EDTC_OR.RECORDSTABLE+"//table//tbody//tr[1]//td[5]//div[not(contains(@class,'ng-hide'))]"), "Records");
					if(strStatus.equalsIgnoreCase(strWorkSheetStatus)){
						SuccessReport("Validate the status of the TPS Record", "The status is "+strStatus);
						click(By.xpath(EDTC_OR.ELEMENTTEXT1+empID+"')]/parent::td//following-sibling::td/div[@title='Edit']//span"),empID+" Edit Button");
						 pageLoadingCompleted(EDTC_OR.PAGELAODER);
						 Thread.sleep(lSleep_Low);
						//This page validates the Title
						validatePageHeader(EDTC_OR.PAGEHEADER, "TPS sheet for "+empName);
					}else{
						failureReport("Validate the status of the TPS Record", "The status is "+strStatus);
					}
				}else{
					failureReport("Validate whether the record is found", "Record is not found");
				}
				
			  blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
	  }	    
  
	  /********************************************************************************************************
		 * Method 	Name		:	historyPageValidation()
		 * Author				:	
		 * Description			:	This method verifies the headings in the table
		 * Date of creation 	:	
		 * modifying person 	: 	
		 * Date of modification	:
		 ********************************************************************************************************/
		  public void historyPageValidation(String strTableHeadings) throws Throwable{
			  try{
				  blnEventReport=true;
				  boolean bFlag=false;
				  if(isElementPresent(EDTC_OR.TPSLINK,"TPS Link")){
					  click(EDTC_OR.TPSLINK,"TPS Link");
					  //This page validates the TERMINATION PROCESSING SYSTEM Title
					  validatePageHeader(EDTC_OR.PAGEHEADER, "TERMINATION PROCESSING SYSTEM (Signed in as "+loginEmpName+")");
				  }
				  //Validate the Fields in the History page
				  	click(EDTC_OR.HISTORYBTN,"History Button");
				  	waitForElementPresent(EDTC_OR.APPROVEDRADIOBTN, "Approved/Voided Radio Button");
				  	isElementDisplayed(EDTC_OR.APPROVEDRADIOBTN, "Approved/Voided Radio Button");
				  	isElementDisplayed(EDTC_OR.INPROCESS, "In Process Radio Button");
				  	isElementDisplayed(EDTC_OR.SEARCHTEXTFIELD_HISTORYPAGE, "Search table Text Field");
				  	//This method validates the Table Headings
				  	verifyTableHeading(EDTC_OR.TABLEHEADINGS, strTableHeadings);
				  	
				  	click(EDTC_OR.APPROVED_VOIDED_RADIOBTN,"Approved/Voided Radio Button");
				  	pageLoadingCompleted(EDTC_OR.PAGESPINNER);
				  	waitForElementPresent(By.xpath(EDTC_OR.RECORDSTABLE+"//table//tbody//tr/td[5]//div[not(contains(@class,'ng-hide'))]"), "Records");
				  	if(isElementPresent(By.xpath(EDTC_OR.RECORDSTABLE+"//table//tbody//tr"), "Records")){
				  		List<WebElement> elements=driver.findElements(By.xpath(EDTC_OR.RECORDSTABLE+"//table//tbody//tr/td[5]//div[not(contains(@class,'ng-hide'))]"));
				  		for(int i=0;i<elements.size();i++){
				  			String strValue=elements.get(i).getText().trim();
				  			if(!strValue.equalsIgnoreCase("Approved") && !strValue.equalsIgnoreCase("Void")){
				  				bFlag=true;
				  				break;
				  			}
				  		}if(bFlag){
				  			failureReport("Validate the Status of all the records after selecting Approved/Voided radio button", "Invalid Status");
				  		}else{
				  			SuccessReport("Validate the Status of all the records after selecting Approved/Voided radio button", "Status of all the records is either Approved/Void");
				  		}
				  	}
				  	
				  	click(EDTC_OR.INPROCESSRADIOBTN,"In Process Radio Button");
				  	pageLoadingCompleted(EDTC_OR.PAGESPINNER);
					waitForElementPresent(By.xpath(EDTC_OR.RECORDSTABLE+"//table//tbody//tr/td[5]//div[not(contains(@class,'ng-hide'))]"), "Records");
					Thread.sleep(lSleep_Medium);
				  	if(isElementPresent(By.xpath(EDTC_OR.RECORDSTABLE+"//table//tbody//tr"), "Records")){
				  		List<WebElement> elements=driver.findElements(By.xpath(EDTC_OR.RECORDSTABLE+"//table//tbody//tr/td[5]//div[not(contains(@class,'ng-hide'))]"));
				  		for(int i=0;i<elements.size();i++){
				  			String strValue=elements.get(i).getText().trim();
				  			if(!strValue.equalsIgnoreCase("Pending Edit") && !strValue.equalsIgnoreCase("Pending Verify")){
				  				bFlag=true;
				  				break;
				  			}
				  		}if(bFlag){
				  			failureReport("Validate the Status of all the records after selecting In Process Radio Button", "Invalid Status");
				  		}else{
				  			SuccessReport("Validate the Status of all the records after selecting In Process Radio Button", "Status of all the records is either Pending Edit/Pending Verify");
				  		}
				  	}
				  	
				  
				  blnEventReport=false;
				} catch (Exception e) {
					throw e;
				}
		  }	  
	  
   /********************************************************************************************************
	 * Method 	Name		:	pendingEdits_verifies()
	 * Author				:	
	 * Description			:	This method verifies the headings in the table
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	:
    ********************************************************************************************************/	  
	 public void pendingEdits_verifies(String strEdit_Verify,String strSearchText,String strPayrollID,String strEmpName) throws Throwable{
		 try{
			 blnEventReport=true;
			 if(isElementPresent(EDTC_OR.TPSLINK,"TPS Link")){
				 click(EDTC_OR.TPSLINK,"TPS Link");
				 //This page validates the TERMINATION PROCESSING SYSTEM Title
				 //validatePageHeader(EDTC_OR.PAGEHEADER, "TERMINATION PROCESSING SYSTEM");
			 }
			 Thread.sleep(lSleep_Low);
			 if(strEdit_Verify.equalsIgnoreCase("Edits")){
				 click(EDTC_OR.PENDINGEDITSBTN,"Pending Edits Button");
			 }else if(strEdit_Verify.equalsIgnoreCase("Verifies")){
				 click(EDTC_OR.PENDINGEDITSBTN,"Pending Edits Button");
				 Thread.sleep(lSleep_Low);
				 click(EDTC_OR.PENDINGVERIFIESBTN,"Pending Verifies Button");
			 }
			 pageLoadingCompleted(EDTC_OR.PAGESPINNER);
			 Thread.sleep(lSleep_Low);
			 waitForElementPresent(EDTC_OR.SEARCHTEXTFIELD, "Search table Text field");
			 if(!strSearchText.isEmpty()){
				 type(EDTC_OR.SEARCHTEXTFIELD,strSearchText, "Search table Text field");
			 }
			 waitForElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+strPayrollID+"')]/parent::td//following-sibling::td/div[@title='Edit']//span"),strPayrollID+" Edit Button");
			 click(By.xpath(EDTC_OR.ELEMENTTEXT1+strPayrollID+"')]/parent::td//following-sibling::td/div[@title='Edit']//span"),strPayrollID+" Edit Button");
			 pageLoadingCompleted(EDTC_OR.PAGELAODER);
			 Thread.sleep(lSleep_Low);
			 //This page validates the Title
			  validatePageHeader(EDTC_OR.PAGEHEADER, "TPS sheet for "+strEmpName);
			 
			 blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
	 }
	 
	 /********************************************************************************************************
	  * Method 	Name		:	pendingEdits_verifies()
	  * Author				:	
	  * Description			:	This method verifies the headings in the table
	  * Date of creation 	:	
      * modifying person 	: 	
	  * Date of modification	:
	 ********************************************************************************************************/
	  public void searchEmployeeErrorMessage() throws Throwable{
		  try{
			  click(EDTC_OR.CLEARBTN,"Clear Button");
			 
			  blnEventReport=true;
			  //Error message is displayed when the user clicks on the Start of year button without entering the Termination Date 
			  click(EDTC_OR.STARTOFTERMYEARBTN,"Start of Year Button");
			  Thread.sleep(lSleep_Medium);
			  String errorMsg=getText(EDTC_OR.TERMDATEERRORMSG, "Term Date Error message").trim();
			  if(errorMsg.equalsIgnoreCase("Please enter Termination date first")){
				  SuccessReport("Validate whether the Error message is displayed when the user clicks on the Start of year button without entering the Termination Date","\""+errorMsg+"\" Error message is displayed");
			  }else{
				  failureReport("Validate whether the Error message is displayed when the user clicks on the Start of year button without entering the Termination Date", "Error message is not displayed");
			  }
			  click(EDTC_OR.ELIGIBILITYDATEBTN,"Eligibility Date Button");
			  Thread.sleep(lSleep_Medium);
			  if(isElementPresent(EDTC_OR.TERMDATEERRORMSG, "Term Date Error message")){
				  failureReport("Validate whether the Error message is not displayed when User clicks on Eligibility Date button", "Error message is displayed when User clicks on Eligibility Date button");
			  }
			  
			  //Error message is displayed if the Proration Start date is after Termination Date
			  String strTodaysDate=getCurrentDate("MM-dd-YYYY");
			  String strTomoDate=getTomorrowDate("MM-dd-YYYY");
			  type(EDTC_OR.TERMINATIONDATETEXTFIELD,strTodaysDate,"Termination Date text field");
			  driver.findElement(EDTC_OR.TERMINATIONDATETEXTFIELD).sendKeys(Keys.TAB);
			  type(EDTC_OR.PRORATIONSTARTDATETEXTFIELD,strTomoDate,"Proration Start Date text field");
			  driver.findElement(EDTC_OR.PRORATIONSTARTDATETEXTFIELD).sendKeys(Keys.TAB);
			  Thread.sleep(lSleep_Medium);
			  click(EDTC_OR.RESEARCHEMPLOYEEBTN,"Research Employee Button");
			  pageLoadingCompleted(EDTC_OR.PAGELAODER);
			  if(isElementPresent(EDTC_OR.TERMDATEERRORMSG, "Term Date Error message")){
				  failureReport("Validate whether the Error message is not displayed when Termination Date is Entered", "Error message is displayed when Termination Date is Entered");
			  }
			  errorMsg=getText(EDTC_OR.DATEORDERERRORMSG, "Date Order Error message").trim();
			  if(errorMsg.equalsIgnoreCase("Termination Date cannot be before Proration Date")){
				  SuccessReport("Validate whether the Error message is displayed if the Proration Start date is after Termination Date", "\""+errorMsg+"\" Error message is displayed");
			  }else{
				  failureReport("Validate whether the Error message is displayed if the Proration Start date is after Termination Date", " Error message is not displayed");
			  }
			  
			  driver.findElement(EDTC_OR.TERMINATIONDATETEXTFIELD).clear();
			  assertText(EDTC_OR.TERMINATIONDATEREQUIREDMSG, "Termination date is required.");
			  
			  Calendar cal = Calendar.getInstance();
			  cal.add(Calendar.YEAR, 1);
			  String strNextYear="01/01/"+Integer.toString(cal.get(Calendar.YEAR));;
			  type(EDTC_OR.TERMINATIONDATETEXTFIELD,strNextYear,"Termination Date text field");
			  driver.findElement(EDTC_OR.TERMINATIONDATETEXTFIELD).sendKeys(Keys.TAB);
			  type(EDTC_OR.PRORATIONSTARTDATETEXTFIELD,strTodaysDate,"Proration Start Date text field");
			  driver.findElement(EDTC_OR.PRORATIONSTARTDATETEXTFIELD).sendKeys(Keys.TAB);
			  click(EDTC_OR.RESEARCHEMPLOYEEBTN,"Research Employee Button");
			  Thread.sleep(lSleep_Low);
			  if(isElementPresent(EDTC_OR.TERMDATEERRORMSG, "Term Date Error message") || isElementPresent(EDTC_OR.DATEORDERERRORMSG, "Date Order Error message")){
				  failureReport("Validate whether the Error message is not displayed when Termination Date is Entered", "Error message is displayed when Termination Date is Entered");
			  }
			  errorMsg=getText(EDTC_OR.SAMEYEARERRORMSG, "Same Year Error message".trim());
			  if(errorMsg.equalsIgnoreCase("Both Termination Date and Proration Date should be in the same year")){
				  SuccessReport("Validate whether the Error message is displayed if the Proration Start date and Termination Date are not within the same year", "\""+errorMsg+"\" Error message is displayed");
			  }else{
				  failureReport("Validate whether the Error message is displayed if the Proration Start date and Termination Date are not within the same year", " Error message is not displayed");
			  }
			  
			  blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
	  }
   
	/********************************************************************************************************
	  * Method 	Name		:	viewSupplement_Pay()
	  * Author				:	
	  * Description			:	This method validates the Supp Pay value
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification	:
	 ********************************************************************************************************/
	public void viewSupplement_Pay() throws Throwable{
		try{
			blnEventReport=true;
			String strSuppPay=getText(By.xpath(EDTC_OR.ELEMENTTEXT+"Supp pay']/parent::td//following-sibling::td[1]//div"), "Supp Pay Value");
			String SuppPay=SQL_Queries.getSuppPay();
			if(strSuppPay.equalsIgnoreCase(SuppPay)){
				SuccessReport("Validate whether the Supp Pay displayed matches with the DB Table value", "\""+SuppPay+"\" Supp Pay displayed matches with the DB Table value");	
			}else{
				failureReport("Validate whether the Supp Pay displayed matches with the DB Table value", "Supp Pay displayed do not match with the DB Table value");
			}
			blnEventReport=false;
		} catch (Exception e) {
			throw e;
		}
	}
		/********************************************************************************************************
		  * Method 	Name		:	validateSupp_PayTable()
		  * Author				:	
		  * Description			:	This method validates the Supp Pay table
		  * Date of creation 	:	
		  * modifying person 	: 	
		  * Date of modification	:
		 ********************************************************************************************************/
	 public void validateSupp_PayTable(String suppPayTableHeadings,String strSupPay) throws Throwable{
		 try{
			 blnEventReport=true;
			 click(EDTC_OR.SUPPAYVIEWLINK, "Sup Pay View Link");
			 pageLoadingCompleted(EDTC_OR.PAGELAODER);
			 waitForVisibilityOfElement(By.xpath(EDTC_OR.SUPPAYDIALOG), "Supp Pay Modal Dialog");
			 //This method validates the Modal Dialog Header
			 validateModalDialogHeader(By.xpath(EDTC_OR.SUPPAYDIALOG+"//h4"), "Supplemental Pay for "+empName+" ("+empID+")");
			
			 //This method validates the Table Headings
			 verifyTableHeading(EDTC_OR.SUPP_PAYTABLE, suppPayTableHeadings);
			 
			 if(strSupPay.equalsIgnoreCase("No")){
				 String strMsg1=getText(EDTC_OR.NOSUPP_PAYMSG, "No Supplemental Payments Message");
				 if(strMsg1.equalsIgnoreCase("No Supplemental Payments were found")){
					 SuccessReport("Validate whether appropriate message is displayed for No Supplements Pay", strMsg1+" Message is displayed");
				 }else{
					 failureReport("Validate whether appropriate message is displayed for No Supplements Pay", "Message is not displayed");	 
				 }
			  }
			 
			 
			 click(EDTC_OR.CLOSEBTN, "Close Button");
			 blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
	 }
	 /********************************************************************************************************
	  * Method 	Name		:	validateTPSWorkSheetPage()
	  * Author				:	
	  * Description			:	This method validates the Supp Pay table
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification	:
	 ********************************************************************************************************/	  
	  public void validateTPSWorkSheetPage() throws Throwable{
		  try{
			  blnEventReport=true;
			  String strText="";
			  Thread.sleep(lSleep_Medium);
			  if(isElementPresent(EDTC_OR.CREATEWORKSHEETBTN,"Create Work sheet Button" )){
				  click(EDTC_OR.CREATEWORKSHEETBTN,"Create Work sheet Button" );
				  //This method validates the Page header
				  validatePageHeader(EDTC_OR.PAGEHEADER, "TPS sheet for "+empName+" - "+empID);
			  }
			 
			  //Validate whether the Employee Name is displayed 
			  strText=getText(EDTC_OR.EMPNAMELABEL, "Employee Name Label");
			  if(strText.contains(empName+" "+"empID")){
				  SuccessReport("Validate whether the Employee Name and ID are displayed", "Employee Name and ID are displayed");
			  }else{
				  SuccessReport("Validate whether the Employee Name and ID are displayed", "Employee Name and ID are displayed");
			  }
			  //Validate the Fields
			  isElementDisplayed(EDTC_OR.STDHOURSVALUE, "Std Hours");
			  isElementDisplayed(EDTC_OR.COMPANYIDVALUE, "Company ID");
			  isElementDisplayed(EDTC_OR.WORKSTATEVALUE, "Work State");
			  isElementDisplayed(EDTC_OR.ACCRUEDPTOVALUE, "Accrued PTO");
			  isElementDisplayed(EDTC_OR.CURRYEARPTOVALUE, "Curr year PTO");
			  isElementDisplayed(EDTC_OR.PTORECORDEDVALUE, "PTO Recorded");
			  isElementDisplayed(EDTC_OR.LASTTIMECARDVALUE, "Last Time Record");
			  isElementDisplayed(EDTC_OR.TERMDATEVALUE, "Term Date");
			  isElementDisplayed(EDTC_OR.HOURLYRATETEXTFIELD, "Hourly Rate");
			  isElementDisplayed(EDTC_OR.PAYGROUPTEXTFIELD, "Pay Group");
			  isElementDisplayed(EDTC_OR.ADDLPTOTAKENVALUE, "Addl PTO taken");
			  isElementDisplayed(EDTC_OR.PAIDTHRUDATETEXTFIELD, "Paid thru date");
			  isElementDisplayed(EDTC_OR.PTOHOURSDUETEXTFIELD, "PTO hours due");

			  
			  //Validate the Default Status
			  isEnabled(EDTC_OR.HOURLYRATETEXTFIELD, "Hourly Rate");
			  isEnabled(EDTC_OR.PAYGROUPTEXTFIELD, "Pay Group");
			  isEnabled(EDTC_OR.ADDLPTOTAKENVALUE, "Addl PTO taken");
			  isEnabled(EDTC_OR.PAIDTHRUDATETEXTFIELD, "Paid thru date");
			  isEnabled(EDTC_OR.PTOHOURSDUETEXTFIELD, "PTO hours due");
			  
			  //Validate whether the Save Buttons are displayed 
			  int btnCount=driver.findElements(EDTC_OR.SAVEBTN).size();
			  if(btnCount==2){
				  SuccessReport("Validate whether Two Save buttons are displayed", "Two Save buttons are displayed");
			  }else{
				  failureReport("Validate whether Two Save buttons are displayed", "Two Save buttons are not displayed");
			  }
			 
			  //Validate the Discard,Calculate,Back,Revert to Verification buttons,Notes Text Area,Selected Verifier and Suggested Verifier drop downs Fields
			  isElementDisplayed(EDTC_OR.CALCULATEBTN, "Calculate Button");
			  isElementDisplayed(EDTC_OR.CALCULATEBTN, "Calculate Button");
			  isElementDisplayed(EDTC_OR.REVERTTOVERIFICATIONBTN, "Revert to Verification Button");
			  isElementDisplayed(EDTC_OR.NOTESTEXTAREA, "Notes Text Area");
			  isElementDisplayed(EDTC_OR.READYFORVERIFICATIONCHECKBOX, "Ready for verification Check box");
			  isElementDisplayed(EDTC_OR.SUGGESTEDVERIFIERDROPDOWN, "Suggested verifier Drop dpwn");
			  isElementDisplayed(EDTC_OR.DISCARDBTN, "Discard Button");
			  isElementDisplayed(EDTC_OR.BWRADIOBTN, "Pay Cycle -BW Radio Button");
			  isElementDisplayed(EDTC_OR.SELECTEMPBTN, "Back to Select Employee Button");
			  isElementDisplayed(EDTC_OR.RESEARCHBTN,"Research Button");
			
			  //Validate the default status of the Discard,Calculate,Back,Revert to Verification buttons,Notes Text Area,Selected Verifier and Suggested Verifier drop downs
			  isEnabled(EDTC_OR.CALCULATEBTN, "Calculate Button");
			  isEnabled(EDTC_OR.DISCARDBTN, "Discard Button");
			  isEnabled(EDTC_OR.CALCULATEBTN, "Calculate Button");
			  isDisabled(EDTC_OR.REVERTTOVERIFICATIONBTN, "Revert to Verification Button");
			  isEnabled(EDTC_OR.NOTESTEXTAREA, "Notes Text Area");
			  isEnabled(EDTC_OR.READYFORVERIFICATIONCHECKBOX, "Ready for verification Check box");
			  isEnabled(EDTC_OR.SUGGESTEDVERIFIERDROPDOWN, "Suggested verifier Drop dpwn");
			  isEnabled(EDTC_OR.BWRADIOBTN, "Pay Cycle -BW Radio Button");
			  isEnabled(EDTC_OR.SMRADIOBTN, "Pay Cycle -SM Radio Button");
			  isEnabled(EDTC_OR.SELECTEMPBTN, "Back to Select Employee Button");
			  isEnabled(EDTC_OR.RESEARCHBTN,"Research Button");
			
			  //Validate the Under Edit, Under Verification, Return to Verification,Approved as Final Radio and Void (Retain Record) buttons Fields
			  isElementDisplayed(EDTC_OR.UNDEREDITRADIOTBN, "Under Edit Radio Button");
			  isElementDisplayed(EDTC_OR.UNDERVERIFICATIONRADIOTBN, "Under Verification Radio Button");
			  isElementDisplayed(EDTC_OR.RETURNTOPREPARATIONRADIOBTN, "Return to Verification Radio Button");
			  isElementDisplayed(EDTC_OR.APPROVEDASFINALRADIOBTN, "Approved as Final Radio Button");
			  isElementDisplayed(EDTC_OR.RETAINRECORDRADIOBTN, "Void (Retain Record) Radio Button");
			  isElementDisplayed(EDTC_OR.SUGGESTEDPREPARERDROPDOWN, "Suggested Preparer Drop down");
			  isElementDisplayed(EDTC_OR.NOTESTOPREPARERTEXTAREA, "Notes to preparer Text Area");
			 
			  //Validate the default Status of Under Edit, Under Verification, Return to Verification,Approved as Final Radio and Void (Retain Record) buttons.
			  isDisabled(EDTC_OR.UNDEREDITRADIOTBN, "Under Edit Radio Button");
			  isDisabled(EDTC_OR.UNDERVERIFICATIONRADIOTBN, "Under Verification Radio Button");
			  isDisabled(EDTC_OR.RETURNTOPREPARATIONRADIOBTN, "Return to Verification Radio Button");
			  isDisabled(EDTC_OR.APPROVEDASFINALRADIOBTN, "Approved as Final Radio Button");
			  isDisabled(EDTC_OR.RETAINRECORDRADIOBTN, "Void (Retain Record) Radio Button");
			  isDisabled(EDTC_OR.SUGGESTEDPREPARERDROPDOWN, "Suggested Preparer Drop down");
			  isDisabled(EDTC_OR.NOTESTOPREPARERTEXTAREA, "Notes to preparer Text Area");
			 
			  
			  //This method validates the Drop down and Text Field Default Status
			  validateEditWorkSheetDropDownStatus();
			  
			  blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
	  }
	  
	  /********************************************************************************************************
	   * Method 	Name		:	validateStdHours()
	   * Author				:	
	   * Description			:	This method validates the Standard Hours
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	  	public void validateStdHours(By Locator,String strValue,String strValidationType) throws Throwable{
	  		try{
	  			blnEventReport=true;
	  			String strStdHours="";
	  			if(strValidationType.equalsIgnoreCase("DB")){
	  				strStdHours=getText(Locator, "Standard Hours Value").trim();
	  				if(strStdHours.equalsIgnoreCase(SQL_Queries.getStdHours())){
	  					SuccessReport("Validate the Std Hours field value", "");
	  				}else{
	  					failureReport("Validate the Std Hours field value", "Value on the page do not match with value from the DB Table");
	  				}	
	  			}else{
	  				if(strValue.equalsIgnoreCase(strStdHours)){
	  					SuccessReport("Validate the Std Hours field value", "");
	  				}else{
	  					failureReport("Validate the Std Hours field value", "");
	  				}	
	  			}
	  			blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
	  	}
	  
	  	
	  /********************************************************************************************************
	   * Method 	Name		:	validateCompanyID()
	   * Author				:	
	   * Description			:	This method validates the Standard Hours
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	  	public void validateCompanyID(By Locator,String strValue,String strValidationType,String strEmpID) throws Throwable{
	  		try{
	  			blnEventReport=true;
	  			String strCompanyID="";
	  			if(strValidationType.equalsIgnoreCase("DB")){
	  				 strCompanyID=getText(Locator, "Company ID Value").trim();
	  				 if(strCompanyID.equalsIgnoreCase(SQL_Queries.getCompanyID(strEmpID))){
	  					 SuccessReport("Validate the Company ID field value", "");
	  				 }else{
	  					 failureReport("Validate the Company ID field value", "Value on the page do not match with value from the DB Table");
	  				 }
	  			}else{
	  				if(strValue.equalsIgnoreCase(strCompanyID)){
	  					SuccessReport("Validate the Company ID field value", "");
	  				 }else{
	  					 failureReport("Validate the Company ID field value", "Value on the page do not match with value from the DB Table");
	  				 }
	  			}
	  			blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
	  	}
	  	
 	
	  /********************************************************************************************************
	   * Method 	Name		:	validateWorkState()
	   * Author				:	
	   * Description			:	This method validates the Standard Hours
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	  	public void validateWorkState(By Locator,String strValue,String strValidationType,String strEmpID) throws Throwable{
	  		try{
	  			blnEventReport=true;
	  			String strWorkState="";
	  			if(strValidationType.equalsIgnoreCase("DB")){
	  				 strWorkState=getText(Locator, "Work State Value").trim();
	  				 if(strWorkState.equalsIgnoreCase(SQL_Queries.getWorkState())){
	  					 SuccessReport("Validate the Work State field value", "");
	  				 }else{
	  					 failureReport("Validate the Work State field value", "Value on the page do not match with value from the DB Table");
	  				 }
	  			}else{
	  				if(strValue.equalsIgnoreCase(strWorkState)){
	  					SuccessReport("Validate the Work State field value", "");
	  				 }else{
	  					 failureReport("Validate the Work State field value", "Value on the page do not match with value from the DB Table");
	  				 }
	  			}
	  			blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
	  	}	

	  /********************************************************************************************************
	   * Method 	Name		:	validateCurrentYearPTO()
	   * Author				:	
	   * Description			:	This method validates the Standard Hours
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	  	public void validateCurrentYearPTO(By Locator,String strValue,String strValidationType,String strEmpID) throws Throwable{
	  		try{
	  			blnEventReport=true;
	  			String strCurrYearPTO="";
	  			if(strValidationType.equalsIgnoreCase("DB")){
	  				strCurrYearPTO=getText(Locator, "Work State Value").trim();
	  				 if(strCurrYearPTO.equalsIgnoreCase(SQL_Queries.getCurrYearPTO())){
	  					 SuccessReport("Validate the Current Year PTO field value", "");
	  				 }else{
	  					 failureReport("Validate the Current Year PTO field value", "Value on the page do not match with value from the DB Table");
	  				 }
	  			}else{
	  				if(strValue.equalsIgnoreCase(strCurrYearPTO)){
	  					 SuccessReport("Validate the Current Year PTO field value", "");
	  				 }else{
	  					 failureReport("Validate the Current Year PTO field value", "Value on the page do not match with value from the DB Table");
	  				 }
	  			}
	  			blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
	  	}	
	
	  	
	  /********************************************************************************************************
	   * Method 	Name		:	validateAccruedPTO()
	   * Author				:	
	   * Description			:	This method validates the Standard Hours
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	  	public void validateAccruedPTO(By Locator,String strValue,String strValidationType,String strEmpID) throws Throwable{
	  		try{
	  			blnEventReport=true;
	  			String strAccruedPTO="";
	  			if(strValidationType.equalsIgnoreCase("DB")){
	  				strAccruedPTO=getText(Locator, "Accrued PTO Value").trim();
	  				 if(strAccruedPTO.equalsIgnoreCase(SQL_Queries.getAccruedPTO())){
	  					 SuccessReport("Validate the Accrued PTO field value", "");
	  				 }else{
	  					 failureReport("Validate the Accrued PTO field value", "Value on the page do not match with value from the DB Table");
	  				 }
	  			}else{
	  				if(strValue.equalsIgnoreCase(strAccruedPTO)){
	  					SuccessReport("Validate the Accrued PTO field value", "");
	  				 }else{
	  					 failureReport("Validate the Accrued PTO field value", "Value on the page do not match with value from the DB Table");
	  				 }
		  			}
		  			blnEventReport=false;
				} catch (Exception e) {
					throw e;
				}
		  	}
	  	
  	 /********************************************************************************************************
	   * Method 	Name		:	validatePTORecorded()
	   * Author				:	
	   * Description			:	This method validates the Standard Hours
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	  	public void validatePTORecorded(By Locator,String strValue,String strValidationType,String strEmpID) throws Throwable{
	  		try{
	  			blnEventReport=true;
	  			String strPTORecorded="";
	  			if(strValidationType.equalsIgnoreCase("DB")){
	  				 strPTORecorded=getText(Locator, "Accrued PTO Value").trim();
	  				 if(strPTORecorded.equalsIgnoreCase(SQL_Queries.getPTORecorded())){
	  					 SuccessReport("Validate the PTO Recorded field value", "");
	  				 }else{
	  					 failureReport("Validate the PTO Recorded field value", "Value on the page do not match with value from the DB Table");
	  				 }
	  			}else{
	  				if(strValue.equalsIgnoreCase(strPTORecorded)){
	  					SuccessReport("Validate the PTO Recorded field value", "");
	  				 }else{
	  					 failureReport("Validate the PTO Recorded field value", "Value on the page do not match with value from the DB Table");
	  				 }
		  			}
		  			blnEventReport=false;
				} catch (Exception e) {
					throw e;
				}
		  	}
  	 /********************************************************************************************************
	   * Method 	Name		:	validateLastTimeCard()
	   * Author				:	
	   * Description			:	This method validates the Standard Hours
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	  	public void validateLastTimeCard(By Locator,String strValue,String strValidationType,String strEmpID) throws Throwable{
	  		try{
	  			blnEventReport=true;
	  			String strLastTimeCard="";
	  			if(strValidationType.equalsIgnoreCase("DB")){
	  				 strLastTimeCard=getText(Locator, "Last Time Card Value").trim();
	  				 if(strLastTimeCard.equalsIgnoreCase(SQL_Queries.getLastTimeCard())){
	  					 SuccessReport("Validate the Last Time Card field value", "");
	  				 }else{
	  					 failureReport("Validate the Last Time Card field value", "Value on the page do not match with value from the DB Table");
	  				 }
	  			}else{
	  				if(strValue.equalsIgnoreCase(strLastTimeCard)){
	  					 SuccessReport("Validate the Last Time Card field value", "");
	  				 }else{
	  					 failureReport("Validate the Last Time Card field value", "Value on the page do not match with value from the DB Table");
	  				 }
		  			}
		  			blnEventReport=false;
				} catch (Exception e) {
					throw e;
				}
		  	}
	  	
  	 /********************************************************************************************************
	   * Method 	Name		:	validateTermDate()
	   * Author				:	
	   * Description			:	This method validates the Standard Hours
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	  	public void validateTermDate(By Locator,String strValue,String strValidationType,String strEmpID) throws Throwable{
	  		try{
	  			blnEventReport=true;
	  			String strTermDate="";
	  			if(strValidationType.equalsIgnoreCase("DB")){
	  				 strTermDate=getText(Locator, "Term Date Value").trim();
	  				 if(strTermDate.equalsIgnoreCase(SQL_Queries.getTermDate())){
	  					 SuccessReport("Validate the Term Date field value", "");
	  				 }else{
	  					 failureReport("Validate the Term Date field value", "Value on the page do not match with value from the DB Table");
	  				 }
	  			}else{
	  				if(strValue.equalsIgnoreCase(strTermDate)){
	  					SuccessReport("Validate the Term Date field value", "");
	  				 }else{
	  					 failureReport("Validate the Term Date field value", "Value on the page do not match with value from the DB Table");
	  				 }
		  			}
		  			blnEventReport=false;
				} catch (Exception e) {
					throw e;
				}
		  	}
	  	
	  	
  	
  	 /********************************************************************************************************
	   * Method 	Name		:	validateAdditionalPTO()
	   * Author				:	
	   * Description			:	This method validates the Standard Hours
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	  	public void validateAdditionalPTO(By Locator,String strValue,String strValidationType,String strEmpID) throws Throwable{
	  		try{
	  			blnEventReport=true;
	  			String strAddlPTOTaken="";
	  			if(strValidationType.equalsIgnoreCase("DB")){
	  				 strAddlPTOTaken=getAttribute(Locator,"value", "Additional PTO taken Value").trim();
	  				 if(strAddlPTOTaken.equalsIgnoreCase(SQL_Queries.getAddlPTO())){
	  					 SuccessReport("Validate the Additonal PTO taken field value", "");
	  				 }else{
	  					 failureReport("Validate the Additonal PTO taken field value", "Value on the page do not match with value from the DB Table");
	  				 }
	  			}else{
	  				if(strValue.equalsIgnoreCase(strAddlPTOTaken)){
	  					 SuccessReport("Validate the Additonal PTO taken field value", "");
	  				 }else{
	  					 failureReport("Validate the Additonal PTO taken field value", "Value on the page do not match with value from the DB Table");
	  				 }
		  			}
		  			blnEventReport=false;
				} catch (Exception e) {
					throw e;
				}
		  	}

  	 /********************************************************************************************************
	   * Method 	Name		:	validatePTOHrsDue()
	   * Author				:	
	   * Description			:	This method validates the Standard Hours
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	  	public void validatePTOHrsDue(By Locator,String strValue,String strValidationType,String strEmpID) throws Throwable{
	  		try{
	  			blnEventReport=true;
	  			String strPTOHrsDue="";
	  			if(strValidationType.equalsIgnoreCase("DB")){
	  				 strPTOHrsDue=getAttribute(Locator,"value", "PTO Hours Due Value").trim();
	  				 if(strPTOHrsDue.equalsIgnoreCase(SQL_Queries.getPTOHoursDue())){
	  					 SuccessReport("Validate the PTO Hours Due value", "");
	  				 }else{
	  					 failureReport("Validate the PTO Hours Due value", "Value on the page do not match with value from the DB Table");
	  				 }
	  			}else{
	  				if(strValue.equalsIgnoreCase(strPTOHrsDue)){
	  					 SuccessReport("Validate the PTO Hours Due value", "");
	  				 }else{
	  					 failureReport("Validate the PTO Hours Due value", "Value on the page do not match with value from the DB Table");
	  				 }
		  			}
		  			blnEventReport=false;
				} catch (Exception e) {
					throw e;
				}
		  	}
  	 /********************************************************************************************************
	   * Method 	Name		:	validateHourlyRate()
	   * Author				:	
	   * Description			:	This method validates the Standard Hours
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	  	public void validateHourlyRate(By Locator,String strValue,String strValidationType,String strEmpID) throws Throwable{
	  		try{
	  			blnEventReport=true;
	  			String strHourlyRate="";
	  			if(strValidationType.equalsIgnoreCase("DB")){
	  				strHourlyRate=getAttribute(Locator,"value", "Hourly Rate").trim();
	  				 if(strHourlyRate.equalsIgnoreCase(SQL_Queries.getHourlyRate())){
	  					 SuccessReport("Validate the Hourly Rate value", "");
	  				 }else{
	  					 failureReport("Validate the Hourly Rate value", "Value on the page do not match with value from the DB Table");
	  				 }
	  			}else{
	  				if(strValue.equalsIgnoreCase(strHourlyRate)){
	  					 SuccessReport("Validate the Hourly Rate value", "");
	  				 }else{
	  					 failureReport("Validate the Hourly Rate value", "Value on the page do not match with value from the DB Table");
	  				 }
		  			}
		  			blnEventReport=false;
				} catch (Exception e) {
					throw e;
				}
		  	}
	  	
  	 /********************************************************************************************************
	   * Method 	Name		:	validatePaidThruDate()
	   * Author				:	
	   * Description			:	This method validates the Standard Hours
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	  	public void validatePaidThruDate(By Locator,String strValue,String strValidationType,String strEmpID) throws Throwable{
	  		try{
	  			blnEventReport=true;
	  			String strPaidThru="";
	  			if(strValidationType.equalsIgnoreCase("DB")){
	  				strPaidThru=getAttribute(Locator,"value", "Paid Thru Date").trim();
	  				 if(strPaidThru.equalsIgnoreCase(SQL_Queries.getPaidThruDate())){
	  					 SuccessReport("Validate the Paid Thru Date", "");
	  				 }else{
	  					 failureReport("Validate the Paid Thru Date", "Value on the page do not match with value from the DB Table");
	  				 }
	  			}else{
	  				if(strValue.equalsIgnoreCase(strPaidThru)){
	  					 SuccessReport("Validate the Paid Thru Date", "");
	  				 }else{
	  					 failureReport("Validate the Paid Thru Date", "Value on the page do not match with value from the DB Table");
	  				 }
		  			}
		  			blnEventReport=false;
				} catch (Exception e) {
					throw e;
				}
		  	} 
  	 /********************************************************************************************************
	   * Method 	Name		:	validatePayGroup()
	   * Author				:	
	   * Description			:	This method validates the Standard Hours
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	  	public void validatePayGroup(By Locator,String strValue,String strValidationType,String strEmpID) throws Throwable{
	  		try{
	  			blnEventReport=true;
	  			String strPayGroup="";
	  			if(strValidationType.equalsIgnoreCase("DB")){
	  				strPayGroup=getAttribute(Locator,"value", "Pay Group").trim();
	  				 if(strPayGroup.equalsIgnoreCase(SQL_Queries.getPayGroup())){
	  					 SuccessReport("Validate the Pay Group", "");
	  				 }else{
	  					 failureReport("Validate the Pay Group", "Value on the page do not match with value from the DB Table");
	  				 }
	  			}else{
	  				if(strValue.equalsIgnoreCase(strPayGroup)){
	  					 SuccessReport("Validate the Pay Group", "");
	  				 }else{
	  					 failureReport("Validate the Pay Group", "Value on the page do not match with value from the DB Table");
	  				 }
		  			}
		  			blnEventReport=false;
				} catch (Exception e) {
					throw e;
				}
		  	} 
	 /********************************************************************************************************
	  * Method 	Name		:	validateTPSSheetPage()
	  * Author				:	
	  * Description			:	This method validates the Supp Pay table
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification	:
	  ********************************************************************************************************/	  
	   public void validateTPSSheetPageValues(String SheetName,int iLoop) throws Throwable{
		 try{
			 blnEventReport=true;
			 String strValue="";
			 String strHourlyRate=Excelobject.getCellData(SheetName, "Hourly Rate", iLoop);
			 String strPayGroup=Excelobject.getCellData(SheetName, "Pay Group", iLoop);
			 String strAddlPTOTaken=Excelobject.getCellData(SheetName, "Additional PTO Taken", iLoop); 
			 String strPaidThruDate=Excelobject.getCellData(SheetName, "Paid Thru Date", iLoop);
			 String strHoursToBeProcessed=Excelobject.getCellData(SheetName, "Hours To Be Processed", iLoop);
			 String strHours=Excelobject.getCellData(SheetName, "Hours", iLoop);
			 String strDeductions_Dollars=Excelobject.getCellData(SheetName, "Deductions with Dollars", iLoop);
			 String strDollars=Excelobject.getCellData(SheetName, "Dollars for Deductions", iLoop);
			 String strVariablePay=Excelobject.getCellData(SheetName, "Variable Pay", iLoop);
			 String strDollars_VariablePay=Excelobject.getCellData(SheetName, "Dollars Variable Pay", iLoop);
			 String strDeductions_Percentage=Excelobject.getCellData(SheetName, "Deductions with Percentage", iLoop);
			 String strPercentages=Excelobject.getCellData(SheetName, "Percentages", iLoop);
			 String strEarnings=Excelobject.getCellData(SheetName, "Earnings", iLoop);
			 String strEarning_Hours=Excelobject.getCellData(SheetName, "Earning Hours", iLoop);
			 String strReconciliation=Excelobject.getCellData(SheetName, "Reconciliation", iLoop);
			 String strReconciliation_Hours=Excelobject.getCellData(SheetName, "Reconciliation Hours", iLoop);
			 String strNotes=Excelobject.getCellData(SheetName, "Notes", iLoop);
			 String strReadyForVerification=Excelobject.getCellData(SheetName, "Ready For Verification", iLoop);
			 String strSuggestedVerifier=Excelobject.getCellData(SheetName, "Suggested Verifier", iLoop); 
			 String strSaveActionStatus=Excelobject.getCellData(SheetName, "Save Action Status", iLoop);
			 String strPayCycle=Excelobject.getCellData(SheetName, "Pay Cycle", iLoop);
			 String strSuggestedPreparer=Excelobject.getCellData(SheetName, "Suggested Preparer", iLoop);
			 String strNotesToPreparer=Excelobject.getCellData(SheetName, "Notes To Preparer", iLoop);
			 
			 //Validate the Mandatory Fields
//			 validateStdHours(EDTC_OR.STDHOURSVALUE,"", "DB");
//			 validateCompanyID(EDTC_OR.COMPANYIDVALUE,"", "DB",empID);
//			 validateWorkState(EDTC_OR.WORKSTATEVALUE,"", "DB", empID);
//			 validateAccruedPTO(EDTC_OR.ACCRUEDPTOVALUE,"", "DB",empID);
//			 validateCurrentYearPTO(EDTC_OR.CURRYEARPTOVALUE,"", "DB", empID);
//			 validatePTORecorded(EDTC_OR.PTORECORDEDVALUE,"", "DB", empID);
//			 validateTermDate(EDTC_OR.TERMDATEVALUE,"", "DB", empID);
//			 validatePTOHrsDue(EDTC_OR.PTOHOURSDUETEXTFIELD,"", "DB", empID);
//			 validateAdditionalPTO(EDTC_OR.ADDLPTOTAKENVALUE,strAddlPTOTaken, "DB", empID);
//			 validateLastTimeCard(EDTC_OR.LASTTIMECARDVALUE,"", "DB", empID);
//			 validateHourlyRate(EDTC_OR.HOURLYRATETEXTFIELD,strHourlyRate, "DB", empID);
//			 validatePaidThruDate(EDTC_OR.PAIDTHRUDATETEXTFIELD,strPaidThruDate, "DB", empID);
//			 validatePayGroup(EDTC_OR.PAYGROUPTEXTFIELD,strPayGroup, "DB", empID);
			 
			 //Validate the Pay Cycle Radio button selected
			 if(isChecked(By.xpath(EDTC_OR.PAYCYCLERADIOBTN+strPayCycle+"']//input"),strPayCycle+" Radio Button")){
				 SuccessReport("Validate whether the "+strPayCycle+" Radio button is selected", strPayCycle+" Radio button is selected");
			 }else{
				 failureReport("Validate whether the "+strPayCycle+" Radio button is selected", strPayCycle+" Radio button is not selected");
			 }
			 
			 
			 //Validate the Values from the Drop Down and Text Fields
			 if(!strHoursToBeProcessed.isEmpty() && !strHours.isEmpty()){
				 validateDropDown_TextField_Values(EDTC_OR.HOURSTOBEPROCESSEDDROPDOWNS, strHoursToBeProcessed,EDTC_OR.HOURSTEXTFIELDS,strHours,"DB","Hours to be processed","Hours");	 
			 }
			 if(!strDeductions_Dollars.isEmpty() && !strDollars.isEmpty()){
				 validateDropDown_TextField_Values(EDTC_OR.DEDUCTIONSDOLLARSDROPDOWNS, strDeductions_Dollars,EDTC_OR.DEDUCTIONSDOLLARSTEXTFIELDS,strDollars,"DB","Deductions Dollars","Dollars");
			 }
			 if(!strVariablePay.isEmpty() && !strDollars_VariablePay.isEmpty()){
				 validateDropDown_TextField_Values(EDTC_OR.VARIABLEPAYDROPDOWNS, strVariablePay,EDTC_OR.HOURSTEXTFIELDS,strDollars_VariablePay,"DB","Variable Pay","Hours");
			 }
			 if(!strDeductions_Percentage.isEmpty() && !strPercentages.isEmpty()){
				 validateDropDown_TextField_Values(EDTC_OR.DEDUCTIONSPERCENTAGEDROPDOWNS, strDeductions_Percentage,EDTC_OR.HOURSTEXTFIELDS,strPercentages,"DB","Deductions Percentage","Percentage");	 
			 }
			 if(!strEarnings.isEmpty() && !strEarning_Hours.isEmpty()){
				 validateDropDown_TextField_Values(EDTC_OR.RECLASSIFYEARNINGSDROPDOWNS, strEarnings,EDTC_OR.HOURSTEXTFIELDS,strEarning_Hours,"DB","Reclassify Earnings","Hours");	 
			 }
			 if(!strReconciliation.isEmpty() && !strReconciliation_Hours.isEmpty()){
				 validateDropDown_TextField_Values(EDTC_OR.PTORECONCILIATIONDROPDOWNS, strReconciliation,EDTC_OR.HOURSTEXTFIELDS,strReconciliation_Hours,"DB","PTO Reconciliation","Hours");	 
			 }
			 
			 blnEventReport=true;
			 //Validate the Notes
			 if(!strNotes.isEmpty()){
				 strValue=getAttribute(EDTC_OR.NOTESTEXTAREA,"value","Notes Text Area");
				 if(strValue.equalsIgnoreCase(strNotes)){
					 SuccessReport("Validate the Notes in the Text Area \""+strValue+"\"", "\""+strValue+"\" is Present in the Notes Text Area");
				 }else{
					 failureReport("Validate the Notes in the Text Area \""+strValue+"\"", "Text is not Present in the Notes Text Area");
				 }
			 }
			 
			 //If the Status is Under Verification then the Delete button is disabled
			 if(strSaveActionStatus.equalsIgnoreCase("Under verification")){
				 //Suggested Verifier
				 isDisabled(EDTC_OR.SUGGESTEDVERIFIERDROPDOWN,"Suggested Verifier Drop Down");
				
				 //Ready For Verification Check box
				 isDisabled(EDTC_OR.READYFORVERIFICATIONCHECKBOX,"Ready For Verification Check box");
				 //Save Action Radio Button Status
				 isDisabled(EDTC_OR.UNDEREDITRADIOTBN, "Under Edit Radio Button");
				 isEnabled(EDTC_OR.UNDERVERIFICATIONRADIOTBN, "Under Verification Radio Button");
				 isEnabled(EDTC_OR.RETURNTOPREPARATIONRADIOBTN, "Return to Verification Radio Button");
				 isEnabled(EDTC_OR.APPROVEDASFINALRADIOBTN, "Approved as Final Radio Button");
				 isEnabled(EDTC_OR.RETAINRECORDRADIOBTN, "Void (Retain Record) Radio Button");
				 
				 //Delete Button
				 isDisabled(EDTC_OR.DELETEBTN_PARENT, "Delete Button");
 				 //Check the Status of Revert to Verification Button 
				 isDisabled(EDTC_OR.REVERTTOVERIFICATIONBTN, "Revert to Verification Button");
				 
			 }else if(strSaveActionStatus.equalsIgnoreCase("Approved as final") && userType.equalsIgnoreCase("Editor")){
				 
				 //Ready For Verification Check box
				 isDisabled(EDTC_OR.READYFORVERIFICATIONCHECKBOX,"Ready For Verification Check box");
				 //Suggested Verifier
				 isDisabled(EDTC_OR.SUGGESTEDVERIFIERDROPDOWN,"Suggested Verifier Drop Down");
				 //Void Button
				 isElementDisplayed(EDTC_OR.VOIDBTN, "Void Button");
				 isDisabled(EDTC_OR.VOIDBTN_PARENT, "Void Button");
				 //Save Action Radio Button Status
				 isDisabled(EDTC_OR.UNDEREDITRADIOTBN, "Under Edit Radio Button");
				 isEnabled(EDTC_OR.UNDERVERIFICATIONRADIOTBN, "Under Verification Radio Button");
				 isEnabled(EDTC_OR.RETURNTOPREPARATIONRADIOBTN, "Return to Preparation Radio Button");
				 isEnabled(EDTC_OR.APPROVEDASFINALRADIOBTN, "Approved as Final Radio Button");
				 isEnabled(EDTC_OR.RETAINRECORDRADIOBTN, "Void (Retain Record) Radio Button");
				 
				 //Check the Status of Revert to Verification Button 
				 isDisabled(EDTC_OR.REVERTTOVERIFICATIONBTN, "Revert to Verification Button");
			 }else if(strSaveActionStatus.equalsIgnoreCase("Approved as final") && !userType.equalsIgnoreCase("Editor")){
				 
				 //Ready For Verification Check box
				 isDisabled(EDTC_OR.READYFORVERIFICATIONCHECKBOX,"Ready For Verification Check box");
				 //Suggested Verifier
				 isDisabled(EDTC_OR.SUGGESTEDVERIFIERDROPDOWN,"Suggested Verifier Drop Down");
				 //Void Button
				 isElementDisplayed(EDTC_OR.VOIDBTN, "Void Button");
				 isEnabled(EDTC_OR.VOIDBTN_PARENT, "Void Button");
				 //Save Action Radio Button Status
				 isDisabled(EDTC_OR.UNDEREDITRADIOTBN, "Under Edit Radio Button");
				 isEnabled(EDTC_OR.UNDERVERIFICATIONRADIOTBN, "Under Verification Radio Button");
				 isEnabled(EDTC_OR.RETURNTOPREPARATIONRADIOBTN, "Return to Preparation Radio Button");
				 isEnabled(EDTC_OR.APPROVEDASFINALRADIOBTN, "Approved as Final Radio Button");
				 isEnabled(EDTC_OR.RETAINRECORDRADIOBTN, "Void (Retain Record) Radio Button");
				 
				 //Check the Status of Revert to Verification Button 
				 isEnabled(EDTC_OR.REVERTTOVERIFICATIONBTN, "Revert to Verification Button");
			 }else if(strSaveActionStatus.equalsIgnoreCase("Under edit") && !userType.equalsIgnoreCase("Verifier")){
				 
				 //Ready For Verification Check box
				 isEnabled(EDTC_OR.READYFORVERIFICATIONCHECKBOX,"Ready For Verification Check box");
				 //Suggested Verifier
				 isEnabled(EDTC_OR.SUGGESTEDVERIFIERDROPDOWN,"Suggested Verifier Drop Down");
				 
				 //Save Action Radio Button Status
				 isDisabled(EDTC_OR.UNDEREDITRADIOTBN, "Under Edit Radio Button");
				 isDisabled(EDTC_OR.UNDERVERIFICATIONRADIOTBN, "Under Verification Radio Button");
				 isDisabled(EDTC_OR.RETURNTOPREPARATIONRADIOBTN, "Return to Preparation Radio Button");
				 isDisabled(EDTC_OR.APPROVEDASFINALRADIOBTN, "Approved as Final Radio Button");
				 isDisabled(EDTC_OR.RETAINRECORDRADIOBTN, "Void (retain record) Button");
				 
				 //Delete Button
				 isEnabled(EDTC_OR.DELETEBTN_PARENT, "Delete Button");
				 //Check the Status of Revert to Verification Button 
				 isDisabled(EDTC_OR.REVERTTOVERIFICATIONBTN, "Revert to Verification Button");
				
			 }else if(strSaveActionStatus.equalsIgnoreCase("Under edit") && userType.equalsIgnoreCase("Verifier")){
				 
				 //Ready For Verification Check box
				 isEnabled(EDTC_OR.READYFORVERIFICATIONCHECKBOX,"Ready For Verification Check box");
				 //Suggested Verifier
				 isEnabled(EDTC_OR.SUGGESTEDVERIFIERDROPDOWN,"Suggested Verifier Drop Down");
				 //Save Action Radio Button Status
				 isDisabled(EDTC_OR.UNDEREDITRADIOTBN, "Under Edit Radio Button");
				 isDisabled(EDTC_OR.UNDERVERIFICATIONRADIOTBN, "Under Verification Radio Button");
				 isDisabled(EDTC_OR.RETURNTOPREPARATIONRADIOBTN, "Return to Preparation Radio Button");
				 isDisabled(EDTC_OR.APPROVEDASFINALRADIOBTN, "Approved as Final Radio Button");
				 isDisabled(EDTC_OR.RETAINRECORDRADIOBTN, "Void (retain record) Button");
				 //Delete Button
				 isDisabled(EDTC_OR.DELETEBTN_PARENT, "Delete Button");
				 //Check the Status of Revert to Verification Button 
				 isDisabled(EDTC_OR.REVERTTOVERIFICATIONBTN, "Revert to Verification Button");
			 }else if(strSaveActionStatus.equalsIgnoreCase("Void (retain record)") && userType.equalsIgnoreCase("Editor")){
				 
				 //Ready For Verification Check box
				 isDisabled(EDTC_OR.READYFORVERIFICATIONCHECKBOX,"Ready For Verification Check box");
				 //Suggested Verifier
				 isDisabled(EDTC_OR.SUGGESTEDVERIFIERDROPDOWN,"Suggested Verifier Drop Down");
				 //Save Action Radio Button Status
				 isDisabled(EDTC_OR.UNDEREDITRADIOTBN, "Under Edit Radio Button");
				 isEnabled(EDTC_OR.UNDERVERIFICATIONRADIOTBN, "Under Verification Radio Button");
				 isEnabled(EDTC_OR.RETURNTOPREPARATIONRADIOBTN, "Return to Preparation Radio Button");
				 isEnabled(EDTC_OR.APPROVEDASFINALRADIOBTN, "Approved as Final Radio Button");
				 isEnabled(EDTC_OR.RETAINRECORDRADIOBTN, "Void (retain record) Button");
				 //Delete Button
				 isDisabled(EDTC_OR.DELETEBTN_PARENT, "Delete Button");
				 //Check the Status of Revert to Verification Button 
				 isDisabled(EDTC_OR.REVERTTOVERIFICATIONBTN, "Revert to Verification Button");
			 }else if(strSaveActionStatus.equalsIgnoreCase("Void (retain record)") && !userType.equalsIgnoreCase("Editor")){
				 
				 //Ready For Verification Check box
				 isDisabled(EDTC_OR.READYFORVERIFICATIONCHECKBOX,"Ready For Verification Check box");
				 //Suggested Verifier
				 isDisabled(EDTC_OR.SUGGESTEDVERIFIERDROPDOWN,"Suggested Verifier Drop Down");
				 //Save Action Radio Button Status
				 isDisabled(EDTC_OR.UNDEREDITRADIOTBN, "Under Edit Radio Button");
				 isEnabled(EDTC_OR.UNDERVERIFICATIONRADIOTBN, "Under Verification Radio Button");
				 isEnabled(EDTC_OR.RETURNTOPREPARATIONRADIOBTN, "Return to Preparation Radio Button");
				 isEnabled(EDTC_OR.APPROVEDASFINALRADIOBTN, "Approved as Final Radio Button");
				 isEnabled(EDTC_OR.RETAINRECORDRADIOBTN, "Void (retain record) Button");
				 //Delete Button
				 isDisabled(EDTC_OR.DELETEBTN_PARENT, "Delete Button");
				 //Check the Status of Revert to Verification Button 
				 isEnabled(EDTC_OR.REVERTTOVERIFICATIONBTN, "Revert to Verification Button");
			 }
			 
			 if(isElementPresent(EDTC_OR.DISCARDBTN, "Discard Button")){
				failureReport("Validate whether Discard Button is not present", "Discard Button is present");
			 }else{
				 SuccessReport("Validate whether Discard Button is not present", "Discard Button is not present");
			 }
			 
			 //Save Action Radio Button
			 isChecked_Report(By.xpath(EDTC_OR.RADIOBTN+strSaveActionStatus+"']/input"),strSaveActionStatus+" Check box");
			
			
			 if(strReadyForVerification.equalsIgnoreCase("Y")){
				 if(isChecked(EDTC_OR.READYFORVERIFICATIONCHECKBOX,"Ready For Verification Check box")){
					 SuccessReport("Validate whether the Ready For Verification Check box is checked", "Ready For Verification Check box is checked");
				 }else{
					 failureReport("Validate whether the Ready For Verification Check box is checked", "Ready For Verification Check box is not checked");
				 }
			 }
			 
			
//			 if(!strSuggestedVerifier.isEmpty()){
//				 Select select=new Select(driver.findElement(EDTC_OR.SUGGESTEDVERIFIERDROPDOWN));
//				 strValue= select.getFirstSelectedOption().getText();
//				 if(strValue.equalsIgnoreCase(strSuggestedVerifier)){
//					 SuccessReport("Validate the Suggested Verifier \""+strValue+"\"","\""+strValue+"\" is selected in the Suggested Verifier Drop Down");
//				 }else{
//					 failureReport("Validate the Suggested Verifier \""+strValue+"\"","Value is Present in not selected in the Suggested Verifier Drop Down");
//				 }
//			 }
			 
			 
//			 //Suggested Preparer
//			 if(!strSuggestedPreparer.isEmpty()){
//				 Select select=new Select(driver.findElement(EDTC_OR.SUGGESTEDPREPARERDROPDOWN));
//				 strValue= select.getFirstSelectedOption().getText();
//				 if(strValue.equalsIgnoreCase(strSuggestedPreparer)){
//					 SuccessReport("Validate the Suggested Preparer  \""+strValue+"\"","\""+strValue+"\" is selected in the Suggested Preparer Drop Down");
//				 }else{
//					 failureReport("Validate the Suggested Preparer \""+strValue+"\"","Value is not selected in the Suggested Preparer Drop Down");
//				 }
//			 }
		
			//Validate the Notes to Suggested Preparer
			 if(!strNotesToPreparer.isEmpty()){
				 strValue=getAttribute(EDTC_OR.NOTESTOPREPARERTEXTAREA,"value","Notes to Preparer Text Area");
				 if(strValue.equalsIgnoreCase(strNotesToPreparer)){
					 SuccessReport("Validate the text in the Notes to Preparer Text Area \""+strValue+"\"", "\""+strValue+"\" is Present in Notes to Preparer Text Area");
				 }else{
					 failureReport("Validate the text in the Notes to Preparer Text Area \""+strValue+"\"", "Text is not Present in the Notes to Preparer Text Area");
				 }
			 }
			 blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
		}
	   
   /********************************************************************************************************
	  * Method 	Name		:	validateDropDown_TextField_Values()
	  * Author				:	
	  * Description			:	This method validates the Supp Pay table
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification	:
	  ********************************************************************************************************/		
		public void validateDropDown_TextField_Values(By dropDownLocator,String dropDownValues,By textFieldLocator, String textFieldValues, String validationType,String dropDownLocName,String textFieldName) throws Throwable{
			try{
				 blnEventReport=true;
				 String strDropDownValue="";
				 String strTextFieldValue="";
				 String[] arrayDropDownValue=dropDownValues.split(",");
				 String[] arrayTextFieldValue=textFieldValues.split(",");
				 List<String> dropDownValueList=new ArrayList<String>();
				 List<String> textFieldValueList=new ArrayList<String>();
				
				 //Add all the Values to the list
				 List<WebElement> dropDownElements=driver.findElements(dropDownLocator);
				 for(int i=0;i<dropDownElements.size();i++){
					 Select select=new Select(dropDownElements.get(i));
					 strDropDownValue=select.getFirstSelectedOption().getText().trim();
					 strTextFieldValue=dropDownElements.get(i).getAttribute("value").trim();
					 if(!strDropDownValue.isEmpty() && !strTextFieldValue.isEmpty()){
						 dropDownValueList.add(strDropDownValue);
						 textFieldValueList.add(strTextFieldValue);
					 }
				 }
				 
				 for(int i=0;i<arrayDropDownValue.length;i++){
						boolean flag = false;
						for(int iLoop=0;iLoop<dropDownValueList.size();iLoop++)
						{
							if(arrayDropDownValue[i].equalsIgnoreCase(dropDownValueList.get(iLoop)) && arrayTextFieldValue[i].equalsIgnoreCase(textFieldValueList.get(iLoop)))
							{
								flag = true;
								break;
							}
						}if(!flag)
						 break;
					
				 }
				 if(flag){
						SuccessReport("Validate whether the following values are selected in "+dropDownLocName+"\" "+dropDownValues+"\"", "\""+dropDownValues+"\" values are selected in "+dropDownLocName+" Drop Down");
						SuccessReport("Validate whether the following values are present in "+textFieldName+"\" "+textFieldValues+"\"", "\""+textFieldValues+"\" values are present in "+textFieldName+" Text Field");
					}else{
						failureReport("Validate whether the following items are selected in "+dropDownLocName+"\" "+dropDownValues+"\"", "\""+dropDownValues+"\" items are not selected in "+dropDownLocName+" Drop Down");
						failureReport("Validate whether the following values are present in "+textFieldName+"\" "+textFieldValues+"\"", "\""+textFieldValues+"\" values are not present in "+textFieldName+" Text Field");
					}
				 
//				 if(validationType.equalsIgnoreCase("DB")){
//					 if(strDropDownValue.equalsIgnoreCase(SQL_Queries.getPayGroup()) && strTextFieldValue.equalsIgnoreCase(SQL_Queries.getPayGroup())){
//	  					 SuccessReport("Validate the "+dropDownLocName+" Drop down and "+textFieldName+" Text Field Values", "");
//	  				 }else{
//	  					 failureReport("Validate the "+dropDownLocName+" Drop down and "+textFieldName+" Text Field Values", "");
//	  				 }
//				 }
				
			} catch (Exception e) {
				throw e;
			}
		}
		
	/********************************************************************************************************
	  * Method 	Name		:	validateDropDownStatus()
	  * Author				:	
	  * Description			:	This method validates the Supp Pay table
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification	:
	  ********************************************************************************************************/		
		public void validateDropDownStatus(By dropDownLocator,String dropDownName) throws Throwable{
			try{
				 blnEventReport=true;
				 boolean bFlag=false;
				 List<WebElement> dropDownElements=driver.findElements(dropDownLocator);
				 for(WebElement ele:dropDownElements){
					 if(!ele.isEnabled()){
						 bFlag=true;
						 break;
					 }
				 }
				 if(bFlag){
					failureReport("Validate whether all the "+dropDownName+" drop down elements are enabled", "All the "+dropDownName+" drop down elements are not enabled"); 
				 }else{
					 SuccessReport("Validate whether all the "+dropDownName+" drop down elements are enabled", "All the "+dropDownName+" drop down elements are enabled");
				 }
				 blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
		}
	/********************************************************************************************************
	  * Method 	Name		:	validateTextFieldStatus()
	  * Author				:	
	  * Description			:	This method validates the Supp Pay table
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification	:
	  ********************************************************************************************************/		
		public void validateTextFieldStatus(By textFieldLocator,String textFieldName) throws Throwable{
			try{
				 blnEventReport=true;
				 boolean bFlag=false;
				 List<WebElement> textFieldElements=driver.findElements(textFieldLocator);
				 for(WebElement ele:textFieldElements){
					 if(!ele.isEnabled()){
						 bFlag=true;
						 break;
					 }
				 }
				 if(bFlag){
					failureReport("Validate whether all the "+textFieldName+" text field elements are enabled", "All the "+textFieldName+" text field elements are not enabled"); 
				 }else{
					 SuccessReport("Validate whether all the "+textFieldName+" text field elements are enabled", "All the "+textFieldName+" text field elements are enabled");
				 }
				 blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
		}
		
	/********************************************************************************************************
	  * Method 	Name		:	enterDetails_WorkSheet()
	  * Author				:	
	  * Description			:	This method validates the Supp Pay table
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification	:
	  ********************************************************************************************************/		
		public void enterDetails_WorkSheet(String SheetName,int iLoop) throws Throwable{
			try{
				 blnEventReport=true;
				 String strHourlyRate=Excelobject.getCellData(SheetName, "Hourly Rate", iLoop);
				 String strPayGroup=Excelobject.getCellData(SheetName, "Pay Group", iLoop);
				 String strAddlPTOTaken=Excelobject.getCellData(SheetName, "Additional PTO Taken", iLoop); 
				 String strPaidThruDate=Excelobject.getCellData(SheetName, "Paid Thru Date", iLoop);
				 String strNotes=Excelobject.getCellData(SheetName, "Notes", iLoop);
				 String strHoursToBeProcessed=Excelobject.getCellData(SheetName, "Hours To Be Processed", iLoop);
				 String strHours=Excelobject.getCellData(SheetName, "Hours", iLoop);
				 String strDeductions_Dollars=Excelobject.getCellData(SheetName, "Deductions with Dollars", iLoop);
				 String strDollars=Excelobject.getCellData(SheetName, "Dollars for Deductions", iLoop);
				 String strVariablePay=Excelobject.getCellData(SheetName, "Variable Pay", iLoop);
				 String strDollars_VariablePay=Excelobject.getCellData(SheetName, "Dollars Variable Pay", iLoop);
				 String strDeductions_Percentage=Excelobject.getCellData(SheetName, "Deductions with Percentage", iLoop);
				 String strPercentages=Excelobject.getCellData(SheetName, "Percentages", iLoop);
				 String strEarnings=Excelobject.getCellData(SheetName, "Earnings", iLoop);
				 String strEarning_Hours=Excelobject.getCellData(SheetName, "Earning Hours", iLoop);
				 String strReconciliation=Excelobject.getCellData(SheetName, "Reconciliation", iLoop);
				 String strReconciliation_Hours=Excelobject.getCellData(SheetName, "Reconciliation Hours", iLoop);
				 String strReadyForVerification=Excelobject.getCellData(SheetName, "Ready For Verification", iLoop);
				 String strSuggestedVerifier=Excelobject.getCellData(SheetName, "Suggested Verifier", iLoop); 
				 String strSaveAction=Excelobject.getCellData(SheetName, "Save Action", iLoop);
				 String strSuggestedPreparer=Excelobject.getCellData(SheetName, "Suggested Preparer", iLoop);
				 String strNotesToPreparer=Excelobject.getCellData(SheetName, "Notes to preparer", iLoop);
				 String strPayCycle=Excelobject.getCellData(SheetName, "Pay Cycle", iLoop);
				 String strCurrentStatus=Excelobject.getCellData(SheetName, "Verifier Options Current Status", iLoop);
				 
				 
				 if(isElementPresent(EDTC_OR.CREATEWORKSHEETBTN,"Create Work sheet Button" )){
					  click(EDTC_OR.CREATEWORKSHEETBTN,"Create Work sheet Button" );
					  pageLoadingCompleted(EDTC_OR.PAGELAODER);
					  Thread.sleep(lSleep_Low);
					  //This method validates the Page header
					  validatePageHeader(EDTC_OR.PAGEHEADER, "TPS sheet for "+empName+" - "+empID);
				  }
				 
				 //Enter the Mandatory Field
				 if(!strHourlyRate.isEmpty()){
					 type(EDTC_OR.HOURLYRATETEXTFIELD,strHourlyRate,"Hourly Rate Text Field"); 
				 } 
				 if(!strPayGroup.isEmpty()){
					 type(EDTC_OR.PAYGROUPTEXTFIELD,strPayGroup,"Pay Group Text Field");
				 }
				 if(!strPaidThruDate.isEmpty()){
					 type(EDTC_OR.PAIDTHRUDATETEXTFIELD,strPaidThruDate,"Paid Thru Date Text Field");
				 }
				 if(!strPaidThruDate.isEmpty()){
					 type(EDTC_OR.PAIDTHRUDATETEXTFIELD,strPaidThruDate,"Paid Thru Date Text Field");
				 }
				
				 if(!strPayCycle.isEmpty()){
					 click(By.xpath(EDTC_OR.PAYCYCLERADIOBTN+strPayCycle+"']//input"),strPayCycle+" Radio Button");
				 }
				
				 if(!strAddlPTOTaken.isEmpty()){
					 type(EDTC_OR.ADDLPTOTAKENVALUE,strAddlPTOTaken,"Additional PTO Taken Text Field");
					 Double addlPTOvalue=Double.parseDouble(strAddlPTOTaken);
					 
					 String strPTORecordedValue=getText(EDTC_OR.PTORECORDEDVALUE,"PTO Recorded Value");
					 String strAccruedPTOValue=getText(EDTC_OR.ACCRUEDPTOVALUE,"Accrued PTO Value");
					
					 //Check the Calculate button functionality
					 Double PTOvalue=Double.parseDouble(strPTORecordedValue);
					 Double accruedPTOValue=Double.parseDouble(strAccruedPTOValue);
					 click(EDTC_OR.CALCULATEBTN, "Calculate Button");
					 String strPTOHoursDue=getAttribute(EDTC_OR.PTOHOURSDUETEXTFIELD, "value", "PTO Hours Due text field");
					 Double ptoHoursValue=Double.parseDouble(strPTOHoursDue);
					 Double value=accruedPTOValue-PTOvalue-addlPTOvalue;
					 Double truncatedDouble=new BigDecimal(value ).setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue();
					 int val=Double.compare(truncatedDouble, ptoHoursValue);
					 
					 if(val==0){
						 SuccessReport("Valiate the Functionlity of Calculate Button",strPTOHoursDue+ " Calculate Button is working correctly");
					 }else{
						 failureReport("Valiate the Functionlity of Calculate Button", "Calculate Button is not working correctly");
					 }
				 }
				
				 //Check for Error Message without entering the Mandatory Details
				 if(isElementPresent(EDTC_OR.ERRORMSG, "Error Message")){
					SuccessReport("Warning message should not be displayed when all the mandatory fields are filled ", "Warning message is not displayed");
				 }else{
					failureReport("Warning message should not be displayed when all the mandatory fields are filled ", "Warning message is displayed");
				 }
				 
				 //Validate whether the Save Buttons are Enabled 
				  List<WebElement> saveButtons=driver.findElements(EDTC_OR.SAVEBTN);
				  for(int i=0;i<saveButtons.size();i++){
					  if(saveButtons.get(i).isEnabled()){
						  SuccessReport("Validate whether the Save buttons are enabled once all the mandatory fields are filled", "Save buttons are enabled");
					  }else{
						  failureReport("Validate whether the Save buttons are enabled once all the mandatory fields are filled", "Save buttons are not enabled");
					  }
				  }
				 
				 //Enter the Notes
				 if(!strNotes.isEmpty()){
					 type(EDTC_OR.NOTESTEXTAREA,strNotes,"Notes Text Area");
				 }
				 
				 if(!strHoursToBeProcessed.isEmpty()){
					//Select the values from Hours to be selected Drop Down and Enter the details in Hours Text Fields
					 enterDetails(EDTC_OR.HOURSTOBEPROCESSEDDROPDOWNS,strHoursToBeProcessed,"Hours To Be Processed",EDTC_OR.HOURSTEXTFIELDS,strHours,"Hours");
				 }
				 if(!strDeductions_Dollars.isEmpty()){
					 //Select the values from Deductions Drop Down and Enter the details in Dollars Text Fields
					 enterDetails(EDTC_OR.DEDUCTIONSDOLLARSDROPDOWNS,strDeductions_Dollars,"Deductions",EDTC_OR.DEDUCTIONSDOLLARSTEXTFIELDS,strDollars,"Dollars");
				 }
				 if(!strVariablePay.isEmpty()){
					//Select the values from Variable Pay Drop Down and Enter the details in Dollars Text Fields
					 enterDetails(EDTC_OR.VARIABLEPAYDROPDOWNS,strVariablePay,"Variable Pay",EDTC_OR.VARIABLEPAYTEXTFIELDS,strDollars_VariablePay,"Dollars");				 
				 }
				 if(!strDeductions_Percentage.isEmpty()){
					 //Select the values from Deductions Drop Down and Enter the details in Percentages Text Fields
					 enterDetails(EDTC_OR.DEDUCTIONSPERCENTAGEDROPDOWNS,strDeductions_Percentage,"Deductions",EDTC_OR.DEDUCTIONSPERCENTAGETEXTFIELDS,strPercentages,"Percentage");
				 }
				 if(!strEarnings.isEmpty()){
					//Select the values from Reclassify Earnings Drop Down and Enter the details in Hours Text Fields
					 enterDetails(EDTC_OR.RECLASSIFYEARNINGSDROPDOWNS,strEarnings,"Reclassify Earnings",EDTC_OR.RECLASSIFYEARNINGSHOURSTEXTFIELDS,strEarning_Hours,"Hours");
				 }
				 if(!strReconciliation.isEmpty()){
					 //Select the values from PTO Reconciliations Drop Down and Enter the details in Hours Text Fields
					 enterDetails(EDTC_OR.PTORECONCILIATIONDROPDOWNS,strReconciliation,"PTO Reconciliations",EDTC_OR.PTORECONCILIATIONHOURSTEXTFIELDS,strReconciliation_Hours,"Hours");
				 }
				 blnEventReport=true;
				 
				 Thread.sleep(lSleep_Low);
				 moveToElement(EDTC_OR.READYFORVERIFICATIONCHECKBOX, "Ready for verification Check box");
				//Ready For Verification Check box
				 if(strReadyForVerification.equalsIgnoreCase("Y")){
					 if(!isChecked(EDTC_OR.READYFORVERIFICATIONCHECKBOX, "Ready for verification Check box")){
						 JSClick(EDTC_OR.READYFORVERIFICATIONCHECKBOX,"Ready For Verification Check box");
					 }
				 }else if(strReadyForVerification.equalsIgnoreCase("N")){
					 if(isChecked(EDTC_OR.READYFORVERIFICATIONCHECKBOX, "Ready for verification Check box")){
						 JSClick(EDTC_OR.READYFORVERIFICATIONCHECKBOX,"Ready For Verification Check box");
					 }  
				 }
				
				 
				 //This method selects the Verifier Option Radio Button
				 selectVerifierEditOptions(strCurrentStatus,strSaveAction);
				 
				 
				//Suggested Verifier
				 if(!strSuggestedVerifier.isEmpty()){
					 selectByVisibleText(EDTC_OR.SUGGESTEDVERIFIERDROPDOWN, strSuggestedVerifier, "Suggested Verifier Drop Down");
				 }
				//Suggested Preparer
				 if(!strSuggestedPreparer.isEmpty()){
					 selectByVisibleText(EDTC_OR.SUGGESTEDPREPARERDROPDOWN, strSuggestedPreparer, "Suggested Preparer Drop Down");
				 }
				 
				 if(!strNotesToPreparer.isEmpty()){
					//Notes to Prepared Text Area
					 type(EDTC_OR.NOTESTOPREPARERTEXTAREA,strNotesToPreparer,"Notes to preparer Text Area");
					 
				 }
				 
				 blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
		}
	/********************************************************************************************************
	  * Method 	Name		:	selectVerifierEditOptions()
	  * Author				:	
	  * Description			:	This method validates the Supp Pay table
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification	:
	  ********************************************************************************************************/
	  public void selectVerifierEditOptions(String strCurrentStatus,String strSaveAction) throws Throwable{
		  try{
			  blnEventReport=true;
			  
			  //Save Action Radio Button
			  if(!strSaveAction.isEmpty()){
				  click(By.xpath(EDTC_OR.RADIOBTN+strSaveAction+"']/input"),strSaveAction+" Radio Button");
				  if(strSaveAction.equalsIgnoreCase("Approved as final")){
					  if(isElementPresent(EDTC_OR.VOIDBTN, "Void Button") && !isElementPresent(EDTC_OR.DELETEBTN, "Delete Button")){
						  SuccessReport("Validate whether the Void Button is visible and Delete button is not visible after user clicks on Aprroved as final radio button", "Void Button is visible and Delete button is not visible after user clicks on Aprroved as final radio button");		 
					  }else{
						 failureReport("Validate whether the Void Button is visible and Delete button is not visible after user clicks on Aprroved as final radio button", "Void Button is not visible and Delete button is still visible after user clicks on Aprroved as final radio button");
					  }
					  isDisabled(EDTC_OR.VOIDBTN_PARENT, "Void Button");
					  
					  if(isChecked(EDTC_OR.READYFORVERIFICATIONCHECKBOX, "Ready for Verification")){
						  failureReport("Validate whether tReady for Verification checkbox is Unchecked", "Ready for Verification checkbox is Checked");
					  }else{
						  SuccessReport("Validate whether tReady for Verification checkbox is Unchecked", "Ready for Verification checkbox is Unchecked"); 
					  }
				  }else if(strSaveAction.equalsIgnoreCase("Void (retain record)")){
					  if(strCurrentStatus.equalsIgnoreCase("Approved as final")){
						  if(!isElementPresent(EDTC_OR.VOIDBTN, "Void Button") && isElementPresent(EDTC_OR.DELETEBTN, "Delete Button")){
							  failureReport("Validate whether the Delete Button is not visible and Void button is visible after user clicks on Void (retain record) radio button", "Delete Button is visible and Void button is not visible after user clicks on Aprroved as final radio button");		 
						  }else{
							  SuccessReport("Validate whether the Delete Button is not visible and Void button is visible after user clicks on Void (retain record) radio button", "Delete Button is not visible and Void button is still visible after user clicks on Aprroved as final radio button");
						  } 
					  }
				  }else if(strSaveAction.equalsIgnoreCase("Return to preparation")){
					  if(isEnabled(EDTC_OR.SUGGESTEDPREPARERDROPDOWN, "Suggested Preparer Drop Down") && isEnabled(EDTC_OR.NOTESTOPREPARERTEXTAREA, "Notes to Preparer Text Area")){
						  SuccessReport("Validate whether the Suggested Preparer Drop Down and  Notes to Preparer Text Area are enabled after user selects Return to preparation Radio Button", "Suggested Preparer Drop Down and  Notes to Preparer Text Area are enabled after user selects Return to preparation Radio Button");		 
					  }else{
						  failureReport("Validate whether the Suggested Preparer Drop Down and  Notes to Preparer Text Area are enabled after user selects Return to preparation Radio Button", "Suggested Preparer Drop Down and  Notes to Preparer Text Area are not enabled after user selects Return to preparation Radio Button");
					  }
				  }else if(strCurrentStatus.equalsIgnoreCase("Return to preparation")){
					  if(isDisabled(EDTC_OR.SUGGESTEDPREPARERDROPDOWN, "Suggested Preparer Drop Down") && isDisabled(EDTC_OR.NOTESTOPREPARERTEXTAREA, "Notes to Preparer Text Area")){
						  SuccessReport("Validate whether the Suggested Preparer Drop Down and  Notes to Preparer Text Area are disabled after user deselects Return to preparation Radio Button", "Suggested Preparer Drop Down and  Notes to Preparer Text Area are disabled after user deselects Return to preparation Radio Button");		 
					  }else{
						  failureReport("Validate whether the Suggested Preparer Drop Down and  Notes to Preparer Text Area are disabled after user deselects Return to preparation Radio Button", "Suggested Preparer Drop Down and  Notes to Preparer Text Area are not disabled after user deselects Return to preparation Radio Button");
					  }
				  }
			  }
		  } catch (Exception e) {
				throw e;
			}
	  }
		
		
		
	/********************************************************************************************************
	  * Method 	Name		:	enterDetails()
	  * Author				:	
	  * Description			:	This method validates the Supp Pay table
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification	:
	  ********************************************************************************************************/			 
	public void enterDetails(By dropDownLoc,String dropDownValues,String dropDownLocName,By textFieldLoc,String textFieldValues,String textFieldLocName) throws Throwable {
		try {
			blnEventReport = true;
			String[] arrayDropDownValues=dropDownValues.split(";");
			String[] arrayTextFieldValues=textFieldValues.split(";");
			
			List<WebElement> dorpDownelements=driver.findElements(dropDownLoc);
			List<WebElement> textFieldelements=driver.findElements(textFieldLoc);
			for(int i=0;i<arrayDropDownValues.length;i++){
				textFieldelements.get(i).clear();
				Select s=new Select(dorpDownelements.get(i));
				s.selectByVisibleText(arrayDropDownValues[i]);
				textFieldelements.get(i).sendKeys(arrayTextFieldValues[i]);
				SuccessReport("Select value from "+dropDownLocName,"\""+arrayDropDownValues[i]+"\"is Selected from the DropDown\""+dropDownLocName+"\"");
				SuccessReport("Type Data in "+textFieldLocName,"Data typing action is performed on \""+textFieldLocName+"\" with data \""+arrayTextFieldValues[i]+"\"");
			}
			
		
		} catch (Exception e) {
			throw e;
		}
	}
	
	/********************************************************************************************************
	  * Method 	Name		:	validateDropDownValues()
	  * Author				:	
	  * Description			:	This method validates the Supp Pay table
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification	:
	  ********************************************************************************************************/			 
	public void validateDropDownValues(By dropDownLoc,String dropDownValues,String dropDownLocName) throws Throwable {
		try {
			blnEventReport = true;
			List<WebElement> dropDownelements=driver.findElements(dropDownLoc); //All the Drop Down Elements
			SuccessReport("Validate the number of Drop Down elements in \""+dropDownLocName+"\"", dropDownelements.size()+" Drop down elements are displayed ");
			String[] arrayValues=dropDownValues.split(",");
			for(int i=0;i<dropDownelements.size();i++){
				Select s=new Select(dropDownelements.get(i));
				List<WebElement> items=s.getOptions();
				for(WebElement a:items){
					boolean flag = false;
					for(int iLoop=0;iLoop<arrayValues.length;iLoop++)
					{
						if(a.getText().trim().equalsIgnoreCase(arrayValues[iLoop]))
						{
							flag = true;
							break;
						}
					}if(!flag)
					 break;
				}
				if(flag){
					SuccessReport("Validate whether the following items are available in\""+dropDownLocName+"\" "+dropDownValues+"\"", "\""+dropDownValues+"\" items are available in "+dropDownLocName);
				}else{
					failureReport("Validate whether the following items are available in\""+dropDownLocName+"\" "+dropDownValues+"\"", "Items are not available in "+dropDownLocName);
				}
			}
			blnEventReport = true;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
	  * Method 	Name		:	validateWorkSheetDefaultValues()
	  * Author				:	
	  * Description			:	This method validates the Supp Pay table
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification	:
	  ********************************************************************************************************/			 
		public void validateWorkSheetDefaultValues(String strHrsProcessedDDValues,String strDeductionsDDValues,
				  String strVariablePayDDValues,String strDeductionPercentageDDValues,String strEarningsDDValues,
				  String strReconciliationsDDValues) throws Throwable{
			try{
				
				  blnEventReport = true;
				  //Validate the Hours to be processed,Deductions,Variable Pay,Deductions,Earning, Reconciliations Drop Down Values
				  validateDropDownValues(EDTC_OR.HOURSTOBEPROCESSEDDROPDOWNS,strHrsProcessedDDValues,"Hours to be processed");
				  validateDropDownValues(EDTC_OR.DEDUCTIONSDOLLARSDROPDOWNS,strDeductionsDDValues,"Deductions Dollars");
				  validateDropDownValues(EDTC_OR.VARIABLEPAYDROPDOWNS,strVariablePayDDValues,"Variable Pay");
				  validateDropDownValues(EDTC_OR.DEDUCTIONSPERCENTAGEDROPDOWNS,strDeductionsDDValues, "Deductions Percentage");
				  validateDropDownValues(EDTC_OR.RECLASSIFYEARNINGSDROPDOWNS,strEarningsDDValues, "Reclassify Earnings");
				  validateDropDownValues(EDTC_OR.PTORECONCILIATIONDROPDOWNS,strReconciliationsDDValues, "PTO Reconciliations");
				  
//				  validateStdHours(EDTC_OR.STDHOURSVALUE,"", "DB");
//				  validateCompanyID(EDTC_OR.COMPANYIDVALUE,"", "DB",empID);
//				  validateWorkState(EDTC_OR.WORKSTATEVALUE,"", "DB", empID);
//				  validateAccruedPTO(EDTC_OR.ACCRUEDPTOVALUE,"", "DB",empID);
//				  validateCurrentYearPTO(EDTC_OR.CURRYEARPTOVALUE,"", "DB", empID);
//				  validatePTORecorded(EDTC_OR.PTORECORDEDVALUE,"", "DB", empID);
//				  validateTermDate(EDTC_OR.TERMDATEVALUE,"", "DB", empID);
//				  validatePTOHrsDue(EDTC_OR.PTOHOURSDUEVALUE,"", "DB", empID);
//				  validateAdditionalPTO(EDTC_OR.ADDLPTOTAKENVALUE,"", "DB", empID);
//				  validateLastTimeCard(EDTC_OR.LASTTIMECARDVALUE,"", "DB", empID);
//				  validateHourlyRate(EDTC_OR.HOURLYRATETEXTFIELD,"", "DB", empID);
//				  validatePaidThruDate(EDTC_OR.PAIDTHRUDATETEXTFIELD,"", "DB", empID);
//				  validatePayGroup(EDTC_OR.PAYGROUPTEXTFIELD,"", "DB", empID);
				  
				  
				  
				blnEventReport = false;
			} catch (Exception e) {
				throw e;
			}
		}
	/********************************************************************************************************
	  * Method 	Name		:	validateCreatedDate()
	  * Author				:	
	  * Description			:	This method validates the Supp Pay table
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification	:
	  ********************************************************************************************************/		
		public void validateCreatedDate() throws Throwable{
			try{
				blnEventReport = true;
				String strText=getText(EDTC_OR.WSCREATEDDATELABEL, "Created Date").split(",")[1].trim();
				if(strText.equalsIgnoreCase(SQL_Queries.getCreatedDate())){
					SuccessReport("Validate the Created Date", "Created Date matches with the DB value");
				}else{
					failureReport("Validate the Created Date", "Created Date doesn't matches with the DB value");
				}

				blnEventReport = false;
			} catch (Exception e) {
				throw e;
			}
		}
	/********************************************************************************************************
	  * Method 	Name		:	saveWorkSheet()
	  * Author				:	
	  * Description			:	This method validates the Supp Pay table
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification	:
	  ********************************************************************************************************/		
		public void saveWorkSheet(String strAction,String strSaveActionStatus) throws Throwable{
			try{
				blnEventReport = true;
				//Validate whether the Save Buttons are Enabled 
				  click(EDTC_OR.BOTTOMSAVEBTNBTN, "Save Button");
				  if(strAction.equalsIgnoreCase("Add")){
					  assertText(EDTC_OR.SUCCESSMSG2, "New TPS Record successfully created");
				  }else if(strAction.equalsIgnoreCase("Update")){
					  assertText(EDTC_OR.TPSRECORDVOIDSUCCESSMSG, "TPS Record Successfully Updated"); 
				  }else if(strAction.equalsIgnoreCase("Void")){
					  assertText(EDTC_OR.TPSRECORDVOIDSUCCESSMSG, "Worksheet successfully Voided"); 
				  }
				  click(EDTC_OR.MODALDIALOGOKBTN, "OK Button");
				  Thread.sleep(lSleep_Low);
				  
				  if(strSaveActionStatus.equalsIgnoreCase("Approved as final") || strSaveActionStatus.equalsIgnoreCase("Void")){
					  isDisabled(EDTC_OR.BOTTOMSAVEBTNBTN, "Bottom Save Button");
					  isDisabled(EDTC_OR.TOPSAVEBTNBTN, "Top Save Button");     
				  }else{
					  if(userType.equalsIgnoreCase("All")){
						  isEnabled(EDTC_OR.BOTTOMSAVEBTNBTN, "Bottom Save Button");
						  isEnabled(EDTC_OR.TOPSAVEBTNBTN, "Top Save Button");  
					  }else if(userType.equalsIgnoreCase("Editor") && strSaveActionStatus.equalsIgnoreCase("Under Edit")){
						  isEnabled(EDTC_OR.BOTTOMSAVEBTNBTN, "Bottom Save Button");
						  isEnabled(EDTC_OR.TOPSAVEBTNBTN, "Top Save Button");  
					  }else if(userType.equalsIgnoreCase("Editor") && strSaveActionStatus.equalsIgnoreCase("Under verification")){
						  isDisabled(EDTC_OR.BOTTOMSAVEBTNBTN, "Bottom Save Button");
						  isDisabled(EDTC_OR.TOPSAVEBTNBTN, "Top Save Button");  
					  }else if(userType.equalsIgnoreCase("Verifier") && strSaveActionStatus.equalsIgnoreCase("Under Edit")){
						  isDisabled(EDTC_OR.BOTTOMSAVEBTNBTN, "Bottom Save Button");
						  isDisabled(EDTC_OR.TOPSAVEBTNBTN, "Top Save Button");    
					  }else if(userType.equalsIgnoreCase("Verifier") && strSaveActionStatus.equalsIgnoreCase("Under verification")){
						  isEnabled(EDTC_OR.BOTTOMSAVEBTNBTN, "Bottom Save Button");
						  isEnabled(EDTC_OR.TOPSAVEBTNBTN, "Top Save Button");   
					  }  
				  }
				blnEventReport = false;
			} catch (Exception e) {
				throw e;
			}
		}
	
	 /********************************************************************************************************
	  * Method 	Name		:	discardWorkSheet()
	  * Author				:	
	  * Description			:	This method validates the Supp Pay table
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification	:
	  ********************************************************************************************************/		
		public void discardWorkSheet() throws Throwable{
			try{
				blnEventReport = true;
				click(EDTC_OR.DISCARDBTN,"Discard Button");
				waitForElementPresent(EDTC_OR.MODALDIALOGTEXT, "Discard Modal Dialog");
				assertText(EDTC_OR.MODALDIALOGTEXT, "This command will discard all changes and the sheet will not be saved. Are you sure you want to do this?");
				click(EDTC_OR.MODALDIALOGOKBTN, "OK Button");
				
				//This page validates the TERMINATION PROCESSING SYSTEM Title
				validatePageHeader(EDTC_OR.PAGEHEADER, "TERMINATION PROCESSING SYSTEM (Signed in as "+loginEmpName+")");
				
				click(EDTC_OR.PENDINGEDITSBTN,"Pending Edits Button");
				waitForElementPresent(EDTC_OR.SEARCHTEXTFIELD, "Search table Text field");
				type(EDTC_OR.SEARCHTEXTFIELD,empID, "Search table Text field");
				Thread.sleep(lSleep_Low);
				if(isElementPresent(By.xpath(EDTC_OR.RECORDSTABLE+"//table//tbody//tr"), "Records")){
					failureReport("Validate whether the Worksheet is discarded", "Worksheet is not discarded");
				}else{
					SuccessReport("Validate whether the Worksheet is discarded", "No Record found, Worksheet is discarded");
				}
				
				blnEventReport = false;
			} catch (Exception e) {
				throw e;
			}
		}
	
	/********************************************************************************************************
	  * Method 	Name		:	researchButton()
	  * Author				:	
	  * Description			:	This method validates the Research Button functionality
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification	:
	  ********************************************************************************************************/		
		public void researchButton() throws Throwable{
			try{
				blnEventReport = true;
				JSClick(EDTC_OR.RESEARCHBTN,"Research Button");
				//This page validates the TERMINATION PROCESSING SYSTEM Title
				validatePageHeader(EDTC_OR.PAGEHEADER, "TPS research for "+empName+" ("+empID+")");
				
				//isElementDisplayed(EDTC_OR.DISPLAYWORKSHEETBTN, "Display WorkSheet Button");
				
				blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
		
	 /********************************************************************************************************
	  * Method 	Name		:	delete_WorkSheet()
	  * Author				:	
	  * Description			:	This method validates the Supp Pay table
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification	:
	  ********************************************************************************************************/		
	  public void delete_WorkSheet() throws Throwable{
		try {
			blnEventReport = true;
			click(EDTC_OR.DELETEBTN, "Delete Button");
			waitForElementPresent(EDTC_OR.MODALDIALOGTEXT, "Discard Modal Dialog");
			String strText=getText(EDTC_OR.MODALDIALOGTEXT, "Modal Dialog Text").trim().replaceAll("\n", " ");
			if(strText.contains("This command will >>delete<< this worksheet! A voided worksheet remains available for viewing and can only be returned to active status by a verifier. Are you sure you want to do this?")){
				SuccessReport("Validate the warning message after user clicks on Revert to verification Button", "\""+strText+"\" message is displayed");
			}else{
				failureReport("Validate the warning message after user clicks on Revert to verification Button","Message is displayed");
			}
			click(EDTC_OR.MODALDIALOGOKBTN, "OK Button");
			
			//This page validates the TERMINATION PROCESSING SYSTEM Title
			validatePageHeader(EDTC_OR.PAGEHEADER, "TERMINATION PROCESSING SYSTEM (Signed in as "+loginEmpName+")");
			
			click(EDTC_OR.PENDINGEDITSBTN,"Pending Edits Button");
			waitForElementPresent(EDTC_OR.SEARCHTEXTFIELD, "Search table Text field");
			type(EDTC_OR.SEARCHTEXTFIELD,empID, "Search table Text field");
			Thread.sleep(lSleep_Low);
			if(isElementPresent(By.xpath(EDTC_OR.RECORDSTABLE+"//table//tbody//tr"), "Records")){
				failureReport("Validate whether the record is available", "Record in found");
			}else{
				SuccessReport("Validate whether the record is available", "Worksheet deleted successfully, Record in not found");
			}
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
			
	  /********************************************************************************************************
	   * Method 	Name		:	validatePayType()
	   * Author				:	
	   * Description			:	This method validates the validates PayType
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	  	public void validatePayType(By Locator,String strValue,String strValidationType,String strEmpID) throws Throwable{
	  		try{
	  			blnEventReport=true;
	  			String strPayType="";
	  			if(strValidationType.equalsIgnoreCase("DB")){
	  				strPayType=getText(Locator, "Accrued PTO Value").trim();
	  				 if(strPayType.equalsIgnoreCase(SQL_Queries.getPayType())){
	  					 SuccessReport("Validate the PTO Type", "Value on the page do match with value from the DB Table");
	  				 }else{
	  					 failureReport("Validate the PTO Type", "Value on the page do not match with value from the DB Table");
	  				 }
	  			}else{
	  				if(strValue.equalsIgnoreCase(strPayType)){
	  					 SuccessReport("Validate the PTO Type", "Value on the page do match with value from the DB Table");
	  				 }else{
	  					 failureReport("Validate the PTO Type", "Value on the page do not match with value from the DB Table");
	  				 }
	  			}
		  			blnEventReport=false;
				} catch (Exception e) {
					throw e;
				}
		  	}	
	  	
	  	
  	 /********************************************************************************************************
	   * Method 	Name		:	validateStatus()
	   * Author				:	
	   * Description			:	This method validates the validates Status
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	  	public void validateStatus(By Locator,String strValue,String strValidationType,String strEmpID) throws Throwable{
	  		try{
	  			blnEventReport=true;
	  			String strStatus="";
	  			if(strValidationType.equalsIgnoreCase("DB")){
	  				strStatus=getText(Locator, "Accrued PTO Value").trim();
	  				 if(strStatus.equalsIgnoreCase(SQL_Queries.getStatus())){
	  					 SuccessReport("Validate the Status", "Value on the page do match with value from the DB Table");
	  				 }else{
	  					 failureReport("Validate the Status", "Value on the page do not match with value from the DB Table");
	  				 }
	  			}else{
	  				if(strValue.equalsIgnoreCase(strStatus)){
	  					 SuccessReport("Validate the Status", "Value on the page do match with value from the DB Table");
	  				 }else{
	  					 failureReport("Validate the Status", "Value on the page do not match with value from the DB Table");
	  				 }
		  		}
		  			blnEventReport=false;
				} catch (Exception e) {
					throw e;
				}
	  	}	
	  	
  	 /********************************************************************************************************
	   * Method 	Name	:	validateStateCode()
	   * Author				:	
	   * Description		:	This method validates the validates State Code
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	  	public void validateStateCode(By Locator,String strValue,String strValidationType,String strEmpID) throws Throwable{
	  		try{
	  			blnEventReport=true;
	  			String strStateCode="";
	  			if(strValidationType.equalsIgnoreCase("DB")){
	  				strStateCode=getText(Locator, "Accrued PTO Value").trim();
	  				 if(strStateCode.equalsIgnoreCase(SQL_Queries.getStateCode(strEmpID))){
	  					 SuccessReport("Validate the State Code", "Value on the page do match with value from the DB Table");
	  				 }else{
	  					 failureReport("Validate the State Code", "Value on the page do not match with value from the DB Table");
	  				 }
	  			}else{
	  				if(strValue.equalsIgnoreCase(strStateCode)){
	  					 SuccessReport("Validate the State Code", "Value on the page do match with value from the DB Table");
	  				 }else{
	  					 failureReport("Validate the State Code", "Value on the page do not match with value from the DB Table");
	  				 }
		  		}
		  			blnEventReport=false;
				} catch (Exception e) {
					throw e;
				}
	  	}	
	 	
  	 /********************************************************************************************************
	   * Method 	Name	:	validatePTOGrant()
	   * Author				:	
	   * Description		:	This method validates the validates State Code
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	  	public void validatePTOGrant(By Locator,String strValue,String strValidationType,String strEmpID) throws Throwable{
	  		try{
	  			blnEventReport=true;
	  			String strPTOGrant="";
	  			if(strValidationType.equalsIgnoreCase("DB")){
	  				strPTOGrant=getText(Locator, "Accrued PTO Value").trim();
	  				 if(strPTOGrant.equalsIgnoreCase(SQL_Queries.getPTOGrant())){
	  					 SuccessReport("Validate the PTO Grant", "Value on the page do match with value from the DB Table");
	  				 }else{
	  					 failureReport("Validate the PTO Grant", "Value on the page do not match with value from the DB Table");
	  				 }
	  			}else{
	  				if(strValue.equalsIgnoreCase(strPTOGrant)){
	  					SuccessReport("Validate the PTO Grant", "Value on the page do match with value from the DB Table");
	  				 }else{
	  					 failureReport("Validate the PTO Grant", "Value on the page do not match with value from the DB Table");
	  				 }
		  		}
		  			blnEventReport=false;
				} catch (Exception e) {
					throw e;
				}
	  	}	
	  	
		
	 /********************************************************************************************************
	   * Method 	Name	:	clickOnHomePageLink()
	   * Author				:	
	   * Description		:	This method validates the validates State Code
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	   public void clickOnHomePageLink(String strLinkName,String strPageTitle) throws Throwable{
		  try{
			  blnEventReport=true;
			  waitForElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT+strLinkName+"']"), strLinkName+" Link");
			  click(By.xpath(EDTC_OR.ELEMENTTEXT+strLinkName+"']"), strLinkName+" Link");
			  pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
			  //This method validates the Page title
			  validatePageHeader(EDTC_OR.PAGEHEADER, strPageTitle);
			  blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
	  }
	   
	 
   /********************************************************************************************************
    * Method 	Name	:	clickOnLeftPaneLinks()
    * Author				:	
    * Description		:	This method validates the validates State Code
    * Date of creation 	:	
    * modifying person 	: 	
    * Date of modification	:
	  ********************************************************************************************************/	 
	   public void clickOnLeftPaneLinks(String strLinkName,String strPageTitle) throws Throwable{
		  try{
			  blnEventReport=true;
			  waitForElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+strLinkName+"')]"), strLinkName+" Link");
			  click(By.xpath(EDTC_OR.ELEMENTTEXT1+strLinkName+"')]"), strLinkName+" Link");
			  //This method validates the Page title
			  validatePageHeader(EDTC_OR.PAGEHEADER, strPageTitle);
			  blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
	  }
	   
   
   /********************************************************************************************************
	   * Method 	Name	:	manageEmployee()
	   * Author				:	
	   * Description		:	This method validates the validates State Code
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	   public void manageEmployee(String strManageEmployee) throws Throwable{
		  try{
			  blnEventReport=true;
			  click(EDTC_OR.EMPLOYEEMANAGEMENTBTN,"Employee Management Button");
			  waitForVisibilityOfElement(EDTC_OR.EMPIDTEXTFIELD, "Employee ID Text Field");
			  type(EDTC_OR.EMPIDTEXTFIELD,empID,"Employee ID Text Field");
			  click(By.xpath(EDTC_OR.ELEMENTTEXT1+strManageEmployee+"')]"), strManageEmployee+" Link");
			  Thread.sleep(lSleep_Low);
			  pageLoadingCompleted(EDTC_OR.PAGELAODER);
			  blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
	  }
	   
	   /********************************************************************************************************
	   * Method 	Name	:	createYMP()
	   * Author				:	
	   * Description		:	This method validates the validates State Code
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	   public void createYMP(String strMemoPostYear,String strGrantAmount,String strNotesToEmp,String strExistingYMP) throws Throwable{
		  try{
			  blnEventReport=true;
			  //This method validates the Page Header
			  validatePageHeader(EDTC_OR.PAGEHEADER, "MODIFY EMPLOYEE - "+empID+" ("+empName+")");
			  //Click on the PTO - Paid Time Off Tab
			  click(EDTC_OR.PAIDTIMEOFFTAB,"PTO - Paid Time Off Tab");
			  waitForElementPresent(EDTC_OR.CREATEYMPBUTTON, "Create YMP Button");
			  click(EDTC_OR.CREATEYMPBUTTON, "Create YMP Button");
			  //This method validates the Modal Dialog Header
			  validateModalDialogHeader(EDTC_OR.MODALDIALOGHEADER,"Create Yearly Memo Post");
			  //Enter the Details
			  click(By.xpath(EDTC_OR.RADIOBTN+strMemoPostYear+"']/input"),strMemoPostYear+" Memo Post Year Radio Button");		 
			  type(EDTC_OR.GRANTAMTTEXTFIELD,strGrantAmount,"Grant Amount Text Field");
			  if(!strNotesToEmp.isEmpty()){
				  type(EDTC_OR.MEMOTEXTAREA,strNotesToEmp,"Memos Text Area");  
			  }
			  
			  click(EDTC_OR.CREATENEWYMPBTN, "Create New YMP Button");
			  if(strExistingYMP.equalsIgnoreCase("Y")){
				  waitForElementPresent(EDTC_OR.ACCESSTONEWRECORDNOTALLOWEDMSG, "Error Message");
				  assertText(EDTC_OR.ACCESSTONEWRECORDNOTALLOWEDMSG, "Found existing YMP. Cannot create YMP.");
				  click(EDTC_OR.MODALDIALOGOKBTN, "OK Button");
				  click(EDTC_OR.CANCELBTN, "Cancel Button");
			  }else{
				  
			  }
			  
			  
			  blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
	  }
   /********************************************************************************************************
    * Method 	Name	:	validateYMPPageFields()
    * Author				:	
    * Description		:	This method validates the validates State Code
    * Date of creation 	:	
    * modifying person 	: 	
    * Date of modification	:
    ********************************************************************************************************/	 
	   public void validateYMPPageFields(String strTableHeadings,String createYmpHelpText) throws Throwable{
		  try{
			  blnEventReport=true;
			  
			  //Click on the PTO - Paid Time Off Tab
			  click(EDTC_OR.PAIDTIMEOFFTAB,"PTO - Paid Time Off Tab");
			  waitForElementPresent(EDTC_OR.CREATEYMPBUTTON, "Create YMP Button");
			  click(EDTC_OR.CREATEYMPBUTTON, "Create YMP Button");
			  //This method validates the Modal Dialog Header
			  validateModalDialogHeader(EDTC_OR.MODALDIALOGHEADER,"Create Yearly Memo Post");
			  //This method validates the Table headings
			  verifyTableHeading(EDTC_OR.YMPTABLEHEADINGS,strTableHeadings);
			 
			  isElementDisplayed(EDTC_OR.CURRENTYEARMEMOPOSTRADIOBTN, "Yearly memo post for 2017 Radio Button");
			  isElementDisplayed(EDTC_OR.NEXTYEARMEMOPOSTRADIOBTN, "Yearly memo post for 2018 Radio Button");
			  isChecked_Report(EDTC_OR.CURRENTYEARMEMOPOSTRADIOBTN, "Yearly memo post for 2017 Radio Button");
			  isElementDisplayed(EDTC_OR.GRANTAMTTEXTFIELD, "Grant Amount Text Field");
			  isElementDisplayed(EDTC_OR.MEMOTEXTAREA, "Memo Text Area");
			  isElementDisplayed(EDTC_OR.CREATENEWYMPBTN, "Create New YMP Button");
			  isElementDisplayed(EDTC_OR.CANCELBTN, "Cancel Button");
			 
			  isEnabled(EDTC_OR.CREATEYMPBUTTON, "Create YMP Button");
			  isEnabled(EDTC_OR.CANCELBTN, "Cancel Button");
			  
			  click(EDTC_OR.CREATEYMPHELPLINK, "Create YMP Help Link");
			  assertText(EDTC_OR.MODALDIALOGTEXT, createYmpHelpText);
			  Thread.sleep(lSleep_Low);
			  click(EDTC_OR.MODALDIALOGCLOSEBTN,"Close Button");
			  
			  blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
	  }
	   
	   
   /********************************************************************************************************
    * Method 	Name	:	createYMPPageErrorMsg()
    * Author			:	
    * Description		:	This method validates the validates State Code
    * Date of creation 	:	
    * modifying person 	: 	
    * Date of modification	:
    ********************************************************************************************************/	
	public void createYMPPageErrorMsg() throws Throwable {
		try {
			blnEventReport = true;
			
			waitForElementPresent(EDTC_OR.CREATEYMPBUTTON, "Create YMP Button");
			click(EDTC_OR.CREATEYMPBUTTON, "Create YMP Button");
			
			 //Check for Error Message when the Grant Amount is blank 
			click(EDTC_OR.CREATENEWYMPBTN, "Create New YMP Button");
		    isElementDisplayed(EDTC_OR.GRANTAMTERRORMSG, "Grant Amount is required Error message is displayed");
		    
		    
		    //Check for Error Message when the Grant Amount is Negative		    
		    type(EDTC_OR.GRANTAMTTEXTFIELD,"1234", "Grant Amount Text Field");
		    isElementDisplayed(EDTC_OR.GRANTAMTVALIDERRORMSG, "Grant Amount must be valid. Error message is displayed");
		    
		    //Enter O value in Grant Amount Text Field
		    type(EDTC_OR.GRANTAMTTEXTFIELD,"0", "Grant Amount Text Field");
		    click(EDTC_OR.CREATENEWYMPBTN, "Create New YMP Button");
		    waitForElementPresent(EDTC_OR.ACCESSTONEWRECORDNOTALLOWEDMSG, "Error Message");
		    assertText(EDTC_OR.ACCESSTONEWRECORDNOTALLOWEDMSG, "Grant Amount cannot be 0.");
		    click(EDTC_OR.MODALDIALOGOKBTN, "OK Button");
		    
		    
		    //Check for Error Message when the Grant Amount is Negative		    
		    type(EDTC_OR.GRANTAMTTEXTFIELD,"-11", "Grant Amount Text Field");
		    isElementDisplayed(EDTC_OR.GRANTAMTVALIDERRORMSG, "Grant Amount must be valid. Error message is displayed");
		    
		    type(EDTC_OR.GRANTAMTTEXTFIELD,"b#!", "Grant Amount Text Field");
		    if(getAttribute(EDTC_OR.GRANTAMTTEXTFIELD,"value", "Grant Amount Text Field").trim().isEmpty()){
		    	SuccessReport("Validate whether user cannot enter the alpha and special charactes", "User cannot enter the alpha and special characters");
		    }else{
		    	failureReport("Validate whether user cannot enter the alpha and special charactes", "User can enter the alpha and special characters");
		    }
		    
		    
		    type(EDTC_OR.GRANTAMTTEXTFIELD,"1.1.", "Grant Amount Text Field");
		    if(getAttribute(EDTC_OR.GRANTAMTTEXTFIELD,"value", "Grant Amount Text Field").trim().isEmpty()){
		    	SuccessReport("Validate whether user cannot enter more than 1 decimal points in grant amount field", "User cannot enter more than 1 decimal points in grant amount fiel");
		    }else{
		    	failureReport("Validate whether user cannot enter more than 1 decimal points in grant amount field", "User can enter more than 1 decimal points in grant amount fiel");
		    }
		    
		    click(EDTC_OR.CANCELBTN, "Cancel Button");
		    
		    
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	   
   /********************************************************************************************************
    * Method 	Name	:	validateAdministratorToolsPage()
    * Author				:	
    * Description		:	This method validates the validates State Code
    * Date of creation 	:	
    * modifying person 	: 	
    * Date of modification	:
    ********************************************************************************************************/	
	   public void validateAdministratorToolsPage(String strAdminType,String strAdminFuncLinks,String strSysteControlLinks) throws Throwable{
		try {
			blnEventReport = true;
			boolean blnFlag = false;
	
			//Run Nightly Batch Ops Button
			isElementDisplayed(EDTC_OR.RUNNIGHTLYBATCHBTN, "Run Nightly Batch Ops Button");
			
			//Employee Management Section
			isElementDisplayed(EDTC_OR.EMPLOYEEMGMTSECTION, "Employee Management Section");
			isElementDisplayed(EDTC_OR.EMPLOYEEMANAGEMENTBTN,"Employee Management Button");
			
			//Employee Lookup Section
			isElementDisplayed(EDTC_OR.EMPLOYEELOOKUPSECTION, "Employee Lookup Section");
			isElementDisplayed(EDTC_OR.EMPID_NAMETEXTFIELD, "Employee ID/Name Text Field");
			isElementDisplayed(EDTC_OR.SEARCHBTN, "Search Button");
			
			//Administrator Functions Section
			isElementDisplayed(EDTC_OR.ADMINFUNCSECTION, "Administrator Functions Section");
			
			String[] arrayValues=strAdminFuncLinks.split(",");
			
					
			//Validate the Administrator Functions Links
			List<WebElement> strValues = driver.findElements(By.xpath(EDTC_OR.ADMINFUNCSLINKS));
			for (WebElement a : strValues) {
				blnFlag = false;
				for(int iLoop=0;iLoop<arrayValues.length;iLoop++)
				{
					if(a.getText().trim().contains(arrayValues[iLoop]))
					{
						blnFlag = true;
						break;
					}
				}
				if(!blnFlag)
					break;
			}
			if(blnFlag)
				SuccessReport("Validate whether the following Links "+strAdminFuncLinks+" are displayed under Administrator Functions Section",strAdminFuncLinks+" links are displayed under Administrator Functions Section");
			else
				failureReport("Validate whether the following Links "+strAdminFuncLinks+" are displayed under Administrator Functions Section"," Links are not displayed under Administrator Functions Section");
			
			if(strAdminType.equalsIgnoreCase("C2")){
				//System Controls Section
				if(!isElementPresent(EDTC_OR.SYSTEMCONTROLSSECTION, "System Controls Section")){
					SuccessReport("Validate whether System Control section is not displayed for C2 Admin", "System Control section is not displayed");
				}else{
					failureReport("Validate whether System Control section is not displayed for C2 Admin", "System Control section is displayed");
				}
			}else{
				//System Controls Section
				isElementDisplayed(EDTC_OR.SYSTEMCONTROLSSECTION, "System Controls Section");
				//Validate the System Controls Links
				strValues = driver.findElements(By.xpath(EDTC_OR.SYSTEMCONTROLSLINKS));
				arrayValues=strSysteControlLinks.split(",");
				for (WebElement a : strValues) {
					blnFlag = false;
					for(int iLoop=0;iLoop<arrayValues.length;iLoop++)
					{
						if(a.getText().trim().contains(arrayValues[iLoop]))
						{
							blnFlag = true;
							break;
						}
					}
					if(!blnFlag)
						break;
				}
				if(blnFlag)
					SuccessReport("Validate whether the following Links "+strSysteControlLinks+" are displayed under System Controls Section",strSysteControlLinks+" links are displayed under System Controls Section");
				else
					failureReport("Validate whether the following Links "+strSysteControlLinks+" are displayed under System Controls Section","Links are not displayed under System Controls Section");
				
			}
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	  /********************************************************************************************************
	    * Method 	Name	:	validateEmployeeFileCorrectionPage()
	    * Author				:	
	    * Description		:	This method validates the validates State Code
	    * Date of creation 	:	
	    * modifying person 	: 	
	    * Date of modification	:
	    ********************************************************************************************************/	   
	    public void validateEmployeeFileCorrectionPage() throws Throwable{
	    	try{
	    		blnEventReport = true;
	    		isElementDisplayed(EDTC_OR.REFERENCECALENDARBTN, "Reference Calendar Button");
	    		isElementDisplayed(EDTC_OR.SELECTWEEKDROPDOWN, "Select Week Drop Down");
	    		isElementDisplayed(EDTC_OR.COMMENTSTEXTAREA, "Comments Text Area");
	    		isElementDisplayed(EDTC_OR.MGRCHECKBOX, "Manager Check Box");
	    		isElementDisplayed(EDTC_OR.TIMEKEEPERCHECKBOX, "TimeKeeper Check Box");
	    		isElementDisplayed(EDTC_OR.SUBMITBTN, "Submit Button");
	    		isElementDisplayed(EDTC_OR.CLEARBTN, "Clear Button");
	    		blnEventReport = false;
			} catch (Exception e) {
				throw e;
			}
	    }
	   
	    /********************************************************************************************************
	    * Method 	Name	:	fileCorrectionPageHelpButtons()
	    * Author				:	
	    * Description		:	This method validates the validates State Code
	    * Date of creation 	:	
	    * modifying person 	: 	
	    * Date of modification	:
	    ********************************************************************************************************/
	    public void fileCorrectionPageHelpButtons(String strOnBehalfOf,String strCorrectionReqHelpText,String strSelectWeekHelpText,String strSendEmailHelpText,String strClearHelpText) throws Throwable{
	    	try{
	    		blnEventReport = true;
	    		//Validate Correction Request Help Text
	    		click(EDTC_OR.FILEACORRECTIONHELPLINK,"File a correction Help Link");
	    		assertText(EDTC_OR.MODALDIALOGTEXT, strCorrectionReqHelpText);
	    		click(EDTC_OR.MODALDIALOGCLOSEBTN,"File a correction Help Close Button");
	    		Thread.sleep(lSleep_Low);
	    	
	    		//Validate Correction Request Help Text
	    		click(EDTC_OR.SELECTWEEKHELPBTN,"Select week Help Link");
	    		assertText(EDTC_OR.MODALDIALOGTEXT, strSelectWeekHelpText);
	    		click(EDTC_OR.MODALDIALOGCLOSEBTN,"File a correction Help Close Button");
	    		Thread.sleep(lSleep_Low);
	    	
	    		//Validate Correction Request Help Text
	    		click(EDTC_OR.CLEARBTNHELPLINK,"Clear Button Help Link");
	    		assertText(EDTC_OR.MODALDIALOGTEXT, strClearHelpText);
	    		click(EDTC_OR.MODALDIALOGCLOSEBTN,"Clear Button Help Close Button");
	    		Thread.sleep(lSleep_Low);
	    		
	    		//Validate Send email alert(s) to Help Text
	    		if(isElementPresent(EDTC_OR.ONBEHALFODDROPDOWN,"On Behalf of Drop Down") && strOnBehalfOf.equalsIgnoreCase(loginEmpName)){
	    			selectByVisibleText(EDTC_OR.ONBEHALFODDROPDOWN,strOnBehalfOf,"On Behalf of Drop Down");
	    			
	    			click(EDTC_OR.SENDEMAILALERTHELPBTN,"Send email alert(s) to Help Link");
		    		assertText(EDTC_OR.MODALDIALOGTEXT, strSendEmailHelpText);
		    		click(EDTC_OR.MODALDIALOGCLOSEBTN,"Send email alert(s) to Help Close Button");
		    		Thread.sleep(lSleep_Low);
	    		}
	    		
	    		blnEventReport = false;
			} catch (Exception e) {
				throw e;
			}
	    }
	    
	    
     /********************************************************************************************************
	    * Method 	Name	:	empFileCorrectionRequest()
	    * Author				:	
	    * Description		:	This method validates the validates State Code
	    * Date of creation 	:	
	    * modifying person 	: 	
	    * Date of modification	:
	    ********************************************************************************************************/	   
	    public String empFileCorrectionRequest(String strWeek,String strComments,String strEmailto) throws Throwable{
	    	try{
	    		blnEventReport = true;
	    		selectByVisibleText(EDTC_OR.SELECTWEEKDROPDOWN,strWeek, "Select Week Drop Down");
	    		type(EDTC_OR.COMMENTSTEXTAREA,strComments, "Comments Text Area");
	    		if(strEmailto.equalsIgnoreCase("Manager")){
	    			click(EDTC_OR.MGRCHECKBOX, "Manager Check Box");
	    		}else if(strEmailto.equalsIgnoreCase("TimeKeeper")){
	    			click(EDTC_OR.TIMEKEEPERCHECKBOX, "TimeKeeper Check Box");
	    		}else if(strEmailto.equalsIgnoreCase("Both")){
	    			click(EDTC_OR.TIMEKEEPERCHECKBOX, "TimeKeeper Check Box");
	    			click(EDTC_OR.MGRCHECKBOX, "Manager Check Box");
	    		}
	    		click(EDTC_OR.SUBMITBTN, "Submit Button");
	    		Thread.sleep(lSleep_VLow);
		    	Date todaysDate = new Date();
				SimpleDateFormat formatter = new SimpleDateFormat("hh:mm a");
				formatter.setTimeZone(TimeZone.getTimeZone("GMT"));
				String formattedDate = formatter.format(todaysDate);
				System.out.println(formattedDate);
	    		waitForElementPresent(EDTC_OR.TPSRECORDVOIDSUCCESSMSG, "Success Message");
	    		String strSuccessMsg=getText(EDTC_OR.TPSRECORDVOIDSUCCESSMSG, "Success Message").trim();
	    		if(strSuccessMsg.equalsIgnoreCase("Correction Request Successfully Submitted !")){
	    			SuccessReport("Validate the Success message after Filing the correction request", strSuccessMsg+" Success message is displayed");
	    		}else{
	    			failureReport("Validate the Success message after Filing the correction request", "Success message is not displayed");
	    		}
	    		click(EDTC_OR.MODALDIALOGOKBTN1, "OK Button");
	    		blnEventReport = false;
				return formattedDate;
				
			} catch (Exception e) {
				throw e;
			}
	    }
	    
    /********************************************************************************************************
	    * Method 	Name	:	mgrFileCorrectionRequest()
	    * Author				:	
	    * Description		:	This method validates the validates State Code
	    * Date of creation 	:	
	    * modifying person 	: 	
	    * Date of modification	:
	    ********************************************************************************************************/	   
	    public String mgrFileCorrectionRequest(String strWeek,String strComments,String strEmailto,String strOnBehalfOf) throws Throwable{
	    	try{
	    		blnEventReport = true;
	    		selectByVisibleText(EDTC_OR.SELECTWEEKDROPDOWN,strWeek, "Select Week Drop Down");
	    		selectByVisibleText(EDTC_OR.ONBEHALFODDROPDOWN,strOnBehalfOf,"On Behalf of Drop Down");
	    		if(strOnBehalfOf.equalsIgnoreCase(loginEmpName)){
	    			if(strEmailto.equalsIgnoreCase("Manager")){
		    			click(EDTC_OR.MGRCHECKBOX, "Manager Check Box");
		    		}else if(strEmailto.equalsIgnoreCase("TimeKeeper")){
		    			click(EDTC_OR.TIMEKEEPERCHECKBOX, "TimeKeeper Check Box");
		    		}else if(strEmailto.equalsIgnoreCase("Both")){
		    			click(EDTC_OR.TIMEKEEPERCHECKBOX, "TimeKeeper Check Box");
		    			click(EDTC_OR.MGRCHECKBOX, "Manager Check Box");
		    		}
	    		}
	    		type(EDTC_OR.COMMENTSTEXTAREA,strComments, "Comments Text Area");
	    		click(EDTC_OR.SUBMITBTN, "Submit Button");
	    		Date todaysDate = new Date();
				SimpleDateFormat formatter = new SimpleDateFormat("hh:mm a");
				formatter.setTimeZone(TimeZone.getTimeZone("GMT"));
				String formattedDate = formatter.format(todaysDate);
				System.out.println(formattedDate);
	    		Thread.sleep(lSleep_Low);
	    		waitForElementPresent(EDTC_OR.TPSRECORDVOIDSUCCESSMSG, "Success Message");
	    		String strSuccessMsg=getText(EDTC_OR.TPSRECORDVOIDSUCCESSMSG, "Success Message").trim();
	    		if(strSuccessMsg.equalsIgnoreCase("Correction Request Successfully Submitted !")){
	    			SuccessReport("Validate the Success message after Filing the correction request", strSuccessMsg+" Success message is displayed");
	    		}else{
	    			failureReport("Validate the Success message after Filing the correction request", "Success message is not displayed");
	    		}
	    		click(EDTC_OR.MODALDIALOGOKBTN1, "OK Button");
	    		Thread.sleep(lSleep_Low);
	    		blnEventReport = false;
				return formattedDate;
			} catch (Exception e) {
				throw e;
			}
	    }
	    
	   /********************************************************************************************************
	    * Method 	Name	:	validateMgrFileCorrectionPage()
	    * Author				:	
	    * Description		:	This method validates the validates State Code
	    * Date of creation 	:	
	    * modifying person 	: 	
	    * Date of modification	:
	    ********************************************************************************************************/	
		 public void validateMgrFileCorrectionPage(String strOnBehalfOf) throws Throwable{
			 try{
				 blnEventReport = true;
				 isElementDisplayed(EDTC_OR.REFERENCECALENDARBTN, "Reference Calendar Button");
		    	 isElementDisplayed(EDTC_OR.SELECTWEEKDROPDOWN, "Select Week Drop Down");
		    	 isElementDisplayed(EDTC_OR.ONBEHALFODDROPDOWN, "On Behalf of Drop Down");
		    	 if(strOnBehalfOf.equalsIgnoreCase(loginEmpName)){
		    		 selectByVisibleText(EDTC_OR.ONBEHALFODDROPDOWN,strOnBehalfOf,"On Behalf of Drop Down");
		    		 isElementDisplayed(EDTC_OR.MGRCHECKBOX, "Manager Check Box");
			    	 isElementDisplayed(EDTC_OR.TIMEKEEPERCHECKBOX, "TimeKeeper Check Box");
		    	 }
		    	 isElementDisplayed(EDTC_OR.COMMENTSTEXTAREA, "Comments Text Area");
		    	 isElementDisplayed(EDTC_OR.SUBMITBTN, "Submit Button");
		    	 isElementDisplayed(EDTC_OR.CLEARBTN, "Clear Button");
				 blnEventReport = false;
				} catch (Exception e) {
					throw e;
				}
		 }
	  /********************************************************************************************************
	    * Method 	Name	:	validateMgrFileCorrectionPage()
	    * Author				:	
	    * Description		:	This method validates the validates State Code
	    * Date of creation 	:	
	    * modifying person 	: 	
	    * Date of modification	:
	    ********************************************************************************************************/		 
		 public void validatePendingCorrectionRequest(String strEmpComments,String strTodaysDate,String strStatus) throws Throwable{
			 try{
				 boolean bflag=false;
				 if(!isElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../preceding-sibling::div"), "Pending Correction Requests")){
					 for(int i=1;i<=30;i++){
						 if(isEnabled_WithoutReport(EDTC_OR.PAGINATIONLINK, "Pagination")){
							 click(EDTC_OR.PAGINATIONLINK, "Pagination");
							 Thread.sleep(lSleep_Low);
							 if(isElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../preceding-sibling::div"), "Pending Correction Requests")){
								 bflag=true;
								 break;
							 }
						 }else{
							 break;
						 }
					 }	 
				 }else{
					 bflag=true; 
				 }
				 blnEventReport = true;
				 if(bflag){
					 click(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../preceding-sibling::div"), "Pending Correction Requests");
					 //Validate the Date
					 assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]//following-sibling::p//span[contains(@class,'date')]"), strTodaysDate);
					 //Validate the Status
					 assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../preceding-sibling::div/div[@class='col-lg-4 col-md-4 col-sm-12 col-xs-12']/span"), strStatus);
				
					 String strTimeText=getText(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]//following-sibling::p//span[contains(@class,'time')]"), "Time").trim();
					 String strTime=strTimeText.split(" ")[0];
					 String strAM_PM=empRequestTime.split(" ")[1];
					 DateFormat sdf = new SimpleDateFormat("hh:mm");
					 Date appTime = sdf.parse(strTime);
					 Date codeTime = sdf.parse(empRequestTime);
					 long diff = appTime.getTime() - codeTime.getTime();
					 long diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(diff);
					 System.out.println(diffInSeconds);
					 if(diffInSeconds<=100 && strTimeText.contains(strAM_PM) && strTimeText.contains("GMT")){
						   SuccessReport("Validate whether the Employee Requested Time is displayed correctly "+adminApproveTime, strTimeText+" Employee Requested time is displayed correctly");
					 }else{
						   failureReport("Validate whether the Employee Requested Time is displayed correctly "+adminApproveTime, "Employee Requested time is not displayed correctly");
					 }
										 
				 }else{
					 failureReport("Validate whether the Correction request filed by the Employee is seen by the Manager/Admin", "Correction request filed by the Employee is not seen by the Manager/Admin");
				 }
				 blnEventReport = false;
				} catch (Exception e) {
					throw e;
				}
		 }
   	 /********************************************************************************************************
   	  * Method 	Name		:	validateRequest_OnBehalOfEmp()
   	  * Author				:	
   	  * Description			:	This method validates the validates State Code
   	  * Date of creation 	:	
   	  * modifying person 	: 	
   	  * Date of modification		:
   	  ********************************************************************************************************/		 
	 public void validateRequest_OnBehalOfEmp(String strMgrComments,String strTodaysDate,String strStatus,String mgrName) throws Throwable{
		 try{
			 blnEventReport = true;
			 if(isElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+strMgrComments+"')]"), "Pending Correction Requests")){
				 click(By.xpath(EDTC_OR.ELEMENTTEXT1+strMgrComments+"')]/../../preceding-sibling::div"), "Pending Correction Requests");
				 
				 //Validate the Comment
				 assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strMgrComments+"')]/../../div[1]/p[contains(@class,'correction-text')]"), "Request submitted by Manager on behalf of Employee");
				 //Validate the Date
				 assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strMgrComments+"')]/../../div[1]//span[contains(@class,'date')]"), strTodaysDate);
				 
				 //Validate the Manager Name
				 assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strMgrComments+"')]//preceding-sibling::p//b"), mgrName);
				 //Validate the Manager Comments
				 assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strMgrComments+"')]/../../div[contains(@ng-if,'managerEntry')]/p[@class='sub-text ng-binding']"), strMgrComments);
				 //Validate the Date
				 assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strMgrComments+"')]//following-sibling::p//span[contains(@class,'date')]"), strTodaysDate);
				 
				 String strMgrTimeText=getText(By.xpath(EDTC_OR.ELEMENTTEXT1+strMgrComments+"')]//following-sibling::p//span[contains(@class,'time')]"), "Time").trim();
				 String strEmpTimeText=getText(By.xpath(EDTC_OR.ELEMENTTEXT1+strMgrComments+"')]/../../div[1]//span[contains(@class,'time')]"), "Time").trim();
				 if(strMgrTimeText.equalsIgnoreCase(strEmpTimeText)){
					SuccessReport("Validate whether the Timestamp is same for Employee and Manager", strMgrTimeText+" Timestamp is same for Employee and Manager");
				 }else{
					 failureReport("Validate whether the Timestamp is same for Employee and Manager", "Timestamp is not same for Employee and Manager"); 
				 }
				 String strTime=strMgrTimeText.split(" ")[0];
				 String strAM_PM=empRequestTime.split(" ")[1];
				 DateFormat sdf = new SimpleDateFormat("hh:mm");
				 Date appTime = sdf.parse(strTime);
				 Date codeTime = sdf.parse(empRequestTime);
				 long diff = appTime.getTime() - codeTime.getTime();
				 long diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(diff);
				 System.out.println(diffInSeconds);
				 if(diffInSeconds<=100 && strMgrTimeText.contains(strAM_PM) && strMgrTimeText.contains("GMT")){
					   SuccessReport("Validate whether the Manager Requested Time on behalf of Employee is displayed correctly "+adminApproveTime, strMgrTimeText+"  Manager Requested Time on behalf of Employee is displayed correctly ");
				 }else{
					   failureReport("Validate whether the Manager Requested Time on behalf of Employee is displayed correctly "+adminApproveTime, " Manager Requested Time on behalf of Employee is not displayed correctly");
				 }
									 
			 }else{
				 failureReport("Validate whether the Correction request filed by the Employee is seen by the Manager", "Correction request filed by the Employee is not seen by the Manager");
			 }
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	 
	 /********************************************************************************************************
   	  * Method 	Name		:	validateRequest_OnBehalOfEmp()
   	  * Author				:	
   	  * Description			:	This method validates the validates State Code
   	  * Date of creation 	:	
   	  * modifying person 	: 	
   	  * Date of modification		:
   	  ********************************************************************************************************/		 
	 public void validateRequest_OnBehalOfEmp_AdminPage(String strMgrComments,String strTodaysDate,String strStatus,String mgrName) throws Throwable{
		 try{
			 blnEventReport = true;
			 if(isElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+strMgrComments+"')]"), "Pending Correction Requests")){
				 click(By.xpath(EDTC_OR.ELEMENTTEXT1+strMgrComments+"')]/../../preceding-sibling::div"), "Pending Correction Requests");
				 
				 //Validate the Employee Comment Label
				 assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strMgrComments+"')]/../preceding-sibling::div//b"), "Employee comment");
				 //Validate the Employee Comment
				 assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strMgrComments+"')]/../preceding-sibling::div/p[2]"), "Request submitted by Manager on behalf of Employee");
				 //Validate the Employee Date
				 assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strMgrComments+"')]/../preceding-sibling::div/p/span[contains(@class,'date')]"), strTodaysDate);
				 
				 //Validate the Manager Name
				 assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strMgrComments+"')]/preceding-sibling::p/b"), mgrName);
				 //Validate the Manager Comments
				 assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strMgrComments+"')]"), strMgrComments);
				 //Validate the Date
				 assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strMgrComments+"')]/following-sibling::p/span[contains(@class,'date')]"), strTodaysDate);
				 
				 String strMgrTimeText=getText(By.xpath(EDTC_OR.ELEMENTTEXT1+strMgrComments+"')]//following-sibling::p//span[contains(@class,'time')]"), "Time").trim();
				 String strEmpTimeText=getText(By.xpath(EDTC_OR.ELEMENTTEXT1+strMgrComments+"')]/../../div[1]//span[contains(@class,'time')]"), "Time").trim();
				 if(strMgrTimeText.equalsIgnoreCase(strEmpTimeText)){
					 SuccessReport("Validate whether the Timestamp is same for Employee and Manager", strMgrTimeText+" Timestamp is same for Employee and Manager");
				 }else{
					 failureReport("Validate whether the Timestamp is same for Employee and Manager", "Timestamp is not same for Employee and Manager"); 
				 }
				 String strTime=strMgrTimeText.split(" ")[0];
				 String strAM_PM=empRequestTime.split(" ")[1];
				 DateFormat sdf = new SimpleDateFormat("hh:mm");
				 Date appTime = sdf.parse(strTime);
				 Date codeTime = sdf.parse(empRequestTime);
				 long diff = appTime.getTime() - codeTime.getTime();
				 long diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(diff);
				 System.out.println(diffInSeconds);
				 if(diffInSeconds<=100 && strMgrTimeText.contains(strAM_PM) && strMgrTimeText.contains("GMT")){
					   SuccessReport("Validate whether the Manager Requested Time oon behalf of Employee is displayed correctly "+adminApproveTime, strMgrTimeText+"  Manager Requested Time oon behalf of Employee is displayed correctly ");
				 }else{
					   failureReport("Validate whether the Manager Requested Time oon behalf of Employee is displayed correctly "+adminApproveTime, " Manager Requested Time oon behalf of Employee is displayed correctly");
				 }
									 
			 }else{
				 failureReport("Validate whether the Correction request filed by the Employee is seen by the Manager", "Correction request filed by the Employee is not seen by the Manager");
			 }
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}	 
	 
	 
		 
		 
		 
	 /********************************************************************************************************
	  * Method 	Name	:	validateMgrComments()
	  * Author				:	
	  * Description		:	This method validates the validates State Code
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification	:
	  ********************************************************************************************************/		 
	   public void validateMgrComments(String strEmpComments,String strTodaysDate,String mgrName,String mgrComments) throws Throwable{
		   try{
			   blnEventReport = true;
				 
			   //Validate the Manager Name
			   assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../div[contains(@ng-if,'managerEntry')]//b"), mgrName);
			   //Validate the Manager Comments
			   assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../div[contains(@ng-if,'managerEntry')]/p[@class='sub-text ng-binding']"), mgrComments);
			   //Validate the Date
			   assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../div[contains(@ng-if,'managerEntry')]//span[contains(@class,'date')]"), strTodaysDate);
			  
			   //Validate the Time
			   String strTimeText=getText(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../div[contains(@ng-if,'managerEntry')]//span[contains(@class,'time')]"), "Time").trim();
			   String strTime=strTimeText.split(" ")[0];
			   String strAM_PM=mgrApproveTime.split(" ")[1];
			   DateFormat sdf = new SimpleDateFormat("hh:mm");
			   Date appTime = sdf.parse(strTime);
			   Date codeTime = sdf.parse(mgrApproveTime);
			   long diff = appTime.getTime() - codeTime.getTime();
			   long diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(diff);
			   System.out.println(diffInSeconds);
			   if(diffInSeconds<=100 && strTimeText.contains(strAM_PM) && strTimeText.contains("GMT")){
				   SuccessReport("Validate whether the Manager approved Time is displayed correctly "+adminApproveTime, strTimeText+" Manager approved time is displayed correctly");
			   }else{
				   failureReport("Validate whether the Manager approved Time is displayed correctly "+adminApproveTime, "Manager approved time is not displayed correctly");
			   }
			   
			   blnEventReport = false;
		   } catch (Exception e) {
			   throw e;
		   }
	   }
   /********************************************************************************************************
	  * Method 	Name	:	validateMgrComments_AdminPage()
	  * Author				:	
	  * Description		:	This method validates the validates State Code
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification	:
	  ********************************************************************************************************/		 
	   public void validateMgrComments_AdminPage(String strEmpComments,String strTodaysDate,String strStatus,String mgrName,String mgrComments) throws Throwable{
		   try{
			   blnEventReport = true;
				 
			   //Validate the Manager Name
			   assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../div[contains(@class,'left')]//b"), mgrName);
			   //Validate the Manager Comments
			   assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../div[contains(@class,'left')]/p[@class='sub-text ng-binding']"), mgrComments);
			   //Validate the Date
			   assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../div[contains(@class,'left')]//span[contains(@class,'date')]"), strTodaysDate);
			  
			   //Validate the Time
			   String strTimeText=getText(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../div[contains(@class,'left')]//span[contains(@class,'time')]"), "Time").trim();
			   String strTime=strTimeText.split(" ")[0];
			   String strAM_PM=mgrApproveTime.split(" ")[1];
			   DateFormat sdf = new SimpleDateFormat("hh:mm");
			   Date appTime = sdf.parse(strTime);
			   Date codeTime = sdf.parse(mgrApproveTime);
			   long diff = appTime.getTime() - codeTime.getTime();
			   long diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(diff);
			   System.out.println(diffInSeconds);
			   if(diffInSeconds<=100 && strTimeText.contains(strAM_PM) && strTimeText.contains("GMT")){
				   SuccessReport("Validate whether the Manager approved Time is displayed correctly "+adminApproveTime, strTimeText+" Manager approved time is displayed correctly");
			   }else{
				   failureReport("Validate whether the Manager approved Time is displayed correctly "+adminApproveTime, "Manager approved time is not displayed correctly");
			   }
			   
			   
			   blnEventReport = false;
		   } catch (Exception e) {
			   throw e;
		   }
	   }	   
	   
	   
   /********************************************************************************************************
	  * Method 	Name	:	validateAdminComments()
	  * Author				:	
	  * Description		:	This method validates the validates State Code
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification	:
	  ********************************************************************************************************/		 
	   public void validateAdminComments(String strEmpComments,String strTodaysDate,String mgrName,String mgrComments) throws Throwable{
		   try{
			   blnEventReport = true;
				 
			   //Validate the Manager Name
			   assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../div[contains(@ng-if,'adminEntry')]//b"), mgrName);
			   //Validate the Manager Comments
			   assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../div[contains(@ng-if,'adminEntry')]/p[@class='sub-text ng-binding']"), mgrComments);
			   //Validate the Date
			   assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../div[contains(@ng-if,'adminEntry')]//span[contains(@class,'date')]"), strTodaysDate);
			   //Validate the Time
			   String strTimeText=getText(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../div[contains(@ng-if,'adminEntry')]//span[contains(@class,'time')]"), "Time").trim();
			   String strTime=strTimeText.split(" ")[0];
			   String strAM_PM=adminApproveTime.split(" ")[1];
			   DateFormat sdf = new SimpleDateFormat("hh:mm");
			   Date appTime = sdf.parse(strTime);
			   Date codeTime = sdf.parse(adminApproveTime);
			   long diff = appTime.getTime() - codeTime.getTime();
			   long diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(diff);
			   System.out.println(diffInSeconds);
			   if(diffInSeconds<=100 && strTimeText.contains(strAM_PM) && strTimeText.contains("GMT")){
				   SuccessReport("Validate whether the Admin approved Time is displayed correctly "+adminApproveTime, strTimeText+" Admin approved time is displayed correctly");
			   }else{
				   failureReport("Validate whether the Admin approved Time is displayed correctly "+adminApproveTime, "Admin approved time is not displayed correctly");
			   }
			   
			   blnEventReport = false;
		   } catch (Exception e) {
			   throw e;
		   }
	   }
		 
	 /********************************************************************************************************
	    * Method 	Name	:	managerApprove_Reject_Request()
	    * Author			:	
	    * Description		:	This method validates the validates State Code
	    * Date of creation 	:	
	    * modifying person 	: 	
	    * Date of modification	:
	    ********************************************************************************************************/		 
		 public void managerApprove_Reject_Request(String strEmpComments,String strMgrComments,String strTorrPayrollRequest) throws Throwable{
			 try{
				 blnEventReport = true;
				 
				 boolean bflag=false;
				 if(!isElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../preceding-sibling::div"), "Pending Correction Requests")){
					 for(int i=1;i<=40;i++){
						 if(isEnabled_WithoutReport(EDTC_OR.PAGINATIONLINK, "Pagination")){
							 click(EDTC_OR.PAGINATIONLINK, "Pagination");
							 Thread.sleep(lSleep_Low);
							 if(isElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../preceding-sibling::div"), "Pending Correction Requests")){
								 bflag=true;
								 break;
							 }
						 }else{
							 break;
						 }
					 }	 
				 }else{
					 bflag=true; 
				 }
				 if(bflag){
					 click(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../preceding-sibling::div"), "Pending Correction Requests");
					 type(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../following-sibling::form//textarea"),strMgrComments, "Your Comments Text Area");
					 if(strTorrPayrollRequest.equalsIgnoreCase("Y")){
						 click(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../following-sibling::form//input[@type='checkbox']"), "Do not send this request to Torrance Payroll Checkox");
					 }
					 click(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../following-sibling::form//button[text()='Submit comment']"), "Submit Comment Button");
					 Thread.sleep(lSleep_VLow);
					 Date todaysDate = new Date();
					 SimpleDateFormat formatter = new SimpleDateFormat("hh:mm a");
					 formatter.setTimeZone(TimeZone.getTimeZone("GMT"));
					 mgrApproveTime= formatter.format(todaysDate);
					 if(strTorrPayrollRequest.equalsIgnoreCase("Y")){
						 adminApproveTime= formatter.format(todaysDate); 
					 }
					 System.out.println(mgrApproveTime); 
					 assertText(EDTC_OR.CORRECTIONREQUESTSUCCESSMSG, "Correction Response Successfully Submitted");
					 click(EDTC_OR.MODALDIALOGOKBTN1,"Ok Button"); 
				 }
				 
				 blnEventReport = false;
				} catch (Exception e) {
					throw e;
				}
		 }
		 
	 /********************************************************************************************************
	    * Method 	Name	:	adminApprove_Reject_Request()
	    * Author			:	
	    * Description		:	This method validates the validates State Code
	    * Date of creation 	:	
	    * modifying person 	: 	
	    * Date of modification	:
	    ********************************************************************************************************/		 
		 public void adminApprove_Reject_Request(String strEmpComments,String stradminComments) throws Throwable{
			 try{
				 boolean bflag=false;
				 if(!isElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../preceding-sibling::div"), "Pending Correction Requests")){
					 for(int i=1;i<=40;i++){
						 if(isEnabled_WithoutReport(EDTC_OR.PAGINATIONLINK, "Pagination")){
							 click(EDTC_OR.PAGINATIONLINK, "Pagination");
							 Thread.sleep(lSleep_Low);
							 if(isElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../preceding-sibling::div"), "Pending Correction Requests")){
								 bflag=true;
								 break;
							 }
						 }else{
							 break;
						 }
					 }	 
				 }else{
					 bflag=true; 
				 }
				 blnEventReport = true;
				 if(bflag){
					 click(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../preceding-sibling::div"), "Pending Correction Requests");
					 type(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../following-sibling::form//textarea"),stradminComments, "Your Comments Text Area");
					 click(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../following-sibling::form//button[text()='Submit comment']"), "Submit Comment Button");
					 Thread.sleep(lSleep_VLow);
					 Date todaysDate = new Date();
					 SimpleDateFormat formatter = new SimpleDateFormat("hh:mm a");
					 formatter.setTimeZone(TimeZone.getTimeZone("GMT"));
					 adminApproveTime= formatter.format(todaysDate);
					 System.out.println(adminApproveTime);
					 assertText(EDTC_OR.CORRECTIONREQUESTSUCCESSMSG, "Correction Determination Successfully Submitted");
					 click(EDTC_OR.MODALDIALOGOKBTN1,"Ok Button"); 
				 }else{
					 failureReport("Validate whether the Correction request filed by the Employee is seen by the Manager/Admin", "Correction request filed by the Employee is not seen by the Manager/Admin"); 
				 }
				 blnEventReport = false;
				} catch (Exception e) {
					throw e;
				}
		 }		 
		 
		 
	 /********************************************************************************************************
	    * Method 	Name	:	navigateToEDTCMainPage()
	    * Author			:	
	    * Description		:	This method validates the validates State Code
	    * Date of creation 	:	
	    * modifying person 	: 	
	    * Date of modification	:
	   ********************************************************************************************************/
		 public void navigateToEDTCMainPage() throws Throwable{
		 try{
			 blnEventReport = true;
			 click(EDTC_OR.EDTCLINK,"EDTC Link");
			 //This method validates the Page title
			 validatePageHeader(EDTC_OR.PAGEHEADEREDTCMAINPAGE, "QUICK LAUNCH");
			 blnEventReport = false;
			} catch (Exception e) {
				throw e;
			}
		 }
		 
	 /********************************************************************************************************
	    * Method 	Name	:	navigateToTPSMainPage()
	    * Author			:	
	    * Description		:	This method validates the validates State Code
	    * Date of creation 	:	
	    * modifying person 	: 	
	    * Date of modification	:
	   ********************************************************************************************************/
		 public void navigateToTPSMainPage() throws Throwable{
		 try{
			 blnEventReport = true;
			 if(browsertype.equalsIgnoreCase("Safari")){
				 click(EDTC_OR.TPSLINK,"TPS Link");
			 }else{
				 click(EDTC_OR.TPSLINK,"TPS Link");	 
			 }
			 //This page validates the TERMINATION PROCESSING SYSTEM Title
			 validatePageHeader(EDTC_OR.PAGEHEADER, "TERMINATION PROCESSING SYSTEM (Signed in as "+loginEmpName+")");
			 blnEventReport = false;
			} catch (Exception e) {
				throw e;
			}
		 }
	 /********************************************************************************************************
	    * Method 	Name	:	validateEditOutStandingPage()
	    * Author			:	
	    * Description		:	This method validates the validates State Code
	    * Date of creation 	:	
	    * modifying person 	: 	
	    * Date of modification	:
	   ********************************************************************************************************/
		 public void validateEditOutStandingPage(String strEmpComments,String strLink,String strUserType) throws Throwable{
		 try{
			 blnEventReport = true;
			 String strValue=getText(By.xpath(EDTC_OR.ELEMENTTEXT+strLink+"']/following-sibling::p"), strLink).split(" ")[0].replace("(", "");
			 if(strValue.equalsIgnoreCase("(No Corrections are outstanding)")){
				 click(By.xpath(EDTC_OR.ELEMENTTEXT+strLink+"']"),strLink);

				 //This method validates the Page title
				 validatePageHeader(EDTC_OR.PAGEHEADER, "OUTSTANDING CORRECTIONS (0)");
				 String strText=getText(EDTC_OR.NORCORRECTIONFOUNDMSG, "No corrections found");
				 if(strText.equalsIgnoreCase("No Corrections are outstanding")){
					 SuccessReport("Validate whether "+strText+" text is displayed when no outstanding corrections are present", strText+" text is displayed when no outstanding corrections are present");
				 }else{
					 failureReport("Validate whether "+strText+" text is displayed when no outstanding corrections are present", strText+" Text is not displayed when no outstanding corrections are present");
				 }
			 }else{
				 int intValue=Integer.parseInt(strValue);
				 click(By.xpath(EDTC_OR.ELEMENTTEXT+strLink+"']"),strLink);
				 pageLoadingCompleted(EDTC_OR.PAGESPINNER);
				 //This method validates the Page title
				 validatePageHeader(EDTC_OR.PAGEHEADER, "OUTSTANDING CORRECTIONS");
				 int count=driver.findElements(By.xpath("//div[@class='col-lg-7 col-md-12 col-sm-12 report-card']")).size();
				 if(count==intValue){
					 SuccessReport("Validate the number of outstanding corrections matched the value shown below the Edit Outstanding Corrections", count+" Number of outstanding corrections matches the value shown below the Edit Outstanding Corrections");
				 }else{
					 SuccessReport("Validate the number of outstanding corrections matched the value shown below the Edit Outstanding Corrections", count+" Number of outstanding corrections doesnt not match the value shown below the Edit Outstanding Corrections");
				 }
				 
				 boolean bflag=false;
				 if(!isElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../preceding-sibling::div"), "Pending Correction Requests")){
					 for(int i=1;i<=40;i++){
						if(isEnabled_WithoutReport(EDTC_OR.PAGINATIONLINK, "Pagination")){
							click(EDTC_OR.PAGINATIONLINK, "Pagination");
							Thread.sleep(lSleep_Low);
							if(isElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../preceding-sibling::div"), "Pending Correction Requests")){
								bflag=true;
								break;
							}
						}else{
							break;
						}
			
					 
					 }	 
				 }else{
					 bflag=true; 
				 }	
				 if(bflag){
					 click(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../preceding-sibling::div"), "Pending Correction Requests");
					 Thread.sleep(lSleep_Low);
					 isElementDisplayed(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../following-sibling::form//textarea"), "Your Comments Text Area");
					 
					 isElementDisplayed(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../following-sibling::form//button[text()='Submit comment']"), "Submit Comment Button");
					 
					 strValue=getAttribute(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../..//textarea"), "placeholder", "Manager Comments text area").trim();
					 
				 
					 if(!strUserType.equalsIgnoreCase("Admin")){
						 isElementDisplayed(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../following-sibling::form//input[@type='checkbox']"), "Do not send this request to Torrance Payroll Checkox");
						 if(isChecked(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../following-sibling::form//input[@type='checkbox']"), "Do not send this request to Torrance Payroll Checkox")){
							 failureReport("Validate whether the Do not send this request to Torrance Payroll check box is unchecked by default", "Do not send this request to Torrance Payroll check box is checked");
						 }else{
							 SuccessReport("Validate whether the Do not send this request to Torrance Payroll check box is unchecked by default", "Do not send this request to Torrance Payroll check box is unchecked");
						 }
						 
						 if(strValue.equalsIgnoreCase("Describe your response to this employee's Request as well as suggestions or requests you want to forward to the Administrator")){
							 SuccessReport("Validate the text dsiplayed in the Your comments text area", strValue+" Text is displayed in the Your comments text area");
						 }else{
							 failureReport("Validate the text dsiplayed in the Your comments text area", "Text is not displayed in the Your comments text area");
						 }
				
					 }else{
						 if(isElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../following-sibling::form//input[@type='checkbox']"), "Do not send this request to Torrance Payroll Checkox")){
							 failureReport("Validate whether the Torrance Payroll checkbox is not present for Admin user", "Torrance Payroll checkbox is present for Admin user");
						 }else{
							 SuccessReport("Validate whether the Torrance Payroll checkbox is not present for Admin user", "Torrance Payroll checkbox is not present for Admin user");
						 }
						 
						 if(strValue.equalsIgnoreCase("Make a note of the action taken on your part in reponse to the request")){
							 SuccessReport("Validate the text displayed in the Your comments text area", strValue+" Text is displayed in the Your comments text area");
						 }else{
							 failureReport("Validate the text displayed in the Your comments text area", "Text is not displayed in the Your comments text area");
						 }
					 }
					 
					 isEnabled(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../following-sibling::form//button[text()='Submit comment']"), "Submit Comment Button");
					 click(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../following-sibling::form//button[text()='Submit comment']"), "Submit Comment Button");
					 assertText(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../following-sibling::form//div[@class='ng-active']/p"), "Comments are required.");
					 
					 click(By.xpath(EDTC_OR.ELEMENTTEXT1+strEmpComments+"')]/../../preceding-sibling::div"), "Pending Correction Requests"); 
				 }else{
					 failureReport("Validate whether the Correction Request is displayed in the Admin's Oustanding Corrections Page", "Correction Request is displayed in the Admin's Oustanding Corrections Page");
				 }
				
			 }
			 blnEventReport = false;
			} catch (Exception e) {
			throw e;
		}
	}
			

	/********************************************************************************************************
	 * Method 	Name	:	validateEditOutStandingPage()
	 * Author			:	
	 * Description		:	This method validates the validates State Code
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	:
	 ********************************************************************************************************/
	 public void correctionReports(String strFromDate,String strToDate,String strOption,String strEmpID) throws Throwable{
		 try{
			 blnEventReport = true;
			 String strStatus="";
			 boolean dateFlag=false;
			 boolean empIDFlag=false;
			 boolean statusFlag=false;
			 
			 type(EDTC_OR.FROMDATETEXTFIELD,strFromDate,"From Date Text Field");
			 driver.findElement(EDTC_OR.FROMDATETEXTFIELD).sendKeys(Keys.TAB);
			 type(EDTC_OR.TODATETEXTFIELD,strToDate,"TO Date Text Field");
			 driver.findElement(EDTC_OR.TODATETEXTFIELD).sendKeys(Keys.TAB);
			 click(By.xpath(EDTC_OR.ELEMENT+strOption+"')]/input"),strOption+" Radio Button");
			 if(!strEmpID.isEmpty()){
				 type(EDTC_OR.LIMITTOEMPIDTEXTFIELD,strEmpID,"Limit to Emp ID Text Field");
			 }
			 click(EDTC_OR.GENERATEREPORTSBTN, "Generate Reports Button");
			 
			 //This method validates the Page title
			 validatePageHeader(EDTC_OR.PAGEHEADER, "Correction Report for Manager: "+loginEmpName);
			

			 //Format the Date
			 
			 //Set the Value of the String
			 DateFormat formatter=new SimpleDateFormat("MM/dd/yyyy");
			 Date fromDate=(Date)formatter.parse(strFromDate);
			 Date toDate=(Date)formatter.parse(strToDate);
			 
			 if(strOption.contains("Manager Response")){
				 strStatus="PENDING MANAGER APPROVAL";
			 }else if(strOption.contains("Admin Determination")){
				 strStatus="PENDING ADMIN APPROVAL";
			 }else if(strOption.equalsIgnoreCase("Completed Corrections")){
				 strStatus="PROCESSED";
			 }
			 
			 if(!isElementPresent(EDTC_OR.NOSPECIFICCORREECTIONSLABEL, "No Specified Corrections have been filed.")){
				List<WebElement> elements=driver.findElements(By.xpath("//div[@class='col-lg-12 col-md-12 col-sm-12 correction-row ng-scope']"));
				SuccessReport("Validate the number of corrections", elements.size() +" are the corrections displayed");
				
				for(int i=0;i<elements.size();i++){
					
					//Check if the Date is not between the From and To Date 
					String strDate=elements.get(i).findElement(By.xpath(".//div[contains(@class,'report-card-header')]//span[contains(@class,'date')]")).getText().trim();
					Date startDate = (Date)formatter.parse(strDate); 
					if(startDate.after(toDate) && startDate.before(fromDate)){
						failureReport("Validate that user is able to retrieve reports for a selected time period "+strFromDate+" and "+strToDate, "User is not able to retrieve reports for a selected time period ");
						dateFlag=true;
						break;
					}

					//Check if the Status of the all the corrections is same as the value selected
					if(!(elements.get(i).findElement(By.xpath(".//span[contains(@ng-if,'responded')]")).getText()).trim().equalsIgnoreCase(strStatus)){
						failureReport("Validate that user is able to retrieve "+strOption+" correction reports", "User is not able to retrieve "+strOption+" correction reports");
						statusFlag=true;
						break;
					}
					
					//Check if all the corrections are not of the Employee ID
					if(!strEmpID.isEmpty() && !(elements.get(i).findElement(By.xpath(".//span[contains(@class,'number')]")).getText().trim().replaceAll("(", "").replaceAll(")", "").equalsIgnoreCase(strEmpID))){
						failureReport("Validate that user is able to retrieve reports limited to Employee ID "+strEmpID, "User is not able to retrieve reports limited to Employee ID "+strEmpID);
						empIDFlag=true;
						break;
					}
				}
				
				if(!dateFlag){
					SuccessReport("Validate that user is able to retrieve reports for a selected time period "+strFromDate+" and "+strToDate, "user is ableto retrieve reports for a selected time period ");
				}
				
				//Check if the Status of the all the corrections is same as the value selected
				if(!statusFlag){ 
					SuccessReport("Validate that user is able to retrieve "+strOption+" correction reports", "user is able to retrieve "+strOption+" correction reports");
				}
				
				if(!strEmpID.isEmpty()){
					//Check if all the corrections are not of the Employee ID
					if(!empIDFlag){
						SuccessReport("Validate that user is able to retrieve reports limited to Employee ID "+strEmpID, "User is able to retrieve reports limited to Employee ID");
					}
				}
				
				
			 }
			 
			 blnEventReport = false;
			} catch (Exception e) {
			throw e;
		}
	 } 
	 
	 
	 /********************************************************************************************************
		 * Method 	Name		:	correctionReportsPageErrorMsg()
		 * Author				:	
		 * Description			:	This method validates the validates State Code
		 * Date of creation 	:	
		 * modifying person 	: 	
		 * Date of modification	:
	  ********************************************************************************************************/
		 public void correctionReportsPageErrorMsg() throws Throwable{
			 try{
				 blnEventReport = true;
				 String strText="";
				 Thread.sleep(lSleep_Low);
				 type(EDTC_OR.FROMDATETEXTFIELD,getTomorrowDate("MM/dd/yyyy"),"From Date Text Field");
				 type(EDTC_OR.TODATETEXTFIELD,getCurrentDate("MM/dd/yyyy"),"TO Date Text Field");
				 click(EDTC_OR.GENERATEREPORTSBTN, "Generate Reports Button");
				 strText=getText(EDTC_OR.INVALIDDATEERRORMSG, "Invalid Date Error Message");
					 if(strText.equalsIgnoreCase("From Date cannot be after To Date")){
						 SuccessReport("Validate whether the Error message is displayed when the From Date is greater than To Date", strText+" Error message is displayed");	 
					 }else{
						 failureReport("Validate whether the Error message is displayed when the From Date is greater than To Date", "Error message is not displayed");
					 }
				  blnEventReport = false;
				} catch (Exception e) {
				throw e;
			}
		 } 
	/********************************************************************************************************
	 * Method 	Name		:	correctionReportsPageFieldValidation()
	 * Author				:	
	 * Description			:	This method validates the validates State Code
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	:
	 ********************************************************************************************************/
	 public void correctionReportsPageFieldValidation(String strFromDate,String strToDate,String strOption,String strEmpID,String strOptions) throws Throwable{
		 try{
			 blnEventReport = true;
			 //This method clicks on the Correctio Reports Link
			 click(By.xpath(EDTC_OR.ELEMENTTEXT+"Correction reports']"),"Correction reports Link");
			 waitForElementPresent(EDTC_OR.LIMITTOEMPHELPBTN, "Limit to Employee ID Help Link");
			 
			 String[] arrayOptions=strOptions.split(",");
			 //This method clicks on the Correctio Reports Link
			 isElementDisplayed(EDTC_OR.FROMDATETEXTFIELD, "From Date Text Field");
			 isElementDisplayed(EDTC_OR.TODATETEXTFIELD, "To Date Text Field");
			 isElementDisplayed(EDTC_OR.LIMITTOEMPIDTEXTFIELD, "Limit to Employee ID text field");
			 isElementDisplayed(EDTC_OR.GENERATEREPORTSBTN, "Generate Reports Button");
			 isElementDisplayed(EDTC_OR.LIMITTOEMPHELPBTN, "Limit to Employee ID Help Link");
			 
			 for(int i=0;i<arrayOptions.length;i++){
				 isElementDisplayed(By.xpath(EDTC_OR.ELEMENT+arrayOptions[i]+"')]/input"),arrayOptions[i]+" Radio Button");
				 if(isChecked(By.xpath(EDTC_OR.ELEMENT+arrayOptions[i]+"')]/input"),arrayOptions[i]+" Radio Button")){
					 SuccessReport("Validate which radio button is selected by default", arrayOptions[i]+" Radio Button is selected");
				 }
			 }
			 isEnabled(EDTC_OR.FROMDATETEXTFIELD, "From Date Text Field");
			 isEnabled(EDTC_OR.TODATETEXTFIELD, "To Date Text Field");
			 isEnabled(EDTC_OR.LIMITTOEMPIDTEXTFIELD, "Limit to Employee ID text field");
			 isEnabled(EDTC_OR.GENERATEREPORTSBTN, "Generate Reports Button");
			
			 
			 driver.findElement(EDTC_OR.FROMDATETEXTFIELD).clear();
			 driver.findElement(EDTC_OR.TODATETEXTFIELD).clear();
			 isDisabled(EDTC_OR.GENERATEREPORTSBTN, "Generate Reports Button is disabled after clearing From and To Fields");
			 
			 blnEventReport = false;
			} catch (Exception e) {
			throw e;
		}
	 } 	
	 
	/********************************************************************************************************
	 * Method 	Name		:	correctionRequestClearButton()
	 * Author				:	
	 * Description			:	This method validates the validates State Code
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	:
	 ********************************************************************************************************/
	 public void correctionRequestClearButton(String strWeek,String strComments,String strEmailto,String strOnBehalfOf) throws Throwable{
	    	try{
	    		blnEventReport = true;
	    		selectByVisibleText(EDTC_OR.SELECTWEEKDROPDOWN,strWeek, "Select Week Drop Down");
	    		
	    		if(isElementPresent(EDTC_OR.ONBEHALFODDROPDOWN,"On Behalf of Drop Down")){
	    			selectByVisibleText(EDTC_OR.ONBEHALFODDROPDOWN,strOnBehalfOf,"On Behalf of Drop Down");
	    			if(strOnBehalfOf.equalsIgnoreCase(loginEmpName)){
		    			if(strEmailto.equalsIgnoreCase("Manager")){
			    			click(EDTC_OR.MGRCHECKBOX, "Manager Check Box");
			    		}else if(strEmailto.equalsIgnoreCase("TimeKeeper")){
			    			click(EDTC_OR.TIMEKEEPERCHECKBOX, "TimeKeeper Check Box");
			    		}else if(strEmailto.equalsIgnoreCase("Both")){
			    			click(EDTC_OR.TIMEKEEPERCHECKBOX, "TimeKeeper Check Box");
			    			click(EDTC_OR.MGRCHECKBOX, "Manager Check Box");
			    		}
		    		}
	    		}
	    		
	    		if(userType.equalsIgnoreCase("Employee")){
	    			if(strEmailto.equalsIgnoreCase("Manager")){
		    			click(EDTC_OR.MGRCHECKBOX, "Manager Check Box");
		    		}else if(strEmailto.equalsIgnoreCase("TimeKeeper")){
		    			click(EDTC_OR.TIMEKEEPERCHECKBOX, "TimeKeeper Check Box");
		    		}else if(strEmailto.equalsIgnoreCase("Both")){
		    			click(EDTC_OR.TIMEKEEPERCHECKBOX, "TimeKeeper Check Box");
		    			click(EDTC_OR.MGRCHECKBOX, "Manager Check Box");
		    		}
	    		}
	    		
	    		type(EDTC_OR.COMMENTSTEXTAREA,strComments, "Comments Text Area");
	    		click(EDTC_OR.CLEARBTN, "Clear Button");
	    		Select select=new Select(driver.findElement(EDTC_OR.SELECTWEEKDROPDOWN));
				String strValue=select.getFirstSelectedOption().getText().trim();
				if(strValue.contains("==> SELECT DATE <==")){
					SuccessReport("Validate whether the Select Date is selected after user clicks on the Clear Button", "Select Date is selected after user clicks on the Clear Button");
				}else{
					failureReport("Validate whether the Select Date is selected after user clicks on the Clear Button", "Select Date is not selected after user clicks on the Clear Button");
				}
				
				if(isElementPresent(EDTC_OR.ONBEHALFODDROPDOWN,"On Behalf of Drop Down")){
					select=new Select(driver.findElement(EDTC_OR.ONBEHALFODDROPDOWN));
					strValue=select.getFirstSelectedOption().getText().trim();
					if(strValue.contains("==> SELECT EMPLOYEE <==")){
						SuccessReport("Validate whether the Select Employee is selected after user clicks on the Clear Button", "Select Employee is selected after user clicks on the Clear Button");
					}else{
						failureReport("Validate whether the Select Employee is selected after user clicks on the Clear Button", "Select Employee is not selected after user clicks on the Clear Button");
					}
	    		}
	    	
				strValue=getAttribute(EDTC_OR.COMMENTSTEXTAREA, "value", "Comments Text Area");
				if(strValue.isEmpty()){
					SuccessReport("Validate whether the comments Text Area is cleared after user clicks on the Clear Button", "Comments Text Area is cleared after user clicks on the Clear Button");
				}else{
					failureReport("Validate whether the comments Text Area is cleared after user clicks on the Clear Button", "Comments Text Area is not cleared after user clicks on the Clear Button");
				}
				
				if(isElementPresent(EDTC_OR.TIMEKEEPERCHECKBOX, "TimeKeeper Check Box")){
					if(isChecked(EDTC_OR.TIMEKEEPERCHECKBOX, "TimeKeeper Check Box") || isChecked(EDTC_OR.MGRCHECKBOX, "Manager Check Box")){
						failureReport("Validate whether the Manager and Timekeeper checkboxes are unchecked after user clicks on the Clear Button", "Manager and Timekeeper checkboxes are still checked after user clicks on the Clear Button");
					}else{
						SuccessReport("Validate whether the Manager and Timekeeper checkboxes are unchecked after user clicks on the Clear Button", "Manager and Timekeeper checkboxes are unchecked after user clicks on the Clear Button");
					}	
				}
				
				blnEventReport = false;
			} catch (Exception e) {
			throw e;
		}
	 } 	
	 /********************************************************************************************************
		 * Method 	Name		:	correctionRequestClearButton()
		 * Author				:	
		 * Description			:	This method validates the validates State Code
		 * Date of creation 	:	
		 * modifying person 	: 	
		 * Date of modification	:
	 ********************************************************************************************************/
	 public void createMemoPost(String transactionType,String effectiveDate,String adjustPTO,String adjustVestedPTO,String adjustOPT,String adjustSick) throws Throwable{
		 try{
			 blnEventReport = true;
			 //This method validates the Page title
			 validatePageHeader(EDTC_OR.PAGEHEADEREDTCMAINPAGE, "MEMO POSTS FOR "+loginEmpName);
			 isDisabled(EDTC_OR.SAVEMEMOPOSTBTN,"Save Memo Post Button");
			 selectByVisibleText(EDTC_OR.TRANSACTIONTYPEDROPDOWN, transactionType, "Transaction Type Drop Down");
			 type(EDTC_OR.EFFECTIVEDATETEXTFIELD,effectiveDate,"Effective Date Text Field");
			 isEnabled(EDTC_OR.SAVEMEMOPOSTBTN,"Save Memo Post Button");
			 type(EDTC_OR.PTOADJUSTMENTTEXTFIELD,adjustPTO,"PTO Adjustment Text Field");
			 type(EDTC_OR.VESTEDPTOADJUSTTEXTFIELD,adjustVestedPTO,"Vested PTO Adjustment Text Field");
			 type(EDTC_OR.OPTADJUSTTEXTFIELD,adjustOPT,"OPT Adjustment Text Field");
			 type(EDTC_OR.SICKADJUSTTEXTFIELD,adjustSick,"Sick Adjustment Text Field");
			 click(EDTC_OR.SAVEMEMOPOSTBTN,"Save Memo Post Button");
			 blnEventReport = false;
			} catch (Exception e) {
			throw e;
		}
	 }
	  /********************************************************************************************************
		 * Method 	Name		:	validateMemoPostErrorMsg()
		 * Author				:	
		 * Description			:	This method validates the validates State Code
		 * Date of creation 	:	
		 * modifying person 	: 	
		 * Date of modification	:
	  ********************************************************************************************************/
	  public void validateMemoPostErrorMsg() throws Throwable{
		 try{
			 blnEventReport = true;
			 //This method validates the Page title
			 validatePageHeader(EDTC_OR.PAGEHEADEREDTCMAINPAGE, "MEMO POSTS FOR "+loginEmpName);
			 driver.findElement(EDTC_OR.EFFECTIVEDATETEXTFIELD).clear();
			 Thread.sleep(lSleep_Low);
			 isElementDisplayed(EDTC_OR.EFFECTIVEDATEERRORMSG, "Effecive Date Error Message");
			 
			 
			 blnEventReport = false;
			} catch (Exception e) {
			throw e;
		}
	 }
	 
	 
	  /********************************************************************************************************
		 * Method 	Name		:	homePageHelpButtons()
		 * Author				:	
		 * Description			:	This method validates the validates State Code
		 * Date of creation 	:	
		 * modifying person 	: 	
		 * Date of modification	:
	  ********************************************************************************************************/
	  public void homePageHelpButtons(String quickLaunchHelpText,String timeMgmtHelpText,String correctionReqHelptext,String adminHelpText,String edtcHelpText,String edtcHelpSystemHelpText) throws Throwable{
		 try{
			 blnEventReport = true;
			 //Validate EDTC Help Text
			 click(EDTC_OR.SIGNOUTHELPLINK, "EDTC Help Link");
			 assertText(EDTC_OR.EDTCHELPTEXT, edtcHelpText);
			 click(EDTC_OR.EDTCHELPCLOSEBTN,"EDTC Help Close Button");
			 Thread.sleep(lSleep_Low);
			 //Validate QUICK Launch Help Text
			 click(EDTC_OR.QUICKLAUNCHHELPLINK,"Quick Launch Help Link");
			 assertText(EDTC_OR.QUICKLAUNCHHELPTEXT, quickLaunchHelpText);
			 click(EDTC_OR.QUICKLAUNCHHELPCLOSEBTN,"Quick Launch Help Close Button");
			 Thread.sleep(lSleep_Low);
			 //Validate Time Management Help Text
			 click(EDTC_OR.TIMEMGMTHELPBTN,"Time Management Help Link");
			 assertText(EDTC_OR.TIMEMGMTHELPTEXT, timeMgmtHelpText);
			 click(EDTC_OR.TIMEMGMTHELPCLOSEBTN,"Time Management Help Close Button");
			 Thread.sleep(lSleep_Low);
			 //Validate Correction Request Help Text
			 click(EDTC_OR.CORRECTIONREQHELPBTN,"Correction Request Help Link");
			 assertText(EDTC_OR.CORRECTIONREQHELPTEXT, correctionReqHelptext);
			 click(EDTC_OR.CORRECTIONREQHELPCLOSEBTN,"Correction Request Help Close Button");
			 Thread.sleep(lSleep_Low);
			 //Validate Administration Help Text
			 click(EDTC_OR.ADMINISTRATIONHELPBTN,"Administration Help Link");
			 assertText(EDTC_OR.ADMINISTRATIONHELPTEXT, adminHelpText);
			 click(EDTC_OR.ADMINISTRATIONHELPCLOSEBTN,"Administration Help Close Button"); 
			 Thread.sleep(lSleep_Low);
			 //Validate EDTC Help System Help Text
			 click(EDTC_OR.EDTCHELPSYSTEMLINK,"EDTC Help System Help Link");
			 assertText(EDTC_OR.EDTCHELPSYSTEMHELPTEXT, edtcHelpSystemHelpText);
			 click(EDTC_OR.EDTCHELPSYSTEMHELPCLOSEBTN,"EDTC Help System Close Button"); 
			 Thread.sleep(lSleep_Low);
			 
			 blnEventReport = false;
			} catch (Exception e) {
			throw e;
		}
	 }
	  /********************************************************************************************************
		 * Method 	Name		:	adminDashboardHelpButtons()
		 * Author				:	
		 * Description			:	This method validates the validates State Code
		 * Date of creation 	:	
		 * modifying person 	: 	
		 * Date of modification	:
	  ********************************************************************************************************/
	   public void adminDashboardHelpButtons(String adminToolHelptext,String runNightlyBatchHelpText,String empMgmtHelptext,String adminFuncHelptext,String testSystemHelptext) throws Throwable{
		 try{
			 blnEventReport = true;
			 
			 //Validate Administrator Tools Help Button
			 click(EDTC_OR.ADMINISTRATORTOOLSHELPBTN,"Administrator Tools Help Link");
			 Thread.sleep(lSleep_Low);
			 assertText(EDTC_OR.ADMINISTRATORTOOLSHELPTEXT, adminToolHelptext);
			 click(EDTC_OR.ADMINISTRATORTOOLSHELPCLOSEBTN,"Administrator Tools Help Close Button");
			 Thread.sleep(lSleep_Low);
			 
			 //Validate Run Nightly Batch Ops Help Button
			 click(EDTC_OR.RUNNIGHTLYBATCHHELPBTN,"Run Nightly Batch Ops Help Link");
			 Thread.sleep(lSleep_Low);
			 assertText(EDTC_OR.RUNNIGHTLYBATCHHELPTEXT, runNightlyBatchHelpText);
			 click(EDTC_OR.RUNNIGHTLYBATCHHELPCLOSEBTN,"Run Nightly Batch Ops Close Button");
			 Thread.sleep(lSleep_Low);
			 
			 //Validate Employee Management Help Button
			 click(EDTC_OR.EMPLOYEEMGMTHELPBTN,"Employee Management Help Link");
			 Thread.sleep(lSleep_Low);
			 assertText(EDTC_OR.EMPLOYEEMGMTHELPTEXT, empMgmtHelptext);
			 click(EDTC_OR.EMPMGMTHELPCLOSEBTN,"Employee Management Help Close Button");
			 Thread.sleep(lSleep_Low);
			 
			 //Validate Administrator Functions Help Button
			 click(EDTC_OR.ADMINISTRATORFUNCHELPBTN,"Administrator Functions Help Link");
			 Thread.sleep(lSleep_Low);
			 assertText(EDTC_OR.ADMINISTRATORFUNCHELPTEXT, adminFuncHelptext);
			 click(EDTC_OR.ADMINISTRATORFUNCHELPCLOSEBTN,"Administrator Functions Help Close Button");
			 Thread.sleep(lSleep_Low);
			 
			 if(isElementPresent(EDTC_OR.TESTSYSTEMHELPBTN,"Test System Help Link")){
				//Validate Test System Help Button
				 click(EDTC_OR.TESTSYSTEMHELPBTN,"Test System Help Link");
				 Thread.sleep(lSleep_Low);
				 assertText(EDTC_OR.TESTSYSTEMHELPTEXT, testSystemHelptext);
				 click(EDTC_OR.TESTSYSTEMCHELPCLOSEBTN,"Test System Help Close Button");
				 Thread.sleep(lSleep_Low); 
			 }
			 
			 
			 blnEventReport = false;
			} catch (Exception e) {
			throw e;
		}
	 }
	   /********************************************************************************************************
		 * Method 	Name		:	adminDashboardHelpButtons()
		 * Author				:	
		 * Description			:	This method validates the validates State Code
		 * Date of creation 	:	
		 * modifying person 	: 	
		 * Date of modification	:
	  ********************************************************************************************************/	 
	   public void validateC2AdminPriviliges(String strAdminID,String strModalLinks) throws Throwable{
		   try{
			   blnEventReport = true;
			   click(EDTC_OR.EMPLOYEEMANAGEMENTBTN,"Employee Management Button");
			   waitForElementPresent(EDTC_OR.EMPIDTEXTFIELD,"Employee ID Text Field");
			   
			   //Validate C2 Admin user is not able to modify Employee record of another Admin
			   type(EDTC_OR.EMPIDTEXTFIELD,strAdminID,"Employee ID Text Field");
			   click(EDTC_OR.ADD_MODIFYEMPLINK, "Add/Modify Employee Link");
			   waitForElementPresent(EDTC_OR.ACCESSTONEWRECORDNOTALLOWEDMSG, "");
			   assertText(EDTC_OR.ACCESSTONEWRECORDNOTALLOWEDMSG, "Access to Admin emp records is not allowed.");
			   click(EDTC_OR.OKBTN, "Ok Button");
			   
			   //Validate C2 Admin user is not able to Add New Employee
			   type(EDTC_OR.EMPIDTEXTFIELD,"Akhil","Employee ID Text Field");
			   click(EDTC_OR.ADD_MODIFYEMPLINK, "Add/Modify Employee Link");
			   waitForElementPresent(EDTC_OR.ACCESSTONEWRECORDNOTALLOWEDMSG, "");
			   assertText(EDTC_OR.ACCESSTONEWRECORDNOTALLOWEDMSG, "Access to New records is not allowed..");
			   click(EDTC_OR.OKBTN, "Ok Button");
			   
			   
			   
			   type(EDTC_OR.EMPIDTEXTFIELD,empID,"Employee ID Text Field");
			   click(EDTC_OR.ADD_MODIFYEMPLINK, "Add/Modify Employee Link");
			   //This page validates the MODIFY EMPLOYEE Title
			   validatePageHeader(EDTC_OR.PAGEHEADER, "MODIFY EMPLOYEE - "+empName+" ("+empID+")");
			   
			   moveToElement(EDTC_OR.POSITIONDROPDOWN, "Position Drop Down");
			  
			   //Validate C2 Admin user is able to see only Employee and Manager Items in Position DropDown
			   validateDropDownValues(EDTC_OR.POSITIONDROPDOWN, "Employee,Manager", "Position");

			   isDisabled(EDTC_OR.HOLIDAYTEMPLATEDROPDOWN, "Holiday Template Drop Down");
			 
			   List<WebElement> elements=driver.findElements(EDTC_OR.REGULARLYSCHEDULEDHRS);
			   boolean bflag=false;
			   for(int i=0;i<elements.size();i++){
				   if(!elements.get(i).getAttribute("readonly").equalsIgnoreCase("true")){
					bflag=true;
					break;
				   }
			   }
			   if(bflag){
				   failureReport("Validate Regularly Scheduled Hours text fields are Disbaled", "Regularly Scheduled Hours text fields are Enabled");
			   }else{
				   SuccessReport("Validate that C2 Admin User is not able to update Regularly Scheduled Hours", "C2 Admin User is not able to update Regularly Scheduled Hours");
				   SuccessReport("Validate Regularly Scheduled Hours text fields are Disbaled", "Regularly Scheduled Hours text fields are Disbaled");
			   }
			   
			   //C2 Admin User is not able to create YMP
			   click(EDTC_OR.PAIDTIMEOFFTAB,"PTO - Paid Time Off Tab");
			   waitForElementPresent(EDTC_OR.CREATEYMPBUTTON, "Create YMP Button");
			   isDisabled(EDTC_OR.CREATEYMPBUTTON, "Create YMP Button");
			   if(getAttribute(EDTC_OR.PTOELIGIBILITYDATETEXTFIELD,"readonly","PTO Eligibility Date Text Field").equalsIgnoreCase("true")){
				   SuccessReport("Validae whether PTO Eligibility Date Text Field is disabled", "PTO Eligibility Date Text Field is disabled");
			   }else{
				   SuccessReport("Validae whether PTO Eligibility Date Text Field is disabled", "PTO Eligibility Date Text Field is Enabled");
			   }
			
			   isDisabled(EDTC_OR.CARRYOVERTYPETEXTFIELD, "Carryover type Drop down");
			   isDisabled(EDTC_OR.ALLOCATIONTYPETEXTFIELD, "Allocation type Drop down");
			   blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	   
	   
   /********************************************************************************************************
    * Method 	Name	:	validateManagersToolsPage()
    * Author				:	
    * Description		:	This method validates the validates State Code
    * Date of creation 	:	
    * modifying person 	: 	
    * Date of modification	:
    ********************************************************************************************************/	
	   public void validateManagersToolsPage(String strEmpMgmtLinks,String strCorrectionMgmtLinks,String strEmpReportsLinks) throws Throwable{
		try {
			blnEventReport = true;
					//Employee Management Section
			isElementDisplayed(EDTC_OR.EMPLOYEEMGMTSECTION, "Employee Management Section");
			//This method validates the Links under Employee Management Section
			validateFieldNames(EDTC_OR.EMPMGMTLINKS,strEmpMgmtLinks);
			
			//Correction Management Section
			isElementDisplayed(EDTC_OR.CORRECTIONMGMTSECTION, "Correction Management Section");
			//This method validates the Links under Employee Management Section
			validateFieldNames(EDTC_OR.CORRECTIONMGMTLINKS,strCorrectionMgmtLinks);
			
			//Employee Reports Section
			isElementDisplayed(EDTC_OR.EMPREPORTSSECTION, "Employee Reports Section");
			//This method validates the Links under Employee Management Section
			validateFieldNames(EDTC_OR.EMPREPORTSLINKS,strEmpReportsLinks);
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	  
   /********************************************************************************************************
    * Method 	Name	:	validateFieldNames()
    * Author			:	
    * Description		:	This method validates the validates State Code
    * Date of creation 	:	
    * modifying person 	: 	
    * Date of modification	:
    ********************************************************************************************************/		   
	public void validateFieldNames(String locator,String strFieldNames) throws Throwable {
		try {
			blnEventReport = true;
			boolean	blnFlag = false;
			String[] arrayValues=strFieldNames.split(",");
			waitForElementPresent(By.xpath(locator), "");
			//Validate the Field Names
			List<WebElement> strValues = driver.findElements(By.xpath(locator));
			for (WebElement a : strValues) {
				blnFlag = false;
				for(int iLoop=0;iLoop<arrayValues.length;iLoop++)
				{
					if(a.getText().trim().replaceAll(" ", "").toUpperCase().contains(arrayValues[iLoop].replaceAll(" ", "").toUpperCase()))
					{
						blnFlag = true;
						break;
					}
				}
				if(!blnFlag)
					break;
			}
			if(blnFlag)
				SuccessReport("Validate whether the following Links/Label "+ "\"" +strFieldNames+ "\" are displayed","\"" + strFieldNames+ "\" Links/Label are displayed");
			else
				failureReport("Validate whether the following Links/Label "+ "\"" +strFieldNames+ "\" are displayed"," Links/Label are not displayed");
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	
  /********************************************************************************************************
	 * Method 	Name		:	adminDashboardHelpButtons()
	 * Author				:	
	 * Description			:	This method validates the validates State Code
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	:
  ********************************************************************************************************/
   public void managersDashboardHelpButtons(String managerToolsHelptext,String empMgmtHelptext,String correctionMgmtHelptext,String empReportsHelptext) throws Throwable{
	 try{
		 blnEventReport = true;
		 
		 //Validate Manager Tools Help Button
		 click(EDTC_OR.MANAGERTOOLSHELPBTN,"Administrator Tools Help Link");
		 Thread.sleep(lSleep_Low);
		 assertText(EDTC_OR.MANAGERTOOLSSHELPTEXT, managerToolsHelptext);
		 click(EDTC_OR.MANAGERTOOLSHELPCLOSEBTN,"Administrator Tools Help Close Button");
		 Thread.sleep(lSleep_Low);
		 
		 //Validate Employee Management Help Button
		 click(EDTC_OR.EMPLOYEEMGMTHELPBTN,"Employee Management Help Link");
		 Thread.sleep(lSleep_Low);
		 assertText(EDTC_OR.EMPLOYEEMGMTHELPTEXT, empMgmtHelptext);
		 click(EDTC_OR.EMPMGMTHELPCLOSEBTN,"Employee Management Help Close Button");
		 Thread.sleep(lSleep_Low);
		 
		 //Validate Correction Management Help Button
		 click(EDTC_OR.CORRECTIONMGMTHELPBTN,"Correction Management Help Link");
		 Thread.sleep(lSleep_Low);
		 assertText(EDTC_OR.CORRECTIONMGMTHELPTEXT, correctionMgmtHelptext);
		 click(EDTC_OR.CORRECTIONMGMTHELPCLOSEBTN,"Correction Management Help Close Button");
		 Thread.sleep(lSleep_Low);
		 
		 //Validate Employee Reports Help Button
		 click(EDTC_OR.EMPREPORTSHELPBTN,"Employee Reports Help Link");
		 Thread.sleep(lSleep_Low);
		 assertText(EDTC_OR.EMPREPORTSHELPTEXT, empReportsHelptext);
		 click(EDTC_OR.EMPREPORTSHELPCLOSEBTN,"Employee Reports Help Close Button");
		 Thread.sleep(lSleep_Low);
		
		 blnEventReport = false;
		} catch (Exception e) {
		throw e;
	}
 }
	
   /********************************************************************************************************
  	 * Method 	Name		:	adminDashboardHelpButtons()
  	 * Author				:	
  	 * Description			:	This method validates the validates State Code
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/	
	 public void backButton() throws Throwable{
		 try{
			 blnEventReport = true;
			 Thread.sleep(lSleep_Low);
			 if(browsertype.equalsIgnoreCase("Safari")){
				 click(EDTC_OR.BACKBUTTON,"Back Button");	 
			 }else{
				 JSClick(EDTC_OR.BACKBUTTON,"Back Button");
			 }
			 
			 blnEventReport = false;
			} catch (Exception e) {
			throw e;
		}
	 }
  
	 /********************************************************************************************************
  	 * Method 	Name		:	clickEmployeeTimeSummaryLink()
  	 * Author				:	
  	 * Description			:	This method validates the validates State Code
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/	
	public void clickEmployeeTimeSummaryLink() throws Throwable {
		try {
			blnEventReport = true;
			click(EDTC_OR.EMPTIMESUMMARYLINK,"Employee Time Summary Link");
			pageLoadingCompleted(EDTC_OR.PAGELAODER);
			Thread.sleep(lSleep_Low);
			String strText=getText(EDTC_OR.CHOOSEEMPLOYEEMODAL, "Select employee");
			if(strText.equalsIgnoreCase("Select employee")){
				SuccessReport("Validate the Choose employee modal dialog is displayed", "Choose employee modal dialog is displayed");
			}else{
				failureReport("Validate the Choose employee modal dialog is displayed", "Choose employee modal dialog is not displayed");
			}
			
			click(By.xpath(EDTC_OR.LINKTEXT+empName+"']"),empName+" Employee Link");
			pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
			//This method validates the Page title
			validatePageHeader(EDTC_OR.PAGEHEADER, "Employee: "+empName+" ("+empID+")");
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	
	 /********************************************************************************************************
  	 * Method 	Name		:	clickPTOSchedulerLink()
  	 * Author				:	
  	 * Description			:	This method validates the validates State Code
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/	
	public void clickPTOSchedulerLink(String strPTOSchedules) throws Throwable {
		try {
			blnEventReport = true;
			//This method clicks on  the PTO Scheduler Link
			click(EDTC_OR.PTOSCHEDULERLINK,"PTO Schedules Link");
			pageLoadingCompleted(EDTC_OR.PAGELAODER);
			Thread.sleep(lSleep_Low);
			//Validate the Choose Employee Group Modal Dialog 
			String strText=getText(EDTC_OR.CHOOSEEMPLOYEEGROUPMODAL, "Choose employee Group");
			if(strText.equalsIgnoreCase("Select employee group")){
				SuccessReport("Validate the Choose employee Group modal dialog is displayed", "Choose employee Group modal dialog is displayed");
			}else{
				failureReport("Validate the Choose employee Group modal dialog is displayed", "Choose employee Group modal dialog is not displayed");
			}
			
			//Validate the Exempt and Non Exempt Links Under Employee Group Modal Dialog
			isElementDisplayed(EDTC_OR.EXEMPTLINK, "Exempt Link under Employee Group Modal Dialog");
			isElementDisplayed(EDTC_OR.NONEXEMPTLINK, "Non-Exempt Link under Employee Group Modal Dialog");
			
			//Click on Either Exempt or Non Exempt
			click(By.xpath(EDTC_OR.PTOSCHEDULES+strPTOSchedules+"']"),strPTOSchedules+" PTO Schedule Link");
			//This method validates the Page title
			validatePageHeader(EDTC_OR.PAGEHEADER, "FTE Employees Time Off Report for: "+loginEmpName);
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	
	/********************************************************************************************************
  	 * Method 	Name		:	accessSupplementalPay()
  	 * Author				:	
  	 * Description			:	This method validates the validates State Code
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/		
	public void accessSupplementalPay(String strAuthCode) throws Throwable{
		try{
			blnEventReport = true;
			
			type(EDTC_OR.AUTHCODETEXTFIELD,"Invalid","Authorization code Text Field");
			click(EDTC_OR.SUBMITBTN, "Submit Button");
			assertText(EDTC_OR.INVALIDAUTHCODEERRORMSG, "Invalid Authorization code.");
	
			type(EDTC_OR.AUTHCODETEXTFIELD,strAuthCode,"Authorization code Text Field");
			click(EDTC_OR.SUBMITBTN, "Submit Button");
			
			//This method validates the Page Header
			validatePageHeader(EDTC_OR.PAGEHEADER, "SUPPLEMENTAL PAY");
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	
	
	/********************************************************************************************************
  	 * Method 	Name		:	editSuppPay()
  	 * Author				:	
  	 * Description			:	This method validates the validates State Code
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/		
	public void editSuppPay(String strWeekendDate,String strAmt,String strFundsCode) throws Throwable{
		try{
			blnEventReport = true;
			boolean blnFlag=false;
			selectByVisibleText(EDTC_OR.WEEKENDDATEDROPDOWN, strWeekendDate, "Weekend Date Drop Down");
			type(By.xpath(EDTC_OR.EDITPAYMENT+empID+"')]/../following-sibling::tr//span[text()='New']/../preceding-sibling::td//input[@name='payoramt']"),strAmt,"Amount(Dollars) Text Field");
			selectByVisibleText(By.xpath(EDTC_OR.EDITPAYMENT+empID+"')]/../following-sibling::tr//span[text()='New']/../preceding-sibling::td//select"),strFundsCode,"Funds Code Drop Down");
			click(By.xpath(EDTC_OR.EDITPAYMENT+empID+"')]/../following-sibling::tr//span[text()='New']/../following-sibling::td//input[@type='checkbox']"),"Update Checkbox");
			click(EDTC_OR.UPDATEPAYMENTSBTN,"Update Payments Button");
			pageLoadingCompleted(EDTC_OR.PAGELAODER);
			Thread.sleep(lSleep_Low);
			assertText(EDTC_OR.UPDATESUCCESSFULMSG, "Update(s) successful.");
			List<WebElement> elements=driver.findElements(By.xpath(EDTC_OR.EDITPAYMENT+"Waiting for approval')]"));
			for(int i=0;i<elements.size();i++){
				String strUser=elements.get(i).findElement(By.xpath(".//parent::td/parent::tr//preceding-sibling::tr//td")).getText();
				String strAmount=elements.get(i).findElement(By.xpath(".//parent::td//preceding-sibling::td/input")).getAttribute("value");
				Select select=new Select(elements.get(i).findElement(By.xpath(".//parent::td//preceding-sibling::td/select")));
				String strValue= select.getFirstSelectedOption().getText();
				if(strUser.contains(empID) && strAmount.equalsIgnoreCase(strAmt) && strValue.equalsIgnoreCase(strFundsCode)){
					SuccessReport("Validate if the request is displayed in the page", "Request is displayed, Amount: "+strAmount+", Fund:"+strValue);	
					blnFlag=true;
					break;
				}
			}if(!blnFlag){
				failureReport("Validate in the the associated supplemental pay approver's 'Approve Pay' screen, if the approval request is displayed", "Approval Request is not Displayed");
			}
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	
	/********************************************************************************************************
  	 * Method 	Name		:	approve_Deny_Override_SuppPay()
  	 * Author				:	
  	 * Description			:	This method validates the validates State Code
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/		
	public void approve_Deny_Override_SuppPay(String strWeekendDate,String strAmt,String strFundsCode,String strUpdateStatus,String strOverrideAmt,String strOverideFunds,String approverName) throws Throwable{
		try{
			blnEventReport = true;
			boolean blnFlag= false;
			click(EDTC_OR.APPROVEPAYMENTLINK, "Approve Payments Link");
			Thread.sleep(lSleep_Low);
			selectByVisibleText(EDTC_OR.WEEKENDDATEDROPDOWN, strWeekendDate, "Weekend Date Drop Down");
			List<WebElement> elements=driver.findElements(By.xpath(EDTC_OR.EDITPAYMENT+"Waiting Apv')]"));
			for(int i=0;i<elements.size();i++){
				String strUser=elements.get(i).findElement(By.xpath(".//parent::td//preceding-sibling::td[last()]")).getText();
				String strAmount=elements.get(i).findElement(By.xpath(".//parent::td//preceding-sibling::td/input")).getAttribute("value");
				Select select=new Select(elements.get(i).findElement(By.xpath(".//parent::td//preceding-sibling::td/select")));
				String strValue= select.getFirstSelectedOption().getText();
				if(strUser.contains(empID) && strAmount.equalsIgnoreCase(strAmt) && strValue.equalsIgnoreCase(strFundsCode)){
					blnFlag=true;
					SuccessReport("Validate in the the associated supplemental pay approver's 'Approve Pay' screen, if the approval request is displayed", "Approval Request is Displayed, Amount: "+strAmount+", Fund:"+strValue);
					elements.get(i).findElement(By.xpath(".//parent::td//following-sibling::td//label[contains(text(),'"+strUpdateStatus+"')]/input")).click();
					if(strUpdateStatus.equalsIgnoreCase("Override")){
						elements.get(i).findElement(By.xpath(".//parent::td//parent::tr/following-sibling::tr[1]//input")).sendKeys(Keys.chord(Keys.CONTROL, "a"));
						elements.get(i).findElement(By.xpath(".//parent::td//parent::tr/following-sibling::tr[1]//input")).sendKeys("");
						elements.get(i).findElement(By.xpath(".//parent::td//parent::tr/following-sibling::tr[1]//input")).sendKeys(strOverrideAmt);
						Select s=new Select(elements.get(i).findElement(By.xpath(".//parent::td//parent::tr/following-sibling::tr[1]//select")));
						s.selectByVisibleText(strOverideFunds);
						SuccessReport("Enter new Amount and Funds code", "Successfully entered "+strOverrideAmt+" and selected "+strOverideFunds+" funds");
					}
					SuccessReport("Click", "Successfully clicked on "+strUpdateStatus+" Radio Button");
					click(EDTC_OR.UPDATEPAYMENTSBTN,"Update Payment Button");
					pageLoadingCompleted(EDTC_OR.PAGELAODER);
					Thread.sleep(lSleep_Low);
					assertText(EDTC_OR.UPDATESUCCESSFULMSG, "Update(s) successful.");
					break;
				}
			}if(!blnFlag){
				failureReport("Validate in the the associated supplemental pay approver's 'Approve Pay' screen, if the approval request is displayed", "Approval Request is not Displayed");
			}else{
				blnFlag=false;
				if(strUpdateStatus.equalsIgnoreCase("Approve")){
					strUpdateStatus="Approved";
				}else if(strUpdateStatus.equalsIgnoreCase("Override")){
					strUpdateStatus="Overridden";
				}else if(strUpdateStatus.equalsIgnoreCase("Deny")){
					strUpdateStatus="Denied";
				}
				String strUser="";
				elements=driver.findElements(By.xpath(EDTC_OR.EDITPAYMENT+strUpdateStatus+"') and contains(text(),'"+approverName+"')]"));
				for(int i=0;i<elements.size();i++){
					if(strUpdateStatus.equalsIgnoreCase("Overridden")){
						strUser=elements.get(i).findElement(By.xpath(".//parent::td//parent::tr/preceding-sibling::tr/td[1]")).getText();
						String strAmount=elements.get(i).findElement(By.xpath(".//parent::td//preceding-sibling::td/input")).getAttribute("value");
						Select select=new Select(elements.get(i).findElement(By.xpath(".//parent::td//preceding-sibling::td/select")));
						String strValue= select.getFirstSelectedOption().getText();
						if(strUser.contains(empID) && strAmount.equalsIgnoreCase(strOverrideAmt) && strValue.equalsIgnoreCase(strOverideFunds)){
							SuccessReport("Validate whether the status is changed to "+strUpdateStatus, "Status is changed to "+strUpdateStatus+" Amount: "+strAmount+" Funds Code: "+strValue);	
							blnFlag=true;
							break;
						}
					}else{
						strUser=elements.get(i).findElement(By.xpath(".//parent::td//preceding-sibling::td[last()]")).getText();
						String strAmount=elements.get(i).findElement(By.xpath(".//parent::td//preceding-sibling::td/input")).getAttribute("value");
						Select select=new Select(elements.get(i).findElement(By.xpath(".//parent::td//preceding-sibling::td/select")));
						String strValue= select.getFirstSelectedOption().getText();
						if(strUser.contains(empID) && strAmount.equalsIgnoreCase(strAmt) && strValue.equalsIgnoreCase(strFundsCode)){
							SuccessReport("Validate whether the status is changed to "+strUpdateStatus, "Status is changed to "+strUpdateStatus+" Amount: "+strAmount+" Funds Code: "+strValue);
							blnFlag=true;
							break;
						}
					}
					
				}if(!blnFlag){
					failureReport("Validate whether the status is changed to "+strUpdateStatus, "Status is not changed");
				}
			}
		blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	
	/********************************************************************************************************
  	 * Method 	Name		:	validateSuppPayStatus()
  	 * Author				:	
  	 * Description			:	This method validates the validates State Code
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/	
	public void validateSuppPayStatus(String strWeekendDate,String strAmt,String strFundsCode,String strUpdateStatus,String approverName,String strOverrideAmt,String strOverideFunds) throws Throwable{
		try{
			blnEventReport = true;
			boolean blnFlag=false;
			if(strUpdateStatus.equalsIgnoreCase("Approve")){
				strUpdateStatus="Approved";
			}else if(strUpdateStatus.equalsIgnoreCase("Override")){
				strUpdateStatus="Overridden";
			}else if(strUpdateStatus.equalsIgnoreCase("Deny")){
				strUpdateStatus="Denied";
			}
			selectByVisibleText(EDTC_OR.WEEKENDDATEDROPDOWN, strWeekendDate, "Weekend Date Drop Down");
			String strUser="";
			List<WebElement> elements=driver.findElements(By.xpath(EDTC_OR.ELEMENTTEXT1+strUpdateStatus+"') and contains(text(),'"+approverName+"')]"));
			for(int i=0;i<elements.size();i++){
				if(strUpdateStatus.equalsIgnoreCase("Overridden")){
					strUser=elements.get(i).findElement(By.xpath(".//parent::td//parent::tr/preceding-sibling::tr[2]/td[1]")).getText();
					String strAmount=elements.get(i).findElement(By.xpath(".//parent::td//preceding-sibling::td/input")).getAttribute("value");
					Select select=new Select(elements.get(i).findElement(By.xpath(".//parent::td//preceding-sibling::td/select")));
					String strValue= select.getFirstSelectedOption().getText();
					if(strUser.contains(empID) && strAmount.equalsIgnoreCase(strOverrideAmt) && strValue.equalsIgnoreCase(strOverideFunds)){
						SuccessReport("Validate whether the status is changed to "+strUpdateStatus, "Status is changed to "+strUpdateStatus+" Amount: "+strAmount+", Funds Code: "+strFundsCode);
						blnFlag=true;
						break;
					}
				}else{
					strUser=elements.get(i).findElement(By.xpath(".//parent::td/parent::tr//preceding-sibling::tr//td")).getText();
					String strAmount=elements.get(i).findElement(By.xpath(".//parent::td//preceding-sibling::td/input")).getAttribute("value");
					Select select=new Select(elements.get(i).findElement(By.xpath(".//parent::td//preceding-sibling::td/select")));
					String strValue= select.getFirstSelectedOption().getText();
					if(strUser.contains(empID) && strAmount.equalsIgnoreCase(strAmt) && strValue.equalsIgnoreCase(strFundsCode)){
						SuccessReport("Validate whether the status is changed to "+strUpdateStatus, "Status is changed to "+strUpdateStatus+" Amount: "+strAmount+", Funds Code: "+strFundsCode);
						blnFlag=true;
						break;
					}
				}
			}if(blnFlag){
				SuccessReport("Validate whether the status is changed to "+strUpdateStatus, "Status is changed to "+strUpdateStatus);
				
			}else{
				failureReport("Validate whether the status is changed to "+strUpdateStatus, "Status is not changed");
			}
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	
	
	/********************************************************************************************************
  	 * Method 	Name		:	suppPayPageErrorMsg()
  	 * Author				:	
  	 * Description			:	This method validates the validates State Code
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/		
	public void suppPayPageErrorMsg(String strWeekendDate,String strAmt,String strFundsCode,String strHrs) throws Throwable{
		try{
			
			click(EDTC_OR.EDITPAYMENTLINK, "Edit Payment Links");
			blnEventReport = true;
			strAmt=String.valueOf(Integer.parseInt(strAmt)+2000);
			strHrs=String.valueOf(Integer.parseInt(strHrs)+10);
			
			selectByVisibleText(EDTC_OR.WEEKENDDATEDROPDOWN, strWeekendDate, "Weekend Date Drop Down");
			
			//Error Message for not selecting Funds Code
			click(By.xpath(EDTC_OR.EDITPAYMENT+empID+"')]/../following-sibling::tr//span[text()='New']/../following-sibling::td//input[@type='checkbox']"),"Update Checkbox");
			click(EDTC_OR.UPDATEPAYMENTSBTN,"Update Payments Button");
			Thread.sleep(lSleep_Low);
			assertText(EDTC_OR.IMPROPERPAYMENTERRORMFG, "Improper PAYMENT amount entered! Value equals to zero. ["+empName+"]");
			assertText(EDTC_OR.VALIDFUNDSCODEERRORMFG, "You must enter a valid Funds Code. ["+empName+"]");
			
		
			//Error Message when improper payment amount is entered (greater than user limit of dollars)
			selectByVisibleText(By.xpath(EDTC_OR.EDITPAYMENT+empID+"')]/../following-sibling::tr//span[text()='New']/../preceding-sibling::td//select"),strFundsCode,"Funds Code Drop Down");
			type(By.xpath(EDTC_OR.EDITPAYMENT+empID+"')]/../following-sibling::tr//span[text()='New']/../preceding-sibling::td//input[@name='payoramt']"),strAmt,"Amount(Dollars) Text Field");
			click(EDTC_OR.UPDATEPAYMENTSBTN,"Update Payments Button");
			Thread.sleep(lSleep_Low);
			assertText(EDTC_OR.IMPROPERPAYMENTERRORMFG, "Improper PAYMENT amount entered! Value greater than set payment and authorization limits. ["+empName+"]");
			
			//Error Message when improper payment amount is entered (greater than user limit of hours)
			selectByVisibleText(By.xpath(EDTC_OR.EDITPAYMENT+empID+"')]/../following-sibling::tr//span[text()='New']/../preceding-sibling::td//select"),"* PrmPay 10% on REG HOURS","Funds Code Drop Down");
			type(By.xpath(EDTC_OR.EDITPAYMENT+empID+"')]/../following-sibling::tr//span[text()='New']/../preceding-sibling::td//input[@name='payoramt']"),strHrs,"Amount(Dollars) Text Field");
			click(EDTC_OR.UPDATEPAYMENTSBTN,"Update Payments Button");
			Thread.sleep(lSleep_Low);
			assertText(EDTC_OR.IMPROPERPAYMENTERRORMFG, "Improper HOURLY amount entered! Value greater than set hourly and authorization limits. ["+empName+"]");
			
			if(!browsertype.equalsIgnoreCase("Safari")){
				///Error Message when negative values are entered
				selectByVisibleText(By.xpath(EDTC_OR.EDITPAYMENT+empID+"')]/../following-sibling::tr//span[text()='New']/../preceding-sibling::td//select"),strFundsCode,"Funds Code Drop Down");
				type(By.xpath(EDTC_OR.EDITPAYMENT+empID+"')]/../following-sibling::tr//span[text()='New']/../preceding-sibling::td//input[@name='payoramt']"),"-123","Amount(Dollars) Text Field");
				click(EDTC_OR.UPDATEPAYMENTSBTN,"Update Payments Button");
				Thread.sleep(lSleep_Low);
				assertText(EDTC_OR.IMPROPERPAYMENTERRORMFG, "Improper PAYMENT amount entered!");
			}
			
				
			///Error Message when more than one decimal point entered in amount
			type(By.xpath(EDTC_OR.EDITPAYMENT+empID+"')]/../following-sibling::tr//span[text()='New']/../preceding-sibling::td//input[@name='payoramt']"),"10.0.01","Amount(Dollars) Text Field");
			click(EDTC_OR.UPDATEPAYMENTSBTN,"Update Payments Button");
			Thread.sleep(lSleep_Low);
			assertText(EDTC_OR.IMPROPERPAYMENTERRORMFG, "Improper PAYMENT amount entered!");
			
			
			//Error Message when non numeric type characters are entered for amount
			type1(By.xpath(EDTC_OR.EDITPAYMENT+empID+"')]/../following-sibling::tr//span[text()='New']/../preceding-sibling::td//input[@name='payoramt']"),"abs","Amount(Dollars) Text Field");
			click(EDTC_OR.UPDATEPAYMENTSBTN,"Update Payments Button");
			Thread.sleep(lSleep_Low);
			assertText(EDTC_OR.IMPROPERPAYMENTERRORMFG, "Improper PAYMENT amount entered!");
			
			//Error Message when Amount Text Field is Blank
			type1(By.xpath(EDTC_OR.EDITPAYMENT+empID+"')]/../following-sibling::tr//span[text()='New']/../preceding-sibling::td//input[@name='payoramt']"),"","Amount(Dollars) Text Field");
			click(EDTC_OR.UPDATEPAYMENTSBTN,"Update Payments Button");
			Thread.sleep(lSleep_Low);
			assertText(EDTC_OR.IMPROPERPAYMENTERRORMFG, "Improper PAYMENT amount entered! Value less than or equal to zero. ["+empName+"]");
			
			
			
			
			
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}	 
	
	/********************************************************************************************************
  	 * Method 	Name		:	suppPayPrintFormat()
  	 * Author				:	
  	 * Description			:	This method validates the validates State Code
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/	
	public void suppPayPrintFormat(String strWeekendDate) throws Throwable{
		try{
			blnEventReport = true;
			selectByVisibleText(EDTC_OR.WEEKENDDATEDROPDOWN, strWeekendDate, "Weekend Date Drop Down");
			click(EDTC_OR.PRINTBTN_SUPPPAYPAGE, "Print Button");
			
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	
	/********************************************************************************************************
  	 * Method 	Name		:	suppPayHelpButtons()
  	 * Author				:	
  	 * Description			:	This method validates the validates State Code
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/	
	public void suppPayHelpButtons(String suppPayHelpText,String showAllHelptext) throws Throwable{
		try{
			blnEventReport = true;
			 //Validate Supplemental Pay Help Text
			 click(EDTC_OR.SUPPPAYHELPBUTTON, "Supplemental Pay Help Link");
			 assertText(EDTC_OR.SUPPPAYHELPTEXT, suppPayHelpText);
			 click(EDTC_OR.SUPPPAYHELPCLOSEBTN,"Supplemental Pay Help Close Button");
			 Thread.sleep(lSleep_Low);
			 
			//Click on the Approve Payments Link
			click(EDTC_OR.APPROVEPAYMENTLINK, "Approve Payment Links");
			
			//Validate Supplemental Pay Help Text
			click(EDTC_OR.SHOWALLHELPBUTTON, "Show All Help Link");
			assertText(EDTC_OR.MODALDIALOGTEXT, showAllHelptext);
			click(EDTC_OR.CLOSEBTN,"Show All Help Close Button");
			Thread.sleep(lSleep_Low);
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
  	 * Method 	Name		:	suppPayHelpButtons()
  	 * Author				:	
  	 * Description			:	This method validates the validates State Code
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/	
	public void suppPayPageValidation(String editPaymentTableHeadings,String approvePaymentTableHeadings,String suppPayReportTableHeadings,String fundsCodeDDValues) throws Throwable{
		try{
			blnEventReport = true;
			
			
			//This method validates the Table Headings
			verifyTableHeading(By.xpath(EDTC_OR.EDITPAYMENTTABLE_SUPPPAY), editPaymentTableHeadings);
			
			//Validate the Following Links
			isElementDisplayed(EDTC_OR.APPROVEPAYMENTLINK, "Approve Payment Links");
			isElementDisplayed(EDTC_OR.EDITPAYMENTLINK, "Edit Payment Links");
			
			//Validate the Clear, Print Format and Update Payments Button
			isElementDisplayed(EDTC_OR.CLEARBTN, "Clear Button");
			isElementDisplayed(EDTC_OR.PRINTBTN_SUPPPAYPAGE, "Print Button");
			isElementDisplayed(EDTC_OR.UPDATEPAYMENTSBTN, "Update Payments Button");
			isElementDisplayed(EDTC_OR.PRINTHISTORY_BTN, "Print History Button");
			isElementDisplayed(EDTC_OR.WEEKENDDATEDROPDOWN, "Weekend Date Drop Down");
			
			//Validate the Values in the Funds Code Drop Down
			validateDropDownValues(By.xpath(EDTC_OR.EDITPAYMENT+empID+"')]/../following-sibling::tr//span[text()='New']/../preceding-sibling::td//select"),fundsCodeDDValues,"Funds Code Drop Down");
			
			Thread.sleep(lSleep_Low);
			//Validate the Values in the Funds Code Drop Down
			validateDropDownValue(By.xpath(EDTC_OR.EDITPAYMENT+empID+"')]/../following-sibling::tr//span[text()='New']/../preceding-sibling::td//select"),"_ENTER_FUNDS_CODE_HERE_","Funds Code Drop Down");
			
			//Click Print Button
			click(EDTC_OR.PRINTBTN_SUPPPAYPAGE, "Print Button");
			//This method validates the Page Header
			validatePageHeader(EDTC_OR.SUPPPAY_PAGEHEADER, "Supplemental Pay Report For Payer: "+loginEmpName);
			if(isElementPresent(By.xpath(EDTC_OR.SUPPPAY_REPORTTABLE), suppPayReportTableHeadings)){
				//This method validates the Table Headings
				verifyTableHeading(By.xpath(EDTC_OR.SUPPPAY_REPORTTABLE), suppPayReportTableHeadings);
			}
			click(EDTC_OR.BACKARROWBTN, "Back Button");
			//This method validates the Page Header
			validatePageHeader(EDTC_OR.PAGEHEADER, "SUPPLEMENTAL PAY");
			
			//Click Print History Button
			click(EDTC_OR.PRINTHISTORY_BTN, "Print History Button");
			//This method validates the Page Header
			validatePageHeader(EDTC_OR.SUPPPAY_PAGEHEADER, "Supplemental Pay Report For Payer: "+loginEmpName);
			if(isElementPresent(By.xpath(EDTC_OR.SUPPPAY_REPORTTABLE), suppPayReportTableHeadings)){
				//This method validates the Table Headings
				verifyTableHeading(By.xpath(EDTC_OR.SUPPPAY_REPORTTABLE), suppPayReportTableHeadings);
			}
			click(EDTC_OR.BACKARROWBTN, "Back Button");
			//This method validates the Page Header
			validatePageHeader(EDTC_OR.PAGEHEADER, "SUPPLEMENTAL PAY");
			
			
			//Click on the Approve Payments Link
			click(EDTC_OR.APPROVEPAYMENTLINK, "Approve Payment Links");
			//This method validates the Table Headings
			verifyTableHeading(By.xpath(EDTC_OR.APPROVEPAYMENTTABLE_SUPPPAY), approvePaymentTableHeadings);
			//Validate the Show All and Approve Link
			isElementDisplayed(EDTC_OR.SHOWALLLINK, "Show all Link");
			isElementDisplayed(EDTC_OR.APPROVEALLLINK, "Approve all Link");
			
			//Validate the Clear, Print Format and Update Payments Button
			isElementDisplayed(EDTC_OR.CLEARBTN, "Clear Button");
			isElementDisplayed(EDTC_OR.PRINTBTN_SUPPPAYPAGE, "Print Button");
			isElementDisplayed(EDTC_OR.UPDATEPAYMENTSBTN, "Update Payments Button");
			isElementDisplayed(EDTC_OR.PRINTHISTORY_BTN, "Print History Button");
			isElementDisplayed(EDTC_OR.WEEKENDDATEDROPDOWN, "Weekend Date Drop Down");
			
			//Click Print Button
			click(EDTC_OR.PRINTBTN_SUPPPAYPAGE, "Print Button");
			//This method validates the Page Header
			validatePageHeader(EDTC_OR.SUPPPAY_PAGEHEADER, "Supplemental Pay Report For Approver: "+loginEmpName);
			if(isElementPresent(By.xpath(EDTC_OR.SUPPPAY_REPORTTABLE), suppPayReportTableHeadings)){
				//This method validates the Table Headings
				verifyTableHeading(By.xpath(EDTC_OR.SUPPPAY_REPORTTABLE), suppPayReportTableHeadings);
			}
			click(EDTC_OR.BACKARROWBTN, "Back Button");
			//This method validates the Page Header
			validatePageHeader(EDTC_OR.PAGEHEADER, "SUPPLEMENTAL PAY");
			
			//Click on the Approve Payments Link
			click(EDTC_OR.APPROVEPAYMENTLINK, "Approve Payment Links");
			//Click Print History Button
			click(EDTC_OR.PRINTHISTORY_BTN, "Print History Button");
			//This method validates the Page Header
			validatePageHeader(EDTC_OR.SUPPPAY_PAGEHEADER, "Supplemental Pay Report For Approver: "+loginEmpName);
			if(isElementPresent(By.xpath(EDTC_OR.SUPPPAY_REPORTTABLE), suppPayReportTableHeadings)){
				//This method validates the Table Headings
				verifyTableHeading(By.xpath(EDTC_OR.SUPPPAY_REPORTTABLE), suppPayReportTableHeadings);
			}
			click(EDTC_OR.BACKARROWBTN, "Back Button");
			//This method validates the Page Header
			validatePageHeader(EDTC_OR.PAGEHEADER, "SUPPLEMENTAL PAY");
			
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
  	 * Method 	Name		:	enterEmpBasicInfo()
  	 * Author				:	
  	 * Description			:	This method validates the validates State Code
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/
	public void enterEmpBasicInfo(String SheetName,int iLoop) throws Throwable{
		try{
			blnEventReport = true;
			  String strEmpName=Excelobject.getCellData(SheetName, "Employee Name", iLoop);
			  String strEmpEmail=Excelobject.getCellData(SheetName, "Employee Email", iLoop);
			  String strEmpTimekeeper1=Excelobject.getCellData(SheetName, "TimeKeeper1", iLoop);
			  String strEmpTimekeeper2=Excelobject.getCellData(SheetName, "TimeKeeper2", iLoop);
			  String strAddlEmp_GrantSuppPay=Excelobject.getCellData(SheetName, "Additional Employee who can grant supplemental pay", iLoop);
			  String strNoPTOEmail=Excelobject.getCellData(SheetName, "No PTO Email", iLoop);
			  String strNoGenEmail=Excelobject.getCellData(SheetName, "No Gen Email", iLoop);
			  String strNoTimeSheetReminder=Excelobject.getCellData(SheetName, "No routine timesheet reminders", iLoop);
			  String strHRMgr=Excelobject.getCellData(SheetName, "HR Manager", iLoop);
			  String strCompany=Excelobject.getCellData(SheetName, "Company", iLoop);
			  String strPosition=Excelobject.getCellData(SheetName, "Position", iLoop);
			  String strInputType=Excelobject.getCellData(SheetName, "Input Type", iLoop);
			  String strPayType=Excelobject.getCellData(SheetName, "Pay Type", iLoop);
			  String strLevel=Excelobject.getCellData(SheetName, "Level", iLoop);
			  String strStateCode=Excelobject.getCellData(SheetName, "State Code", iLoop);
			  String strSickLeaveOverride=Excelobject.getCellData(SheetName, "Sick Leave Override", iLoop);
			  String strTPSPrivileges=Excelobject.getCellData(SheetName, "TPS Privileges", iLoop);
			  String strHolidayTemplate=Excelobject.getCellData(SheetName, "Holiday Template", iLoop);
			  String strScheduledHours=Excelobject.getCellData(SheetName, "Scheduled Hours", iLoop);
			  
			  Thread.sleep(lSleep_Low);
			  waitForElementPresent(EDTC_OR.EMPNAMETEXTFIELD,"Employe Name Text Field");
			  //If Employee Name is not Empty enter the details
			  if(!strEmpName.isEmpty()){
				  type(EDTC_OR.EMPNAMETEXTFIELD, strEmpName, "Employe Name Text Field");
			  }
			  //If Employee Email is not Empty enter the details
			  if(!strEmpEmail.isEmpty()){
				  type(EDTC_OR.EMPEMAILTEXTFIELD, strEmpEmail, "Employe Email Text Field");
			  }
			
			  //If Timekeeper1 is not Empty enter the details
			  if(!strEmpTimekeeper1.isEmpty()){
				  selectByVisibleText(EDTC_OR.TIMEKEEPERDROPDOWN1, strEmpTimekeeper1, "Timekeeper Drop Down");
//				  
//				  if(getAttribute(EDTC_OR.TIMEKEEPERIDTEXTFIELD1, "value", "TimekeeperID Text Field").equalsIgnoreCase(SQL_Queries.getEmployeeID(strEmpTimekeeper1))){
//					  SuccessReport("Validate whether the Employe ID of the Timekeeper is autopopulated in Timekeeper ID text field", "Employe ID of the Timekeeper is autopopulated in Timekeeper ID text field");
//				  }else{
//					  failureReport("Validate whether the Employe ID of the Timekeeper is autopopulated in Timekeeper ID text field", "Employe ID of the Timekeeper is not autopopulated in Timekeeper ID text field");
//				  }
			  }
			  
			  //If strEmpTimekeeper2 is not Empty enter the details
			  if(!strEmpTimekeeper2.isEmpty()){
				  selectByVisibleText(EDTC_OR.TIMEKEEPERDROPDOWN2, strEmpTimekeeper2, "TimekeeperID Text Field");
				  
//				  if(getAttribute(EDTC_OR.TIMEKEEPERIDTEXTFIELD2, "value", "TimekeeperID Text Field").equalsIgnoreCase(SQL_Queries.getEmployeeID(strEmpTimekeeper2))){
//					  SuccessReport("Validate whether the Employe ID of the Timekeeper is autopopulated in Timekeeper ID text field", "Employe ID of the Timekeeper is autopopulated in Timekeeper ID text field");
//				  }else{
//					  failureReport("Validate whether the Employe ID of the Timekeeper is autopopulated in Timekeeper ID text field", "Employe ID of the Timekeeper is not autopopulated in Timekeeper ID text field");
//				  }
			  }
			  
			  //If Additional Employee who can grant supplemental pay is not Empty enter the details
			  if(!strAddlEmp_GrantSuppPay.isEmpty()){
				  type(EDTC_OR.SUPPPAYAPPROVERTEXTFIELD, strAddlEmp_GrantSuppPay, "Additional Employee who can grant supplemental pay Text Field");
			  }
			 
			  //If No PTO Email Yes, Check the Checkbox
			  if(strNoPTOEmail.equalsIgnoreCase("Yes")){
				  if(!isChecked(EDTC_OR.NOPTOEMAILCHECKBOX, "No PTO Email Checkbox")){
					click(EDTC_OR.NOPTOEMAILCHECKBOX, "No PTO Email Checkbox");
				  }
			  }else if(strNoPTOEmail.equalsIgnoreCase("No")){
				  if(isChecked(EDTC_OR.NOPTOEMAILCHECKBOX, "No PTO Email Checkbox")){
						click(EDTC_OR.NOPTOEMAILCHECKBOX, "No PTO Email Checkbox");
				  }  
			  }
			  
			  //If No Gen Email Yes, Check the Checkbox
			  if(strNoGenEmail.equalsIgnoreCase("Yes")){
				  if(!isChecked(EDTC_OR.NOGENEMAILCHECKBOX, "No Gen Email Checkbox")){
					click(EDTC_OR.NOGENEMAILCHECKBOX, "No Gen Email Checkbox");
				  }
			  }else if(strNoGenEmail.equalsIgnoreCase("No")){
				  if(isChecked(EDTC_OR.NOGENEMAILCHECKBOX, "No Gen Email Checkbox")){
						click(EDTC_OR.NOGENEMAILCHECKBOX, "No Gen Email Checkbox");
				  }  
			  }
			  
			  //If No routine timesheet reminders Checkbox flag is Yes, Check the Checkbox
			  if(strNoTimeSheetReminder.equalsIgnoreCase("Yes")){
				  if(!isChecked(EDTC_OR.NOTIMESHEETREMINDERCHECKBOX, "No routine timesheet reminders Checkbox")){
					click(EDTC_OR.NOTIMESHEETREMINDERCHECKBOX, "No routine timesheet reminders Checkbox");
				  }
			  }else if(strNoTimeSheetReminder.equalsIgnoreCase("No")){
				  if(isChecked(EDTC_OR.NOTIMESHEETREMINDERCHECKBOX, "No routine timesheet reminders Checkbox")){
						click(EDTC_OR.NOTIMESHEETREMINDERCHECKBOX, "No routine timesheet reminders Checkbox");
				  }  
			  }
			  
			  //If HR Manager Checkbox flag is Yes, Check the Checkbox
			  if(strHRMgr.equalsIgnoreCase("Yes")){
				  if(!isChecked(EDTC_OR.HRMGRCHECKBOX, "HR Manager Checkbox")){
					click(EDTC_OR.HRMGRCHECKBOX, "HR Manager Checkbox");
				  }
			  }else if(strHRMgr.equalsIgnoreCase("No")){
				  if(isChecked(EDTC_OR.HRMGRCHECKBOX, "HR Manager Checkbox")){
						click(EDTC_OR.HRMGRCHECKBOX, "HR Manager Checkbox");
				  }  
			  }

			  //If Company is not Empty enter the details
			  if(!strCompany.isEmpty()){
				  selectByVisibleText(EDTC_OR.COMPANYDROPDOWN, strCompany, "Company Drop Down");
			  }
			  //If Position is not Empty enter the details
			  if(!strPosition.isEmpty()){
				  selectByVisibleText(EDTC_OR.POSITIONDROPDOWN, strPosition, "Position Drop Down");
			  }
			  //If Input Type is not Empty enter the details
			  if(!strInputType.isEmpty()){
				  selectByVisibleText(EDTC_OR.INPUTTYPEDROPDOWN, strInputType, "Input type Drop Down");
			  }
			  //If Input Type is not Empty enter the details
			  if(!strPayType.isEmpty()){
				  selectByVisibleText(EDTC_OR.PAYTYPEDROPDOWN, strPayType, "Pay Type Drop Down");
			  }
			  //If Level is not Empty enter the details
			  if(!strLevel.isEmpty()){
				  selectByVisibleText(EDTC_OR.LEVELDROPDOWN, strLevel, "Level Drop Down");
			  }
			  //If State Code is not Empty enter the details
			  if(!strStateCode.isEmpty()){
				  selectByVisibleText(EDTC_OR.STATECODEDROPDOWN, strStateCode, "State Code Drop Down");
			  }
			  //If State Code is not Empty enter the details
			  if(!strStateCode.isEmpty()){
				  selectByVisibleText(EDTC_OR.STATECODEDROPDOWN, strStateCode, "State Code Drop Down");
			  }
			  //If Override Sick Leave is not Empty enter the details
			  if(!strSickLeaveOverride.isEmpty()){
				  selectByVisibleText(EDTC_OR.SICKLEAVEOVERRIDEDROPDOWN, strSickLeaveOverride, "Override Sick Leave Drop Down");
			  }
			  //If TPS Privileges is not Empty enter the details
			  if(!strTPSPrivileges.isEmpty()){
				  selectByVisibleText(EDTC_OR.TPSPRIVILEGESDROPDOWN, strTPSPrivileges, "TPS Privileges Drop Down");
			  }
			  //If Holiday Template is not Empty enter the details
			  if(!strHolidayTemplate.isEmpty()){
				  selectByVisibleText(EDTC_OR.HOLIDAYTEMPLATEDROPDOWN, strHolidayTemplate, "Holiday Template Drop Down");
			  }
			  
			  Thread.sleep(lSleep_Low);
			  if(!strScheduledHours.isEmpty()){
				  String[] arrayValues=strScheduledHours.split(",");
				  List<WebElement> elements=driver.findElements(EDTC_OR.REGULARLYSCHEDULEDHRS);
				  for(int i=0;i<arrayValues.length;i++){
					  if(!arrayValues[i].isEmpty()){
					    elements.get(i).clear(); 
					    Thread.sleep(lSleep_Low);
						elements.get(i).sendKeys(arrayValues[i]);  
					  }
				  }  
			  }
			  
			  SuccessReport("Enter the Regular Scheduled Hours for the Employee", "Regular Scheduled Hours are entered");
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	
	/********************************************************************************************************
  	 * Method 	Name		:	setPayer_Approver()
  	 * Author				:	
  	 * Description			:	This method Sets the Approver or Payer
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/
	public void setPayer_Approver(String SheetName,int iLoop) throws Throwable {
		try {
			blnEventReport = true;
			String strPaymentLimit=Excelobject.getCellData(SheetName, "Payment Limit", iLoop);
			String strAuthCode=Excelobject.getCellData(SheetName, "Authorization Code", iLoop);
			String strApprover1=Excelobject.getCellData(SheetName, "Approver1", iLoop);
			String strApprover2=Excelobject.getCellData(SheetName, "Approver2", iLoop);
			String strApprover3=Excelobject.getCellData(SheetName, "Approver3", iLoop);
			
			//Click on the Supplemental Pay Tab
			click(EDTC_OR.SUPPPAYTAB, "Supplemental Pay Tab");
			Thread.sleep(lSleep_Low);
			//If Payment limit for employee acting as approver is not Empty enter the details
			if(!strPaymentLimit.isEmpty()){
				type(EDTC_OR.PAYMENTLIMITTEXTFIELD, strPaymentLimit, "Payment limit for employee acting as approver Text Field");
			}	
			//If Authorization code to act as supplemental Payer/Approver is not Empty enter the details
			if(!strAuthCode.isEmpty()){
				type(EDTC_OR.AUTHCODETOACTASAPPROVERTEXTFIELD, strAuthCode, "Authorization code to act as supplemental Payer/Approver Text Field");
			}	
			//If Employee who can approve payments created by this employee (#1) is not Empty enter the details
			if(!strApprover1.isEmpty()){
				type(EDTC_OR.APPROVEPAYMENTSTEXTFIELD1, strApprover1, "Employee who can approve payments created by this employee (#1) Text Field");
			}
			//If Employee who can approve payments created by this employee (#2) is not Empty enter the details
			if(!strApprover2.isEmpty()){
				type(EDTC_OR.APPROVEPAYMENTSTEXTFIELD2, strApprover2, "Employee who can approve payments created by this employee (#2) Text Field");
			}
			//If Employee who can approve payments created by this employee (#3) is not Empty enter the details
			if(!strApprover3.isEmpty()){
				type(EDTC_OR.APPROVEPAYMENTSTEXTFIELD3, strApprover3, "Employee who can approve payments created by this employee (#3) Text Field");
			}
			Thread.sleep(lSleep_Low);
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	
	/********************************************************************************************************
  	 * Method 	Name		:	enterPTODetails()
  	 * Author				:	
  	 * Description			:	This method Sets the Approver or Payer
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/	
	public void enterPTODetails(String SheetName,int iLoop) throws Throwable{
		try{
			blnEventReport = true;
			String strPTOEligibilityDate=Excelobject.getCellData(SheetName, "PTO Eigibility Date", iLoop);
			String strCarryOverType=Excelobject.getCellData(SheetName, "Carryover Type", iLoop);
			String strAllocationType=Excelobject.getCellData(SheetName, "Allocation Type", iLoop);
			String strAmount=Excelobject.getCellData(SheetName, "Amount", iLoop);
			String strAnnualBaseSal=Excelobject.getCellData(SheetName, "Annual Base Salary", iLoop);
			
			//Click on the Paid Time Off Tab
			click(EDTC_OR.PAIDTIMEOFFTAB, "Paid Time Off Tab");
			Thread.sleep(lSleep_Low);
			//If PTO Eligibility Date is not Empty enter the details
			if(!strPTOEligibilityDate.isEmpty()){
				type(EDTC_OR.PTOELIGIBILITYDATETEXTFIELD, strPTOEligibilityDate, "PTO Eligibility Date Text Field");
			}
			//If Carryover is not Empty enter the details
			if(!strCarryOverType.isEmpty()){
				type(EDTC_OR.CARRYOVERTYPETEXTFIELD, strCarryOverType, "Carryover Text Field");
			}
			//If Allocation Type is not Empty enter the details
			if(!strAmount.isEmpty()){
				type(EDTC_OR.AMOUNTTEXTFIELD, strAllocationType, "Amount Text Field");
			}
			//If Allocation Type is not Empty enter the details
			if(!strAmount.isEmpty()){
				type(EDTC_OR.ALLOCATIONTYPETEXTFIELD, strAmount, "Allocation Type Text Field");
			}
			//If Annual Base Salary is not Empty enter the details
			if(!strAnnualBaseSal.isEmpty()){
				type(EDTC_OR.ANNUALBASESALTEXTFIELD, strAnnualBaseSal, "Annual Base Salary Text Field");
			}
			
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
  	 * Method 	Name		:	enterOT_OffsiteBalances()
  	 * Author				:	
  	 * Description			:	This method Sets the Approver or Payer
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/
	public void enterOT_OffsiteBalances(String SheetName,int iLoop) throws Throwable{
		try{
			blnEventReport = false;
			String strOTCalculationDate=Excelobject.getCellData(SheetName, "Calculation Date", iLoop);
			String strST_OT_MTD=Excelobject.getCellData(SheetName, "ST OT_MTD", iLoop);
			String strST_OT_QTD=Excelobject.getCellData(SheetName, "ST OT_QTD", iLoop);
			String strST_OT_YTD=Excelobject.getCellData(SheetName, "ST OT_YTD", iLoop);
			String strOT_MTD_1_5=Excelobject.getCellData(SheetName, "1.5 OT_MTD", iLoop);
			String strOT_QTD_1_5=Excelobject.getCellData(SheetName, "1.5 OT_QTD", iLoop);
			String strOT_YTD_1_5=Excelobject.getCellData(SheetName, "1.5 OT_YTD", iLoop);
			String strOT_MTD_2_0=Excelobject.getCellData(SheetName, "2.0 OT_MTD", iLoop);
			String strOT_QTD_2_0=Excelobject.getCellData(SheetName, "2.0 OT_QTD", iLoop);
			String strOT_YTD_2_0=Excelobject.getCellData(SheetName, "2.0 OT_YTD", iLoop);
			String strHPREM_MTD=Excelobject.getCellData(SheetName, "HPREM MTD", iLoop);
			String strHPREM_QTD=Excelobject.getCellData(SheetName, "HPREM QTD", iLoop);
			String strHPREM_YTD=Excelobject.getCellData(SheetName, "HPREM YTD", iLoop);
			String strOffsite_MTD=Excelobject.getCellData(SheetName, "Offsite MTD", iLoop);
			String strOffsite_QTD=Excelobject.getCellData(SheetName, "Offsite QTD", iLoop);
			String strOffsite_YTD=Excelobject.getCellData(SheetName, "Offsite YTD", iLoop);
			String strTableHeadings=Excelobject.getCellData(SheetName, "OT Amt Table Headings", iLoop);
			
			//Click on the Paid Time Off Tab
			click(EDTC_OR.OT_OFFSITEBALANCETAB, "OT Offsite Balance Tab");
			
			//This method validates the OT Amounts Table Headings
			verifyTableHeading(EDTC_OR.OTAMTTABLEHEADINGS, strTableHeadings);
			
			//If OT Calculation Date is not Empty enter the details
			if(!strOTCalculationDate.isEmpty()){
				type(EDTC_OR.OTCALCULATIONDATETEXTFIELD, strOTCalculationDate, "OT Calculation Date Text Field");
			}
			
			//If ST OT MTD is not Empty enter the details
			if(!strST_OT_MTD.isEmpty()){
				type(EDTC_OR.ST_OT_MTD_TEXTFIELD, strST_OT_MTD, "ST OT MTD Text Field");
			}
			
			//If ST OT QTD is not Empty enter the details
			if(!strST_OT_QTD.isEmpty()){
				type(EDTC_OR.ST_OT_QTD_TEXTFIELD, strST_OT_QTD, "ST OT QTD Text Field");
			}
			
			//If ST OT YTD is not Empty enter the details
			if(!strST_OT_YTD.isEmpty()){
				type(EDTC_OR.ST_OT_YTD_TEXTFIELD, strST_OT_YTD, "ST OT YTD Text Field");
			}
			
			
			//If 1.5 OT MTD is not Empty enter the details
			if(!strOT_MTD_1_5.isEmpty()){
				type(EDTC_OR.OT_1_5_MTD_TEXTFIELD, strOT_MTD_1_5, "1.5 OT MTD Text Field");
			}
			
			//If 1.5 OT QTD is not Empty enter the details
			if(!strOT_QTD_1_5.isEmpty()){
				type(EDTC_OR.OT_1_5_QTD_TEXTFIELD, strOT_QTD_1_5, "1.5 OT QTD Text Field");
			}
			
			//If 1.5 OT YTD is not Empty enter the details
			if(!strOT_YTD_1_5.isEmpty()){
				type(EDTC_OR.OT_1_5_YTD_TEXTFIELD, strOT_YTD_1_5, "1.5OT YTD Text Field");
			}
			
			//If 2.0 OT MTD is not Empty enter the details
			if(!strOT_MTD_2_0.isEmpty()){
				type(EDTC_OR.OT_2_0_MTD_TEXTFIELD, strOT_MTD_2_0, "2.0 OT MTD Text Field");
			}
			
			//If 2.0 OT QTD is not Empty enter the details
			if(!strOT_QTD_2_0.isEmpty()){
				type(EDTC_OR.OT_2_0_QTD_TEXTFIELD, strOT_QTD_2_0, "2.0 OT QTD Text Field");
			}
			
			//If 2.0 OT YTD is not Empty enter the details
			if(!strOT_YTD_2_0.isEmpty()){
				type(EDTC_OR.OT_2_0_YTD_TEXTFIELD, strOT_YTD_2_0, "2.0 OT YTD Text Field");
			}
			
			
			
			//If HPREM MTD is not Empty enter the details
			if(!strHPREM_MTD.isEmpty()){
				type(EDTC_OR.HPREM_MTD_TEXTFIELD, strHPREM_MTD, "HPREM MTD Text Field");
			}
			
			//If HPREM QTD is not Empty enter the details
			if(!strHPREM_QTD.isEmpty()){
				type(EDTC_OR.HPREM_QTD_TEXTFIELD, strHPREM_QTD, "HPREM QTD Text Field");
			}
			
			//If HPREM YTD is not Empty enter the details
			if(!strHPREM_YTD.isEmpty()){
				type(EDTC_OR.HPREM_YTD_TEXTFIELD, strHPREM_YTD, "HPREM YTD Text Field");
			}
			
			//If Offsite MTD is not Empty enter the details
			if(!strOffsite_MTD.isEmpty()){
				type(EDTC_OR.OFFSITE_MTD_TEXTFIELD, strOffsite_MTD, "Offsite MTD Text Field");
			}
			
			//If Offsite QTD is not Empty enter the details
			if(!strOffsite_QTD.isEmpty()){
				type(EDTC_OR.OFFSITE_QTD_TEXTFIELD, strOffsite_QTD, "Offsite QTD Text Field");
			}
			
			//If Offsite YTD is not Empty enter the details
			if(!strOffsite_YTD.isEmpty()){
				type(EDTC_OR.OFFSITE_YTD_TEXTFIELD, strOffsite_YTD, "Offsite YTD Text Field");
			}
			
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	
	/********************************************************************************************************
  	 * Method 	Name		:	save_ResetButton()
  	 * Author				:	
  	 * Description			:	This method clicks on the Save/Reset Button
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/	
	public void save_ResetButton(String strAction) throws Throwable{
		try{
			blnEventReport = true;
			if(strAction.equalsIgnoreCase("Save")){
				click(EDTC_OR.SAVEBTN, "Save Button");
			}else if(strAction.equalsIgnoreCase("Reset")){
				click(EDTC_OR.RESETBTN, "Reset Button");
			}
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
  	 * Method 	Name		:	basicInfoHelpButtons()
  	 * Author				:	
  	 * Description			:	This method clicks on the Save/Reset Button
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/	
	public void basicInfoSectionHelpButtons(String addModifyEmpHelpText,String addlEmpGrantSuppHelpText,String noPTOemailHelpText,String positionHelpText,String levelHelpText,
			String noGenemailHelpText,String sickLeaveOverrideHelpText,String tpsPrivilegesHelpText,String regScheduledHrsHelpText) throws Throwable{
		try{
			blnEventReport = true;
			//Validate Add/Modify Employee Help Text
			click(EDTC_OR.ADD_MODIFYEMPHELPBTN, "Add/Modify Employee Help Link");
			assertText(EDTC_OR.ADD_MODIFYEMPHELPTEXT, addModifyEmpHelpText);
			click(EDTC_OR.ADD_MODIFYEMPHELPCLOSEBTN,"Add/Modify Employee Help Close Button");
			Thread.sleep(lSleep_Low);

			//Validate Additional employee who can grant supplemental pay Help Text
			click(EDTC_OR.ADDLEMPGRANTSUPPPAYHELPBTN, "Additional employee who can grant supplemental pay Help Link");
			assertText(EDTC_OR.ADDLEMPGRANTSUPPPAYHELPTEXT, addlEmpGrantSuppHelpText);
			click(EDTC_OR.ADDLEMPGRANTSUPPPAYHELPCLOSEBTN,"Additional employee who can grant supplemental pay Help Close Button");
			Thread.sleep(lSleep_Low);
			
			//Validate No PTO email Help Text
			click(EDTC_OR.NOPTOEMAILHELPBTN, "No PTO email Help Link");
			assertText(EDTC_OR.NOPTOEMAILHELPTEXT, noPTOemailHelpText);
			click(EDTC_OR.NOPTOEMAILHELPCLOSEBTN,"No PTO email Help Close Button");
			Thread.sleep(lSleep_Low);
			
			//Validate Position Help Text
			click(EDTC_OR.POSITIONHELPBTN, "Position Help Link");
			assertText(EDTC_OR.POSITIONHELPTEXT, positionHelpText);
			click(EDTC_OR.POSITIONHELPCLOSEBTN,"Position Help Close Button");
			Thread.sleep(lSleep_Low);
			
			//Validate Level Help Text
			click(EDTC_OR.LEVELHELPBTN, "Level Help Link");
			assertText(EDTC_OR.LEVELHELPTEXT, levelHelpText);
			click(EDTC_OR.LEVELHELPCLOSEBTN,"Level Help Close Button");
			Thread.sleep(lSleep_Low);
			
			//Validate No Gen Email Help Text
			click(EDTC_OR.NOGENEMAILHELPBTN, "No Gen Email Help Link");
			assertText(EDTC_OR.NOGENEMAILHELPTEXT, noGenemailHelpText);
			click(EDTC_OR.NOGENEMAILHELPCLOSEBTN,"No Gen Email Help Close Button");
			Thread.sleep(lSleep_Low);
			
			//Validate Sick leave override Help Text
			click(EDTC_OR.SICKLEAVEOVERRIDEHELPBTN, "Sick leave override Help Link");
			assertText(EDTC_OR.SICKLEAVEOVERRIDEHELPTEXT, sickLeaveOverrideHelpText);
			click(EDTC_OR.SICKLEAVEOVERRIDEHELPCLOSEBTN,"Sick leave override Help Close Button");
			Thread.sleep(lSleep_Low);
			
			//Validate TPS Privileges Help Text
			click(EDTC_OR.TPSPRIVILEGESHELPBTN, "TPS Privileges Help Link");
			assertText(EDTC_OR.TPSPRIVILEGESHELPTEXT, tpsPrivilegesHelpText);
			click(EDTC_OR.TPSPRIVILEGESHELPCLOSEBTN,"TPS Privileges Help Close Button");
			Thread.sleep(lSleep_Low);
			
			//Validate Regularly Scheduled Hours Help Text
			click(EDTC_OR.REGSCHEDULEDHRSHELPBTN, "Regularly Scheduled Hours Help Link");
			assertText(EDTC_OR.REGSCHEDULEDHRSHELPTEXT, regScheduledHrsHelpText);
			click(EDTC_OR.REGSCHEDULEDHRSHELPCLOSEBTN,"Regularly Scheduled Hours Help Close Button");
			Thread.sleep(lSleep_Low);
			
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
  	 * Method 	Name		:	suppPaySectionHelpButtons()
  	 * Author				:	
  	 * Description			:	This method clicks on the Save/Reset Button
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/	
	public void suppPaySectionHelpButtons(String suppPayApproverHelpText,String approvePaymentsHelpText,String maxApprovalHelpText) throws Throwable{
		try{
			blnEventReport = true;
			//Validate Authorization code to act as supplemental Payer/Approver Help Text
			click(EDTC_OR.AUTHCODESUPPPAYAPPROVERHELPBTN, "Authorization code to act as supplemental Payer/Approver Help Link");
			assertText(EDTC_OR.AUTHCODESUPPPAYAPPROVERHELPTEXT, suppPayApproverHelpText);
			click(EDTC_OR.AUTHCODESUPPPAYAPPROVERHELPCLOSEBTN,"Authorization code to act as supplemental Payer/Approver Help Close Button");
			Thread.sleep(lSleep_Low);
			
			//Validate Employee who can approve payments created by this employee (#1) Help Text
			click(EDTC_OR.APPROVEPAYMENTSRHELPBTN, "Employee who can approve payments created by this employee (#1) Help Link");
			assertText(EDTC_OR.APPROVEPAYMENTSHELPTEXT, approvePaymentsHelpText);
			click(EDTC_OR.APPROVEPAYMENTSHELPCLOSEBTN,"Employee who can approve payments created by this employee (#1) Help Close Button");
			Thread.sleep(lSleep_Low);
			
			//Validate Maximum approval limit Help Text
			click(EDTC_OR.MAXAPPROVALLIMITHELPBTN, "Employee who can approve payments created by this employee (#1) Help Link");
			assertText(EDTC_OR.MAXAPPROVALLIMITHELPTEXT, maxApprovalHelpText);
			click(EDTC_OR.MAXAPPROVALLIMITHELPCLOSEBTN,"Employee who can approve payments created by this employee (#1) Help Close Button");
			Thread.sleep(lSleep_Low);
			
			
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
  	 * Method 	Name		:	ptoSectionHelpButtons()
  	 * Author				:	
  	 * Description			:	This method clicks on the Save/Reset Button
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/	
	public void ptoSectionHelpButtons(String annualBaseSalHelpText,String createYMPHelpText,String calculatePTOHelpText) throws Throwable{
		try{
			blnEventReport = true;
			//Validate Annual Base Salary Help Text
			click(EDTC_OR.ANNUALBASESALHELPBTN, "Annual Base Salary Help Link");
			assertText(EDTC_OR.ANNUALBASESALHELPTEXT, annualBaseSalHelpText);
			click(EDTC_OR.ANNUALBASESALHELPCLOSEBTN,"Annual Base Salary Help Close Button");
			Thread.sleep(lSleep_Low);
			
			//Validate Create YMP Help Text
			click(EDTC_OR.CREATEYMPHELPBTN, "Create YMP Help Link");
			assertText(EDTC_OR.CREATEYMPHELPTEXT, createYMPHelpText);
			click(EDTC_OR.CREATEYMPHELPCLOSEBTN,"Create YMP Help Close Button");
			Thread.sleep(lSleep_Low);
			
			//Validate Calculate PTO Help Text
			click(EDTC_OR.CALCULATEPTOHELPBTN, "Calculate PTO Help Link");
			assertText(EDTC_OR.CALCULATEPTOHELPTEXT, calculatePTOHelpText);
			click(EDTC_OR.CALCULATEPTOHELPCLOSEBTN,"Calculate PTO Help Close Button");
			Thread.sleep(lSleep_Low);
			
			//Validate PTO Carryover and Allocations Help Text
			click(EDTC_OR.PTOCARRYOVERHELPBTN, "PTO Carryover and Allocations Help Link");
			assertText(EDTC_OR.PTOCARRYOVERHELPTEXT, calculatePTOHelpText);
			click(EDTC_OR.PTOCARRYOVERHELPCLOSEBTN,"PTO Carryover and Allocations Help Close Button");
			Thread.sleep(lSleep_Low);
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
  	 * Method 	Name		:	ptoSectionHelpButtons()
  	 * Author				:	
  	 * Description			:	This method clicks on the Save/Reset Button
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/	
	public void ot_OffsitBalanceSectionHelpButtons(String otCalculationDateHelpText) throws Throwable{
		try{
			blnEventReport = true;
			//Validate OT Calculation Date Field Help Text
			click(EDTC_OR.OTCALCULATIONDATEHELPBTN, "OT Calculation Date Help Link");
			assertText(EDTC_OR.OTCALCULATIONDATEHELPTEXT, otCalculationDateHelpText);
			click(EDTC_OR.OTCALCULATIONDATEHELPCLOSEBTN,"OT Calculation Date Help Close Button");
			Thread.sleep(lSleep_Low);
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
  	 * Method 	Name		:	validatePRExceptionPage()
  	 * Author				:	
  	 * Description			:	This method clicks on the Save/Reset Button
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/		
	public void validatePRExceptionPage(String strEmpID_Name) throws Throwable{
		try{
			blnEventReport = true;
			boolean bFlag=false;
			isElementDisplayed(EDTC_OR.ADDNEWEXCEPTIONBTN, "Add New Exception Button");
			isElementDisplayed(By.xpath(EDTC_OR.SORTBYWEDATEBTN), "Sort by WE Date Button");
			isElementDisplayed(By.xpath(EDTC_OR.SORTBYEMPIDBTN), "Sort by Emp ID Button");
			isElementDisplayed(EDTC_OR.EMPID_NAMETEXTFIELD, "Employee Lookup Text Field");
			isElementDisplayed(EDTC_OR.SEARCHBTN, "Search Button");
			
			String strValue=getAttribute(By.xpath(EDTC_OR.SORTBYWEDATEBTN+"/parent::li"), "class", "Sort by WE Date Button").trim();
			if(strValue.equalsIgnoreCase("Active")){
				SuccessReport("Validate whether Sort by WE Date tab is selected by default ", "Sort by WE Date tab is selected by default ");
			}else{
				failureReport("Validate whether Sort by WE Date tab is selected by default ", "Sort by WE Date tab is not selected by default ");
			}
			List<WebElement> elements=driver.findElements(EDTC_OR.PENDINGLABEL);
			for(int i=0;i<elements.size();i++){
				strValue=elements.get(i).getText().trim();
				if(!strValue.equalsIgnoreCase("PENDING")){
					bFlag=true;
					break;
				}
			}
			if(bFlag){
				failureReport("Validate whether Pending Status is displayed for all the PR Exceptions ", "Pending Status is not displayed for all the PR Exceptions");
			}else{
				SuccessReport("Validate whether Pending Status is displayed for all the PR Exceptions ", "Pending Status is displayed for all the PR Exceptions");
			}
			
			type(EDTC_OR.EMPID_NAMETEXTFIELD,"1234567890123","Employee ID/Name Text Field");
			strValue=getAttribute(EDTC_OR.EMPID_NAMETEXTFIELD,"value","Employee ID/Name Text Field");
			if(strValue.equalsIgnoreCase("123456789012")){
				SuccessReport("Validate whether user is allowed to enter maximum 12 characters in Employee ID/Name Text Field", "User is allowed to enter maximum 12 characters in Employee ID/Name Text Field");
			}else{
				failureReport("Validate whether user is allowed to enter maximum 12 characters in Employee ID/Name Text Field", "User is allowed to enter more than 12 characters in Employee ID/Name Text Field");
			}
			
			click(EDTC_OR.SEARCHBTN, "Search Button");
			Thread.sleep(lSleep_Low);
			strValue=getText(EDTC_OR.SEARCHMATCHESLABEL, "Search matches").split(" ")[0];
			SuccessReport("Validate whether that Admin User is able to search for Employees", strValue+" results found");
			click(EDTC_OR.MODALDIALOGCLOSELINK,"Modal Dialog Close Link");
			
			driver.findElement(EDTC_OR.EMPID_NAMETEXTFIELD).clear();
			click(EDTC_OR.SEARCHBTN, "Search Button");
			Thread.sleep(lSleep_Low);
			if(isAlertPresent()){
				Alert alert=driver.switchTo().alert();
				strValue=alert.getText();
				if(strValue.equalsIgnoreCase("You are about to display every employee in the system. Are you sure you want to do this?")){
					SuccessReport("Validate the Alert when Admin clicks the Search button without entering the Emp Name/ID", strValue+" Alert is Displayed");
					alert.accept();
					waitForElementPresent(EDTC_OR.SEARCHMATCHESLABEL, "");
					Thread.sleep(lSleep_Medium);
					strValue=getText(EDTC_OR.SEARCHMATCHESLABEL, "Search matches").split(" ")[0];
					SuccessReport("Validate whether that Admin User is able to search for Employees", strValue+" results found");
					click(EDTC_OR.MODALDIALOGCLOSELINK,"Modal Dialog Close Link");
				}else{
					failureReport("Validate the Alert when Admin clicks the Search button without entering the Emp Name/ID", "Alert is not Displayed");
					alert.dismiss();
				}
			}
				
			type(EDTC_OR.EMPID_NAMETEXTFIELD,strEmpID_Name,"Employee ID/Name Text Field");
			click(EDTC_OR.SEARCHBTN, "Search Button");
			pageLoadingCompleted(EDTC_OR.PAGELAODER);
			Thread.sleep(lSleep_Low);
			if(isElementPresent(EDTC_OR.EMPSEARCHLOOKUPTABLE, "Employee Search Lookup table")){
				String searchResults=getText(EDTC_OR.EMPSEARCHLOOKUPTABLE, "Employee Search Lookup table").split(" ")[0];
				SuccessReport("Validate whether that Admin User is able to search for Employees", searchResults+" results found");
				click(EDTC_OR.MODALDIALOGCLOSELINK,"Modal Dialog Close Link");
			}	
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
  	 * Method 	Name		:	addNewExceptionPageFieldsValidation()
  	 * Author				:	
  	 * Description			:	This method clicks on the Save/Reset Button
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/	
	public void addNewExceptionPageFieldsValidation(String strWeDate,String payTypeDropDownValues,String companyDropDownValues) throws Throwable{
		try{
			blnEventReport = true;
			//Click the Add New Exception Button
			click(EDTC_OR.ADDNEWEXCEPTIONBTN, "Add New Exception Button");
			Thread.sleep(lSleep_Low);
			assertText(EDTC_OR.SEARCHMATCHESLABEL, "Add new PR exception");
			//Validate the Fields
			isElementDisplayed(EDTC_OR.WEDATEDROPDOWN, "WE Date Drop Down");
			isElementDisplayed(EDTC_OR.EMPIDTEXTFIELD_PREXCEPTIONDIALOG, "Emp ID Text Field");
			isElementDisplayed(EDTC_OR.CREATEEXCEPTIONBTN, "Create Exception Button");
			//Validate the Status of the Fields
			isEnabled(EDTC_OR.WEDATEDROPDOWN, "WE Date Drop Down");
			isEnabled(EDTC_OR.EMPIDTEXTFIELD_PREXCEPTIONDIALOG, "Emp ID Text Field");
			isDisabled(EDTC_OR.CREATEEXCEPTIONBTN, "Create Exception Button");

			
			//Select the WE Date
			selectByVisibleText(EDTC_OR.WEDATEDROPDOWN,strWeDate, "WE Date Drop Down");
			
			//Enter the Emp ID
			type(EDTC_OR.EMPIDTEXTFIELD_PREXCEPTIONDIALOG,"123456789","Emp ID Text Field");
			
			//Check whether the Create Exception Button is Enabled after the User enters the Mandatory Fields
			isEnabled(EDTC_OR.CREATEEXCEPTIONBTN, "Create Exception Button");
			click(EDTC_OR.CREATEEXCEPTIONBTN, "Create Exception Button");
			Thread.sleep(lSleep_Low);
		//	assertText(EDTC_OR.ZEROBALANCEERRORMSG, "Could not find the employee.");
			click(EDTC_OR.MODALDIALOGOKBTN, "OK Button");
			Thread.sleep(lSleep_Low);
			
			
			//Click the Add New Exception Button
			click(EDTC_OR.ADDNEWEXCEPTIONBTN, "Add New Exception Button");
			Thread.sleep(lSleep_Low);
			//Select the WE Date
			selectByVisibleText(EDTC_OR.WEDATEDROPDOWN,strWeDate, "WE Date Drop Down");
			
			//Enter the Emp ID
			type(EDTC_OR.EMPIDTEXTFIELD_PREXCEPTIONDIALOG,empID,"Emp ID Text Field");
			click(EDTC_OR.CREATEEXCEPTIONBTN, "Create Exception Button");
			waitForElementPresent(EDTC_OR.DELETEEXCEPTIONBTN, "Delete Exception Button");
			//This method validates the Page Header
			validatePageHeader(EDTC_OR.PAGEHEADER, "PR EXCEPTION FOR "+empName+" ("+empID+")");
		
			//Validate the Fields
			isElementDisplayed(EDTC_OR.DELETEEXCEPTIONBTN, "Delete Exception Button");
			isElementDisplayed(EDTC_OR.SAVEEXCEPTIONBTN, "Save Exception Button");
			isElementDisplayed(EDTC_OR.PAYTYPEDROPDOWN, "Pay Type Drop Down");
			isElementDisplayed(EDTC_OR.COMPANYDROPDOWN, "Company Drop Down");
			isElementDisplayed(EDTC_OR.MEMOTEXTAREA_PREXCEPTIONPAGE, "Memo Text Area");
			isElementDisplayed(EDTC_OR.COMPLETECHECKBOX, "Complete Checkbox");
			isElementDisplayed(EDTC_OR.STOTTEXTFIELD, "ST OT Text Field");
			isElementDisplayed(EDTC_OR.OT_1_5TEXTFIELD, "1.5 OT Text Field");
			isElementDisplayed(EDTC_OR.OT_2_0TTEXTFIELD, "2.0 OT Text Field");
			isElementDisplayed(EDTC_OR.PTOTEXTFIELD, "PTO Text Field");
			isElementDisplayed(EDTC_OR.OPTTEXTFIELD, "OPT Text Field");
			isElementDisplayed(EDTC_OR.SICKTEXTFIELD, "Sick Text Field");
			isElementDisplayed(EDTC_OR.BEREAVEMENTTEXTFIELD, "Bereavement Text Field");
			isElementDisplayed(EDTC_OR.JURYDUTYTEXTFIELD, "Jury Duty Text Field");
			isElementDisplayed(EDTC_OR.UNPAIDTEXTFIELD, "Unpaid Text Field");
			isElementDisplayed(EDTC_OR.REGULARTEXTFIELD, "Regular Text Field");
			isElementDisplayed(EDTC_OR.OFFSITETEXTFIELD, "Offsite Text Field");
			isElementDisplayed(EDTC_OR.RECLASSPTOTEXTFIELD, "Reclass PTO Text Field");
			isElementDisplayed(EDTC_OR.PRIOYEARRPTOTEXTFIELD, "Prior year PTO Text Field");
			isElementDisplayed(EDTC_OR.PRIOYEARROPTTEXTFIELD, "Prior year OPT Text Field");
			
			//Default Status Delete and Save buttons
			isDisabled(EDTC_OR.DELETEEXCEPTIONBTN, "Delete Exception Button");
			isEnabled(EDTC_OR.SAVEEXCEPTIONBTN, "Save Exception Button");
			
			//Default Value
			String strValue=getAttribute(EDTC_OR.MEMOTEXTAREA_PREXCEPTIONPAGE,"placeholder", "Memo Text Area");
			if(strValue.equalsIgnoreCase("Any additional comments about the correction")){
				SuccessReport("Validate the Default text in the Memo Text Area ", strValue+" text is present");
			}else{
				failureReport("Validate the Default text in the Memo Text Area ", "Text is not present");				}
				
			//Default Status of the Complete Checkbox
			if(isChecked(EDTC_OR.COMPLETECHECKBOX, "Complete Checkbox")){
				failureReport("Validate whether by default Complete Checkbox is unchecked","Complete Checkbox is Checked");
			}else{
				SuccessReport("Validate whether by default Complete Checkbox is unchecked","Complete Checkbox is unchecked");
			}
			//This method validates the Drop Down Values - Company	
			validateCompanyDropDown(companyDropDownValues);
				
			//This method validates the Drop Down Values - Company		
			validateDropDownValues(EDTC_OR.PAYTYPEDROPDOWN,payTypeDropDownValues, "Pay Type Drop Down");
				
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
  	 * Method 	Name		:	addPRExceptions()
  	 * Author				:	
  	 * Description			:	This method creates an PR Exception
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/
	public void validateCompanyDropDown(String companyDropDownValues) throws Throwable{
		try{
			blnEventReport = false;
			//This method validates the Drop Down Values - Company	
			List<WebElement> dropDownelements=driver.findElements(EDTC_OR.COMPANYDROPDOWN); //All the Drop Down Elements
			SuccessReport("Validate the number of Drop Down elements in Company Drop Down", dropDownelements.size()+" Drop down elements are displayed ");
			String[] arrayValues=companyDropDownValues.split(";");
			boolean flag = false;
			for(int i=0;i<dropDownelements.size();i++){
				Select s=new Select(dropDownelements.get(i));
				List<WebElement> items=s.getOptions();
				for(WebElement a:items){
					System.out.print(a.getText().trim()+";");
					flag = false;
					for(int iLoop=0;iLoop<arrayValues.length;iLoop++)
					{
						if(a.getText().trim().replaceAll(" ", "").equalsIgnoreCase(arrayValues[iLoop].trim().replaceAll(" ", "")))
						{
							flag = true;
							break;
						}
					}if(!flag)
						break;
				}
				if(flag){
					SuccessReport("Validate whether the following items are available in Company Drop Down","\""+companyDropDownValues+"\" items are available in Company Drop Down");
				}else{
					failureReport("Validate whether the following items are available in Company Drop Down", "Items are not available in Company Drop Down");
				}
			}
			
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
		
	
	/********************************************************************************************************
  	 * Method 	Name		:	addPRExceptions()
  	 * Author				:	
  	 * Description			:	This method creates an PR Exception
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/
	public void addPRException(String strWeDate) throws Throwable{
		try{
			blnEventReport = true;
			//Click the Add New Exception Button
			click(EDTC_OR.ADDNEWEXCEPTIONBTN, "Add New Exception Button");
			Thread.sleep(lSleep_Low);
			//Select the WE Date
			selectByVisibleText(EDTC_OR.WEDATEDROPDOWN,strWeDate, "WE Date Drop Down");
			
			//Enter the Emp ID
			type(EDTC_OR.EMPIDTEXTFIELD_PREXCEPTIONDIALOG,empID,"Emp ID Text Field");
			click(EDTC_OR.CREATEEXCEPTIONBTN, "Create Exception Button");
			waitForElementPresent(EDTC_OR.DELETEEXCEPTIONBTN, "Delete Exception Button");
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	
	
	/********************************************************************************************************
  	 * Method 	Name		:	enterPRExceptionDetails()
  	 * Author				:	
  	 * Description			:	This method creates an PR Exception
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/
	public void enterPRExceptionDetails(String SheetName,int iLoop,String strWeDate) throws Throwable{
		try{
			blnEventReport = true;
			String strPayType=Excelobject.getCellData(SheetName, "Pay Type", iLoop);
			String strCompany=Excelobject.getCellData(SheetName, "Company", iLoop);
			String strMemo=Excelobject.getCellData(SheetName, "Memo", iLoop);
			String strCompleteStatus=Excelobject.getCellData(SheetName, "Complete Status", iLoop);
			String strST_OT=Excelobject.getCellData(SheetName, "ST OT", iLoop);
			String str_1_5_OT=Excelobject.getCellData(SheetName, "1.5 OT", iLoop);
			String str_2_0_OT=Excelobject.getCellData(SheetName, "2.O OT", iLoop);
			String strPTO=Excelobject.getCellData(SheetName, "PTO", iLoop);
			String strOPT=Excelobject.getCellData(SheetName, "OPT", iLoop);
			String strSick=Excelobject.getCellData(SheetName, "Sick", iLoop);
			String strBereavement=Excelobject.getCellData(SheetName, "Bereavement", iLoop);
			String strJuryDuty=Excelobject.getCellData(SheetName, "Jury Duty", iLoop);
			String strUnpaid=Excelobject.getCellData(SheetName, "Unpaid", iLoop);
			String strRegular=Excelobject.getCellData(SheetName, "Regular", iLoop);
			String strOffsite=Excelobject.getCellData(SheetName, "Offsite", iLoop);
			String strReclassPTO=Excelobject.getCellData(SheetName, "Reclass PTO", iLoop);
			String strPriorYearPTO=Excelobject.getCellData(SheetName, "PriorYear PTO", iLoop);
			String strPriorYearOPT=Excelobject.getCellData(SheetName, "PriorYear OPT", iLoop);
			
			
			//Select Pay Type
			if(!strPayType.isEmpty()){
				validateDropDownValue(EDTC_OR.PAYTYPEDROPDOWN, strPayType, "PayType Drop Down");		
			}
			//Select Company			
			if(!strCompany.isEmpty()){
				validateDropDownValue(EDTC_OR.COMPANYDROPDOWN, strCompany, "Company Drop Down");		
			}
			//Enter Memo
			if(!strMemo.isEmpty()){
				type(EDTC_OR.MEMOTEXTAREA_PREXCEPTIONPAGE, strMemo, "Memo Text Area");		
			}
			
			//Click the Complete Checkbox
			if(strCompleteStatus.equalsIgnoreCase("Y")){
				if(!isChecked(EDTC_OR.COMPLETECHECKBOX, "Complete Checkbox")){
					click(EDTC_OR.COMPLETECHECKBOX, "Complete Checkbox");
				}
			}else if(strCompleteStatus.equalsIgnoreCase("N")){
				if(isChecked(EDTC_OR.COMPLETECHECKBOX, "Complete Checkbox")){
					click(EDTC_OR.COMPLETECHECKBOX, "Complete Checkbox");
				}
			}
			//Enter the SO OT value
			if(!strST_OT.isEmpty()){
				type(EDTC_OR.STOTTEXTFIELD, strST_OT, "ST OT Text Field");		
			}
			//Enter the 1.5 OT value
			if(!str_1_5_OT.isEmpty()){
				type(EDTC_OR.OT_1_5TEXTFIELD, str_1_5_OT, "1.5 OT Text Field");		
			}
			//Enter the 2.0 OT value
			if(!str_2_0_OT.isEmpty()){
				type(EDTC_OR.OT_2_0TTEXTFIELD, str_2_0_OT, "2.0 OT Text Field");		
			}
			//Enter the PTO value
			if(!strPTO.isEmpty()){
				type(EDTC_OR.PTOTEXTFIELD, strPTO, "PTO Text Field");		
			}
			//Enter the OPT value
			if(!strOPT.isEmpty()){
				type(EDTC_OR.OPTTEXTFIELD, strOPT, "OPT Text Field");		
			}
			//Enter the Sick value
			if(!strSick.isEmpty()){
				type(EDTC_OR.SICKTEXTFIELD, strSick, "Sick Text Field");		
			}
			//Enter the Sick value
			if(!strBereavement.isEmpty()){
				type(EDTC_OR.BEREAVEMENTTEXTFIELD, strSick, "Bereavement Text Field");		
			}
			//Enter the Jury Date value
			if(!strJuryDuty.isEmpty()){
				type(EDTC_OR.JURYDUTYTEXTFIELD, strJuryDuty, "Jury Duty Text Field");		
			}
			//Enter the Unpaid value
			if(!strUnpaid.isEmpty()){
				type(EDTC_OR.UNPAIDTEXTFIELD, strUnpaid, "Unpaid Text Field");		
			}
			//Enter the Regular value
			if(!strRegular.isEmpty()){
				type(EDTC_OR.REGULARTEXTFIELD, strRegular, "Regular Text Field");		
			}
			//Enter the Offsite value
			if(!strOffsite.isEmpty()){
				type(EDTC_OR.OFFSITETEXTFIELD, strOffsite, "Offsite Text Field");		
			}
			//Enter the Reclass PTO value
			if(!strReclassPTO.isEmpty()){
				type(EDTC_OR.RECLASSPTOTEXTFIELD, strReclassPTO, "Reclass PTO Text Field");		
			}
			//Enter the PriorYear PTO value
			if(!strPriorYearPTO.isEmpty()){
				type(EDTC_OR.PRIOYEARROPTTEXTFIELD, strPriorYearPTO, "PriorYear PTO Text Field");		
			}
			//Enter the PriorYear OPT value
			if(!strPriorYearOPT.isEmpty()){
				type(EDTC_OR.PRIOYEARROPTTEXTFIELD, strPriorYearOPT, "PriorYear OPT Text Field");		
			}

			//Click on Save Button
			click(EDTC_OR.SAVEEXCEPTIONBTN,"Save Exception Button");
			
			waitForElementPresent(EDTC_OR.SEARCHMATCHESLABEL, "Success Message");
			String strValue=getText(EDTC_OR.SEARCHMATCHESLABEL, "Success Message").trim();
			if(strValue.contains("PR Exception was successfully saved.")){
				SuccessReport("Validate the Success Message after user clicks on the Save Exception Button",strValue+" Success message is displayed");
			}else{
				failureReport("Validate the Success Message after user clicks on the Save Exception Button","Success message is not displayed");
			}
			click(EDTC_OR.MODALDIALOGOKBTN, "OK Button");
			
			click(EDTC_OR.BACKBUTTON, "Back Button");
		    //This method validates the Page title
			validatePageHeader(EDTC_OR.PAGEHEADER, "PENDING PR EXCEPTIONS FOR ADMIN "+loginEmpName);
			
			if(isElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+empID+"')]/following-sibling::p/span[contains(text(),'"+strWeDate+"')]"), "PR Exception")){
				SuccessReport("Verify if newly added/modified PR Exception is shown under the Sort by WE Date on the Pending PR Exceptions page.","Newly added/modified PR Exception is shown under the Sort by WE Date on the Pending PR Exceptions page.");
				if(getText(By.xpath(EDTC_OR.ELEMENTTEXT1+empID+"')]//parent::div/following-sibling::div/span"), "PR Exception").equalsIgnoreCase("PENDING")){
					SuccessReport("Validate the status of the newly created PR Exception", "Pending is the status of the newly created PR Exception");
					click(By.xpath(EDTC_OR.ELEMENTTEXT1+empID+"')]/following-sibling::p/span[contains(text(),'"+strWeDate+"')]"), "PR Exception");
					waitForElementPresent(EDTC_OR.DELETEEXCEPTIONBTN, "Delete Excpetion Button");
				}else{
					failureReport("Validate the status of the newly created PR Exception", "Status of the newly created PR Exception is not Pending");
				}
			}else{
				failureReport("Verify if newly added/modified PR Exception is shown under the Sort by WE Date on the Pending PR Exceptions page.","Newly added/modified PR Exception is not shown");
			}
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
  	 * Method 	Name		:	selectPRException()
  	 * Author				:	
  	 * Description			:	This method clicks on the Save/Reset Button
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/
	public void selectPRException() throws Throwable{
		try{
			blnEventReport = true;
			String strTodaysDate=getCurrentDate("MM-dd-YYYY");
			click(By.xpath(EDTC_OR.ELEMENTTEXT1+empID+"')]/following-sibling::p/span[contains(text(),'"+strTodaysDate+"')]"), "PR Exception");
			pageLoadingCompleted(EDTC_OR.PAGELAODER);
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
  	 * Method 	Name		:	ValidateResearchEmpPageHelpButtons()
  	 * Author				:	
  	 * Description			:	This method clicks on the Save/Reset Button
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/
	public void validateResearchEmpPageHelpButtons(String edtcHelpText,String tpsHelpText,String terminationDateHelpText,String proStartDateHelpText,String researchHelpText) throws Throwable{
		try{
			blnEventReport = true;
			 //Validate EDTC Help Text
			 click(EDTC_OR.SIGNOUTHELPLINK, "EDTC Help Link");
			 assertText(EDTC_OR.EDTCHELPTEXT, edtcHelpText);
			 click(EDTC_OR.EDTCHELPCLOSEBTN,"EDTC Help Close Button");
			 Thread.sleep(lSleep_Low);
			
			 //Validate TPS Help Text
			 JSClick(EDTC_OR.TPSHELPBTN, "TPS Help Link");
			 assertText(EDTC_OR.TPSHELPTEXT, tpsHelpText);
			 click(EDTC_OR.MODALDIALOGCLOSEBTN,"TPS Help Close Button");
			 Thread.sleep(lSleep_Low);
			 
			 //Validate Termination Date Help Text
			 click(EDTC_OR.TERMINATIONDATEHELPBTN, "Termination Date Help Link");
			 assertText(EDTC_OR.TERMINATIONDATEHELPTEXT, terminationDateHelpText);
			 click(EDTC_OR.TERMINATIONDATEHELPCLOSEBTN,"Termination Date Help Close Button");
			 Thread.sleep(lSleep_Low);
			 
			 //Validate Proration Start Date Help Text
			 click(EDTC_OR.PRORATIONSTARTDATEHELPBTN, "Proration Start Date Help Link");
			 assertText(EDTC_OR.TERMINATIONDATEHELPTEXT, proStartDateHelpText);
			 click(EDTC_OR.TERMINATIONDATEHELPCLOSEBTN,"Proration Start Date Help Close Button");
			 Thread.sleep(lSleep_Low);
			 
			 //Validate Clear Help Text
			 click(EDTC_OR.RESEARCHHELPBTN, "Research Help Link");
			 assertText(EDTC_OR.RESEARCHHELPTEXT, researchHelpText);
			 click(EDTC_OR.RESEARCHHELPCLOSEBTN,"Research Help Close Button");
			 Thread.sleep(lSleep_Low);
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	
	
	/********************************************************************************************************
  	 * Method 	Name		:	reSearchEmpPageWarningMessage()
  	 * Author				:	
  	 * Description			:	This method clicks on the Save/Reset Button
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/
	public void reSearchEmpPageWarningMessage(String strEmpWorkSheet,String existingWSHelpText,String workSheetStatus) throws Throwable{
		try{
			blnEventReport = true;
			//Check whether the Employee already has the WorkSheet
			if(strEmpWorkSheet.equalsIgnoreCase("YES") && !workSheetStatus.equalsIgnoreCase("Approved") && !workSheetStatus.equalsIgnoreCase("Void")){
				isElementDisplayed(EDTC_OR.EMPEXISTINGWORKSHEETLABEL, "Employee has existing worksheet Label");
				isElementDisplayed(EDTC_OR.WORKSHEETPENDINGMSG, "Worksheet is pending, a new worksheet cannot be created Label");
				
				if(isElementPresent(EDTC_OR.RESEARCHEMPLOYEEBTN,"Research Employee Button")){
					failureReport("Validate whether the Research Employee Button is not displayed when Employee has the existing WorkSheet ", "Research Employee Button is displayed when Employee has the existing WorkSheet");	
				}else{
					SuccessReport("Validate whether the Research Employee Button is not displayed when Employee has the existing WorkSheet ", "Research Employee Button is not displayed when Employee has the existing WorkSheet");
				}
				
				String strValue=getText(EDTC_OR.WORKSHEETSTATUS, "WorkSheet Status");
				if(strValue.contains(workSheetStatus)){
					SuccessReport("Validate the Status of WorkSheet", "WorkSheet status is \""+workSheetStatus+"\"" );
				}else{
					failureReport("Validate the Status of WorkSheet", "WorkSheet status is displayed incorrectly");
				}
				
				strValue=getText(EDTC_OR.WSPENDINGMSG, "WorkSheet Pending message");
				if(strValue.contains("Worksheet is pending, a new worksheet cannot be created")){
					SuccessReport("Validate the message "+strValue, "\""+strValue+"\" message is displayed");
				}else{
					failureReport("Validate the message "+strValue, "Message is displayed");
				}
				
				
				//Validate Existing WorkSheet Help Text
				click(EDTC_OR.EXISTINGWORKSHEETHELPBTN, "Existing WorkSheet Help Link");
				assertText(EDTC_OR.EXISTINGWORKSHEETHELPTEXT, existingWSHelpText);
				click(EDTC_OR.EXISTINGWORKSHEETHELPCLOSEBTN,"Existing WorkSheet Help Close Button");
				Thread.sleep(lSleep_Low);
			}else if(strEmpWorkSheet.equalsIgnoreCase("YES") && (workSheetStatus.equalsIgnoreCase("Approved") || workSheetStatus.equalsIgnoreCase("Void"))){
				isElementDisplayed(EDTC_OR.RESEARCHEMPLOYEEBTN,"Research Employee Button");
				isDisabled(EDTC_OR.RESEARCHEMPLOYEEBTN,"Research Employee Button");
				String strValue=getText(EDTC_OR.WORKSHEETSTATUS, "WorkSheet Status");
				if(strValue.contains(workSheetStatus)){
					SuccessReport("Validate the Status of WorkSheet", "WorkSheet status is \""+workSheetStatus+"\"" );
				}else{
					failureReport("Validate the Status of WorkSheet", "WorkSheet status is displayed incorrectly");
				}
			}else if(strEmpWorkSheet.equalsIgnoreCase("No")){
				isElementDisplayed(EDTC_OR.NOEXISTINGWORKSHEETLABEL, "No existing worksheets Label");
				
				//Validate No Existing WorkSheet Help Text
				click(EDTC_OR.NOEXISTINGWORKSHEETHELPBTN, "No Existing WorkSheet Help Link");
				assertText(EDTC_OR.NOEXISTINGWORKSHEETHELPTEXT, existingWSHelpText);
				click(EDTC_OR.NOEXISTINGWORKSHEETHELPCLOSEBTN,"No Existing WorkSheet Help Close Button");
				Thread.sleep(lSleep_Low);	
			}
			
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
  	 * Method 	Name		:	validateTPSResearchPage()
  	 * Author				:	
  	 * Description			:	This method clicks on the Save/Reset Button
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/
	public void validateTPSResearchPage(String memoPostsTableHeadings,String payrollExceptionsTableHeadings,String timeSheetTableHeadings,String strUser) throws Throwable{
		try{
			 
			 blnEventReport = true;
			 //Validate the Fields
			 
			 isElementDisplayed(EDTC_OR.REFERENCECALENDARBTN, "Reference Calendar Button");
			 isElementDisplayed(EDTC_OR.EMPLOYEEINFOTAB,"Employee Info Tab");
			 isElementDisplayed(EDTC_OR.MEMOPOSTSTAB,"Memo Posts Tab");
			 isElementDisplayed(EDTC_OR.PAYROLLEXCEPTIONSTAB,"Payroll Exceptions Tab");
			 isElementDisplayed(EDTC_OR.TIMESHEETSTAB,"TimeSheet Tab");
			 isElementDisplayed(EDTC_OR.PREXCEPTIONPTOSUMMARYBTN,"PR Exception PTO summary Button");
			 isElementDisplayed(EDTC_OR.TIMERECORDPTODETAILSBTN,"Time record PTO details Button");
			 isElementDisplayed(EDTC_OR.HOLIDAYTEMPLATEVIEWLINK,"Holiday Template View Link");
			 
			 if(strUser.equalsIgnoreCase("Verifier")){
				 if(isElementPresent(EDTC_OR.CREATEWORKSHEETBTN,"Create Work sheet Button")){
					 failureReport("Validate whether Create Work sheet Button is not available for Verifier User ", "Create Work sheet Button is available for Verifier User ");
				 }else{
					 SuccessReport("Validate whether Create Work sheet Button is not available for Verifier User ", "Create Work sheet Button is not available for Verifier User ");
				 }
			 }else{
				 isElementDisplayed(EDTC_OR.CREATEWORKSHEETBTN,"Create Work sheet Button");
			 }
			 
			 //Validate the Field Default Status			 
			 isEnabled(EDTC_OR.REFERENCECALENDARBTN, "Reference Calendar Button");
			 isEnabled(EDTC_OR.EMPLOYEEINFOTAB,"Employee Info Tab");
			 isEnabled(EDTC_OR.MEMOPOSTSTAB,"Memo Posts Tab");
			 isEnabled(EDTC_OR.PAYROLLEXCEPTIONSTAB,"Payroll Exceptions Tab");
			 isEnabled(EDTC_OR.TIMESHEETSTAB,"TimeSheet Tab");
			 isEnabled(EDTC_OR.PREXCEPTIONPTOSUMMARYBTN,"PR Exception PTO summary Button");
			 isEnabled(EDTC_OR.TIMERECORDPTODETAILSBTN,"Time record PTO details Button");
			 isEnabled(EDTC_OR.HOLIDAYTEMPLATEVIEWLINK,"Holiday Template View Link");

			 //Validate the Memo Posts Table Headings
			 click(EDTC_OR.MEMOPOSTSTAB, "Memo Posts Tab");
			 Thread.sleep(lSleep_Low);
			 verifyTableHeading(EDTC_OR.MEMOPOSTSTABLEHEADINGS, memoPostsTableHeadings);
			 
			 //Validate the Memo Posts Table Headings
			 click(EDTC_OR.PAYROLLEXCEPTIONSTAB,"Payroll Exceptions Tab");
			 Thread.sleep(lSleep_Low);
			 verifyTableHeading(EDTC_OR.PAYROLLEXCEPTIONSTABLEHEADINGS, payrollExceptionsTableHeadings);
			 
			 //Validate the Memo Posts Table Headings
			 click(EDTC_OR.TIMESHEETSTAB,"TimeSheet Tab");
			 Thread.sleep(lSleep_Low);
			 verifyTableHeading(EDTC_OR.TIMESHEETTABLEHEADINGS, timeSheetTableHeadings);
			 
			 blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
  	 * Method 	Name		:	validateTPSResearchPageHelpButtons()
  	 * Author				:	
  	 * Description			:	This method clicks on the Save/Reset Button
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/
	public void validateTPSResearchPageHelpButtons(String tpsResearchHelpText,String workSheetOptionHelpText,String timeCardsCompletedHelpText) throws Throwable{
		try{
			blnEventReport = true;
			//Validate TPS Research Help Text
			 click(EDTC_OR.TPSRESEARCHHELPLINK, "TPS Research Help Link");
			 assertText(EDTC_OR.TPSRESEARCHHELPTEXT, tpsResearchHelpText);
			 click(EDTC_OR.MODALDIALOGCLOSEBTN,"TPS Research Help Close Button");
			 Thread.sleep(lSleep_Low);
			

			 if(isElementPresent(EDTC_OR.WORKSHEETOPTIONSHELPLINK, "Work Sheet Option Help Link")){
				 //Validate Work Sheet Option Help Text
				 click(EDTC_OR.WORKSHEETOPTIONSHELPLINK, "Work Sheet Option Help Link");
				 assertText(EDTC_OR.WORKSHEETOPTIONSHELPTEXT, workSheetOptionHelpText);
				 click(EDTC_OR.WORKSHEETOPTIONSHELPCLOSEBTN,"Work Sheet Option Help Close Button");
				 Thread.sleep(lSleep_Low); 
			 }else{
				 SuccessReport("Validate whether Work Sheet Option Help Link is present", "Work Sheet Option Help Link is present for the User");
			 }
			 
			 click(EDTC_OR.EMPLOYEEINFOTAB,"Employee Info Tab");
			 Thread.sleep(lSleep_Low);
			 //Validate Time Cards Completed Help Text
			 click(EDTC_OR.TIMECARDSCOMPLETEDHELPLINK, "Time Cards Completed Help Link");
			 assertText(EDTC_OR.TIMECARDSCOMPLETEDHELPTEXT, timeCardsCompletedHelpText);
			 click(EDTC_OR.TIMECARDSCOMPLETEDHELPCLOSEBTN,"Time Cards Completed Help Close Button");
			 Thread.sleep(lSleep_Low);
			 
			 click(EDTC_OR.TPSRESEARCHPAGEBACKBTN, "TPS Research Page Back Button");
			 
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	
	/********************************************************************************************************
  	 * Method 	Name		:	viewHolidayTemplate()
  	 * Author				:	
  	 * Description			:	This method clicks on the Save/Reset Button
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/
	public void viewHolidayTemplate(String strTableHeadings,String strHolidayStatus,String strHolTemplate) throws Throwable{
		try{
			blnEventReport = true;
			assertText(EDTC_OR.HOLTEMPLATEINFO, strHolTemplate);
			click(EDTC_OR.HOLIDAYTEMPLATEVIEWLINK, "Holiday Template View Link");
			pageLoadingCompleted(EDTC_OR.PAGELAODER);
			waitForElementPresent(By.xpath(EDTC_OR.HOLIDAYTEMPLATEDIALOG), "Holiday Template Modal Dialog");
			//This method validates the Modal Dialog Header
			validateModalDialogHeader(By.xpath(EDTC_OR.HOLIDAYTEMPLATEDIALOG+"//h4"), "Holiday template for ");
			//This method Validates the Table Headings
			verifyTableHeading(EDTC_OR.HOLIDAYTEMPLATETABLEHEADINGS, strTableHeadings);
			
			if(strHolidayStatus.equalsIgnoreCase("No")){
				String strMsg1=getText(EDTC_OR.NOHOLIDAYTEMPMSG, "No Holiday Template Message");
				 if(strMsg1.equalsIgnoreCase("No Holidays were found")){
					 SuccessReport("Validate whether appropriate message is displayed for No Holidays", strMsg1+" Message is displayed");
				 }else{
					 failureReport("Validate whether appropriate message is displayed for No Holidays", "Message is not displayed");	 
				 }
			}
			
			click(EDTC_OR.HOLIDAYTEMPLATEDIALOGCLOSEBTN, "Close Button");
			Thread.sleep(lSleep_Low);
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	
	 /********************************************************************************************************
		 * Method 	Name		:	loginPageHelpButtons()
		 * Author				:	
		 * Description			:	This method validates loginpage help buttons
		 * Date of creation 	:	
		 * modifying person 	: 	
		 * Date of modification	:
	  ********************************************************************************************************/
	  public void validateloginPageHelpButtons(String payrollIdHelpText,String loginPageHelpText,String loginFunctionsHelpText) throws Throwable{
		 try{
			 blnEventReport = true;
			 //Validate Payroll Id Help Text
			 isEnabled(EDTC_OR.PAYROLLIDHELPLINK,"Payroll Id Help Link" );
			 click(EDTC_OR.PAYROLLIDHELPLINK, "Payroll Id Help Link");
			 assertText(EDTC_OR.PAYROLLIDHELPTEXT, payrollIdHelpText);
			 click(EDTC_OR.PAYROLLIDHELPCLOSEBTN,"Payroll Id Help Close Button");
			 Thread.sleep(lSleep_Low);
			 //Validate Login Page Help Text
			 isEnabled(EDTC_OR.LOGINPAGEHELPLINK,"Login Page Help Link" );
			 click(EDTC_OR.LOGINPAGEHELPLINK,"Login Page Help Link");
			 assertText(EDTC_OR.LOGINPAGEHELPTEXT,loginPageHelpText );
			 click(EDTC_OR.LOGINPAGEHELPCLOSEBTN,"Login Page Help Close Button");
			 Thread.sleep(lSleep_Low);
			 //Validate Torrance Payroll Help Text
			 isEnabled(EDTC_OR.LOGINFUNCHELPLINK,"Login Functions Help Link");
			 click(EDTC_OR.LOGINFUNCHELPLINK, "ogin Functions Help Link");
			 assertText(EDTC_OR.LOGINFUNCHELPPTEXT, loginFunctionsHelpText);
			 click(EDTC_OR.LOGINFUNCHELPCLOSEBTN,"ogin Functions Help Close Button");
			 Thread.sleep(lSleep_Low);
			 blnEventReport = false;
			} catch (Exception e) {
			throw e;
		}
	 }
	  
	  /********************************************************************************************************
	   * Method 	Name	:	clickOnLink()
	   * Author				:	
	   * Description		:	This method validates the validates State Code
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	   public void clickOnCreateWorkSheet(String strUser) throws Throwable{
		  try{
			  blnEventReport=true;
			  if(!strUser.equalsIgnoreCase("Verifier")){
				  click(EDTC_OR.CREATEWORKSHEETBTN, "Create WorkSheet Button");
				  Thread.sleep(lSleep_Low);
				  pageLoadingCompleted(EDTC_OR.PAGELAODER);
				  //This method validates the Page title
				  validatePageHeader(EDTC_OR.PAGEHEADER, "TPS sheet for "+empName+" - "+empID);
			  }else if(strUser.equalsIgnoreCase("Verifier")){
				  if(isElementPresent(EDTC_OR.CREATEWORKSHEETBTN, "Create WorkSheet Button")){
					  failureReport("Validate whether the Create WorkSheet Button is not present for Verifier User", "Create WorkSheet Button is present for Verifier User");
				  }else{
					 SuccessReport("Validate whether the Create WorkSheet Button is not present for Verifier User", "Create WorkSheet Button is not present for Verifier User");
				  }
			  }
			  blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
	  }
	   
	  /********************************************************************************************************
	   * Method 	Name	:	ValidatePRExceptionPTOSummary()
	   * Author				:	
	   * Description		:	This method validates the validates State Code
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	   public void ValidatePRExceptionPTOSummary(String strPRExceptionStatus,String strTableHeadings) throws Throwable{
		  try{
			  blnEventReport=true;
			  click(EDTC_OR.PREXCEPTIONPTOSUMMARYBTN,"PR Exception PTO summary Button");
			  
			  //This method validates the Page title
			  validatePageHeader(EDTC_OR.PREXCEPTIONMODALDIALOGHEADER, "PR exceptions for "+empName+" ("+empID+")");
			  //Assert Rows in red indicate pending entries or dates that span a year end boundary. 
			  assertText(EDTC_OR.PREXCEPTIONPENDINGENTRIESMSG, "Rows in red span a year end boundary");
			  //This method validates the PR Exception PTO summary Table Headings
			  verifyTableHeading(EDTC_OR.PREXCEPTIONPTOSUMMARYTABLEHEADINGS, strTableHeadings);
			  
			  if(strPRExceptionStatus.equalsIgnoreCase("Y")){
				  
				  
				  
			  }else if(strPRExceptionStatus.equalsIgnoreCase("N")){
				  isElementDisplayed(EDTC_OR.NOPREXCEPTIONRECORDSMSG, "No PR Exception records found");
			  }
			  
			  click(EDTC_OR.PREXCEPTIONCLOSEBTN, "Close Button");
			  Thread.sleep(lSleep_Low);
			  blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
	  }
	   
   /********************************************************************************************************
	   * Method 	Name	:	ValidateTimeRecordPTODetails()
	   * Author				:	
	   * Description		:	This method validates the validates State Code
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	:
	  ********************************************************************************************************/	 
	   public void ValidateTimeRecordPTODetails(String strPRExceptionStatus,String strTableHeadings) throws Throwable{
		  try{
			  blnEventReport=true;
			  click(EDTC_OR.TIMERECORDPTODETAILSBTN,"Time Record PTO Details Button");
			  
			  //This method validates the Page title
			  validatePageHeader(EDTC_OR.PAGEHEADER, "TIME RECORDS FOR "+empName+" ("+empID+")");
			  //Assert Rows in red indicate pending entries or dates that span a year end boundary. 
			  assertText(EDTC_OR.TIMERECORDENDINGENTRIESMSGS, "Rows in red span a year end boundary");
			  //This method validates the PR Exception PTO summary Table Headings
			  verifyTableHeading(EDTC_OR.TIMERECORDSTABLEHEADINGS, strTableHeadings);
			  
			  
			  if(strPRExceptionStatus.equalsIgnoreCase("Y")){
		
			  }else if(strPRExceptionStatus.equalsIgnoreCase("N")){
				  isElementDisplayed(EDTC_OR.NOPREXCEPTIONRECORDSMSG, "No PR Exception records found");
			  }
			  Thread.sleep(lSleep_Low);
			  blnEventReport=false;
			} catch (Exception e) {
				throw e;
			}
	  }

	   
	/********************************************************************************************************
	 * Method 	Name		:	createWorksheetPageHelpButtons()
	 * Author				:	
	 * Description			:	This method validates create worksheet page help buttons
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	:
	 ********************************************************************************************************/
	  public void createWorksheetPageHelpButtons(String ptoHoursDueHelpText,String preparesEditOptionHelpText,String verifiersEditOptionHelpText,String revertToVerificationnHelpText,String tpsHeaderHelpText,String saveHelpText) throws Throwable{
		 try{
			 blnEventReport = true;
			 
			 //Validate Tps Header Help Text
			 isEnabled(EDTC_OR.TPSHEADERHELPLINK,"Tps Header Help Link" );
			 JSClick(EDTC_OR.TPSHEADERHELPLINK,"Tps Header Help Link");
			 assertText(EDTC_OR.TPSHEADERHELPTEXT, tpsHeaderHelpText);
			 click(EDTC_OR.TPSHEADERHELPCLOSEBTN,"Tps Header Help Close Button");
			 Thread.sleep(lSleep_Low);
			 
			 
			 
			 moveToElement(EDTC_OR.PTOHOURSDUEHELPLINK,"PTO Hours Due Help Link" );
			 //Validate PTO Hours Due Help Text
			 isEnabled(EDTC_OR.PTOHOURSDUEHELPLINK,"PTO Hours Due Help Link" );
			 JSClick(EDTC_OR.PTOHOURSDUEHELPLINK, "PTO Hours Due Help Link");
			 assertText(EDTC_OR.PTOHOURSDUEHELPTEXT, ptoHoursDueHelpText);
			 click(EDTC_OR.PTOHOURSDUEHELPCLOSEBTN,"PTO Hours Due Help Close Button");
			 Thread.sleep(lSleep_Low);
			 
			 moveToElement(EDTC_OR.PREPARESEDITOPTIONHELPLINK,"Prepares Edit Option Help Link" );
			 //Validate Prepares Edit Option Help Text
			 isEnabled(EDTC_OR.PREPARESEDITOPTIONHELPLINK,"Prepares Edit Option Help Link" );
			 JSClick(EDTC_OR.PREPARESEDITOPTIONHELPLINK, "Prepares Edit Option Help Link");
			 assertText(EDTC_OR.PREPARESEDITOPTIONHELPTEXT, preparesEditOptionHelpText);
			 click(EDTC_OR.PREPARESEDITOPTIONHELPCLOSEBTN,"Prepares Edit Option Help Close Button");
			 Thread.sleep(lSleep_Low);
		
			 moveToElement(EDTC_OR.VERIFIERSEDITOPTIONHELPLINK,"Verifiers Edit Option Help Link" );
			 //Validate Verifiers Edit Option Help Text
			 isEnabled(EDTC_OR.VERIFIERSEDITOPTIONHELPLINK,"Verifiers Edit Option Help Link" );
			 JSClick(EDTC_OR.VERIFIERSEDITOPTIONHELPLINK, "Verifiers Edit Option Help Link");
			 assertText(EDTC_OR.VERIFIERSEDITOPTIONHELPTEXT, verifiersEditOptionHelpText);
			 click(EDTC_OR.VERIFIERSEDITOPTIONHELPCLOSEBTN,"Verifiers Edit Option Help Close Button");
			 Thread.sleep(lSleep_Low);
		
			 moveToElement(EDTC_OR.REVERTTOVERIFICATIONHELPLINK,"Revert to Varification Help Link");
			 //Validate Revert To Verification Help Text
			 isEnabled(EDTC_OR.REVERTTOVERIFICATIONHELPLINK,"Revert to Varification Help Link" );
			 JSClick(EDTC_OR.REVERTTOVERIFICATIONHELPLINK, "Revert to Varification Help Link");
			 assertText(EDTC_OR.REVERTTOVERIFICATIONHELPTEXT, revertToVerificationnHelpText);
			 click(EDTC_OR.REVERTTOVERIFICATIONHELPCLOSEBTN,"Revert to Verification Help Close Button");
			 Thread.sleep(lSleep_Low);
		
			 
			 //Validate Save Help Text present at the Bottom
			 isEnabled(EDTC_OR.BOTTOMSAVEHELPLINK,"Save Help Link present at the Bottom of the page" );
			 JSClick(EDTC_OR.BOTTOMSAVEHELPLINK,"Save Help Link");
			 assertText(EDTC_OR.SAVEHELPTEXT, saveHelpText);
			 click(EDTC_OR.SAVEHELPCLOSEBTN,"Save Help Close Button");
			 Thread.sleep(lSleep_Low);
			 
			 moveToElement(EDTC_OR.TOPSAVEHELPLINK,"Save Help Link present at the Top of the page" );
//			 //Validate Save Help Text present at the Top
//			 isEnabled(EDTC_OR.TOPSAVEHELPLINK,"Save Help Link present at the Top of the page" );
//			 click(EDTC_OR.TOPSAVEHELPLINK,"Save Help Link");
//			 assertText(EDTC_OR.SAVEHELPTEXT, saveHelpText);
//			 click(EDTC_OR.SAVEHELPCLOSEBTN,"Save Help Close Button");
			 Thread.sleep(lSleep_Low);
			 
			 
			 
			 
			 blnEventReport = false;
			} catch (Exception e) {
			throw e;
		}
	 }


   /********************************************************************************************************
    * Method 	Name	:	clickOnField()
    * Author				:	
    * Description		:	This method validates the validates State Code
    * Date of creation 	:	
    * modifying person 	: 	
    * Date of modification	:
    ********************************************************************************************************/		   
	public void clickOnField(By loc, String locName) throws Throwable {
		try {
			blnEventReport = true;
			waitForElementPresent(loc, locName);
			click(loc, locName);
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}

	
	/********************************************************************************************************
	 * Method 	Name	:	ValidateTimeRecordPTODetails()
	 * Author				:	
	 * Description		:	This method validates the validates State Code
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	:
    ********************************************************************************************************/		   
	 public void validateWorkSheetStatus(String strEdit_Verify) throws Throwable {
		try {
			blnEventReport = false;
			if(strEdit_Verify.equalsIgnoreCase("Edits")){
				 click(EDTC_OR.PENDINGEDITSBTN,"Pending Edits Button");
				 waitForElementPresent(EDTC_OR.SEARCHTEXTFIELD, "Search table Text field");
				 type(EDTC_OR.SEARCHTEXTFIELD,empID, "Search table Text field");
				 waitForElementPresent(EDTC_OR.SEARCHTEXTFIELD, "Search table Text field");
				 type(EDTC_OR.SEARCHTEXTFIELD,empID, "Search table Text field");
				 
				 if(isElementPresent(By.xpath(EDTC_OR.RECORDSTABLE+"//table//tbody//tr"), "Records")){
					SuccessReport("Validate whether the WorkSheet status is Edit", "WorkSheet status is Edit");
				 }else{
					 SuccessReport("Validate whether the WorkSheet status is Edit", "Record is not found"); 
				 }
			 }else if(strEdit_Verify.equalsIgnoreCase("Verifies")){
				 click(EDTC_OR.PENDINGVERIFIESBTN,"Pending Verifies Button");
				 waitForElementPresent(EDTC_OR.SEARCHTEXTFIELD, "Search table Text field");
				 type(EDTC_OR.SEARCHTEXTFIELD,empID, "Search table Text field");
				 waitForElementPresent(EDTC_OR.SEARCHTEXTFIELD, "Search table Text field");
				 type(EDTC_OR.SEARCHTEXTFIELD,empID, "Search table Text field");
				 if(isElementPresent(By.xpath(EDTC_OR.RECORDSTABLE+"//table//tbody//tr"), "Records")){
					SuccessReport("Validate whether the WorkSheet status is Verify", "WorkSheet status is Verify");
				 }else{
					 SuccessReport("Validate whether the WorkSheet status is Verify", "Record is not found"); 
				 }
			 }
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	 /********************************************************************************************************
	  * Method 	Name		:	validateEditWorkSheetDropDownStatus()
	  * Author				:	
	  * Description			:	This method validates the validates State Code
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification:
	  ********************************************************************************************************/
	public void validateEditWorkSheetDropDownStatus() throws Throwable {
		try {
			blnEventReport = true;
			 //Check the Default Status of all Hours to be processed Drop Down elements
			  validateDropDownStatus(EDTC_OR.HOURSTOBEPROCESSEDDROPDOWNS, "Hours to be processed");
			  //Check the Default Status of Hours text fields
			  validateTextFieldStatus(EDTC_OR.HOURSTEXTFIELDS, "Hours Text Fields");
			  
			  //Check the Default Status of all Deductions Dollars Drop Down elements
			  validateDropDownStatus(EDTC_OR.DEDUCTIONSDOLLARSDROPDOWNS, "Deductions Dollars");
			  //Check the Default Status of all Deductions Dollars text fields
			  validateTextFieldStatus(EDTC_OR.DEDUCTIONSDOLLARSTEXTFIELDS, "Deductions Dollars");
			  
			  //Check the Default Status of all Variable Pay Drop Down elements
			  validateDropDownStatus(EDTC_OR.VARIABLEPAYDROPDOWNS, "Variable Pay");
			  //Check the Default Status of Variable Pay text fields
			  validateTextFieldStatus(EDTC_OR.VARIABLEPAYTEXTFIELDS, "Variable Pay Dollars");
			  
			  //Check the Default Status of all Deductions Percentage Drop Down elements
			  validateDropDownStatus(EDTC_OR.DEDUCTIONSPERCENTAGEDROPDOWNS, "Deductions Percentage");
			  //Check the Default Status of all Deductions Percentage text fields
			  validateTextFieldStatus(EDTC_OR.DEDUCTIONSPERCENTAGETEXTFIELDS, "Percentage");
			  
			  //Check the Default Status of all Reclassify Earnings Drop Down elements
			  validateDropDownStatus(EDTC_OR.RECLASSIFYEARNINGSDROPDOWNS, "Reclassify Earnings");
			  //Check the Default Status of all Reclassify Earnings text fields
			  validateTextFieldStatus(EDTC_OR.RECLASSIFYEARNINGSHOURSTEXTFIELDS, "Reclassify Earnings Hours");
			
			  //Check the Default Status of all PTO Reconciliations Drop Down elements
			  validateDropDownStatus(EDTC_OR.RECLASSIFYEARNINGSDROPDOWNS, "PTO Reconciliations");
			  //Check the Default Status of all PTO Reconciliations Hours text fields
			  validateTextFieldStatus(EDTC_OR.RECLASSIFYEARNINGSHOURSTEXTFIELDS, "PTO Reconciliations Hours");
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	
	 /********************************************************************************************************
	  * Method 	Name		:	validateEditWorkSheetPage()
	  * Author				:	
	  * Description			:	This method validates the validates State Code
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification:
	  ********************************************************************************************************/
		public void validateEditWorkSheetPage() throws Throwable{
			try{
				blnEventReport = true;
				 String strText="";
				 //Validate whether the Employee Name is displayed 
				  strText=getText(EDTC_OR.EMPNAMELABEL, "Employee Name Label");
				  if(strText.contains(empName+" "+"empID")){
					  SuccessReport("Validate whether the Employee Name and ID are displayed", "Employee Name and ID are displayed");
				  }else{
					  SuccessReport("Validate whether the Employee Name and ID are displayed", "Employee Name and ID are displayed");
				  }
				  //Validate the Fields
				  isElementDisplayed(EDTC_OR.STDHOURSVALUE, "Std Hours");
				  isElementDisplayed(EDTC_OR.COMPANYIDVALUE, "Company ID");
				  isElementDisplayed(EDTC_OR.WORKSTATEVALUE, "Work State");
				  isElementDisplayed(EDTC_OR.ACCRUEDPTOVALUE, "Accrued PTO");
				  isElementDisplayed(EDTC_OR.CURRYEARPTOVALUE, "Curr year PTO");
				  isElementDisplayed(EDTC_OR.PTORECORDEDVALUE, "PTO Recorded");
				  isElementDisplayed(EDTC_OR.LASTTIMECARDVALUE, "Last Time Record");
				  isElementDisplayed(EDTC_OR.TERMDATEVALUE, "Term Date");
				  isElementDisplayed(EDTC_OR.HOURLYRATETEXTFIELD, "Hourly Rate");
				  isElementDisplayed(EDTC_OR.PAYGROUPTEXTFIELD, "Pay Group");
				  isElementDisplayed(EDTC_OR.ADDLPTOTAKENVALUE, "Addl PTO taken");
				  isElementDisplayed(EDTC_OR.PAIDTHRUDATETEXTFIELD, "Paid thru date");
				  isElementDisplayed(EDTC_OR.PTOHOURSDUETEXTFIELD, "PTO hours due");

				  
				  //Validate the Default Status
				  isEnabled(EDTC_OR.HOURLYRATETEXTFIELD, "Hourly Rate");
				  isEnabled(EDTC_OR.PAYGROUPTEXTFIELD, "Pay Group");
				  isEnabled(EDTC_OR.ADDLPTOTAKENVALUE, "Addl PTO taken");
				  isEnabled(EDTC_OR.PAIDTHRUDATETEXTFIELD, "Paid thru date");
				  isEnabled(EDTC_OR.PTOHOURSDUETEXTFIELD, "PTO hours due");
				  
				  //Validate whether the Save Buttons are displayed 
				  int btnCount=driver.findElements(EDTC_OR.SAVEBTN).size();
				  if(btnCount==2){
					  SuccessReport("Validate whether Two Save Buttons are displayed", "Two Save Buttons are displayed");
				  }else{
					  failureReport("Validate whether Two Save Buttons are displayed", "Two Save Buttons are not displayed");
				  }
				  
				  //Validate the Discard,Calculate,Back,Revert to Verification buttons,Notes Text Area,Selected Verifier and Suggested Verifier drop downs Fields
				  isElementDisplayed(EDTC_OR.CALCULATEBTN, "Calculate Button");
				  isElementDisplayed(EDTC_OR.REVERTTOVERIFICATIONBTN, "Revert to Verification Button");
				  isElementDisplayed(EDTC_OR.NOTESTEXTAREA, "Notes Text Area");
				  isElementDisplayed(EDTC_OR.READYFORVERIFICATIONCHECKBOX, "Ready for verification Check box");
				  isElementDisplayed(EDTC_OR.SUGGESTEDVERIFIERDROPDOWN, "Suggested verifier Drop dpwn");
				  isElementDisplayed(EDTC_OR.BWRADIOBTN, "Pay Cycle -BW Radio Button");
				  isElementDisplayed(EDTC_OR.SMRADIOBTN, "Pay Cycle -SM Radio Button");
				  isElementDisplayed(EDTC_OR.SELECTEMPBTN, "Back to Select Employee Button");
				  isElementDisplayed(EDTC_OR.RESEARCHBTN, "Research Button");
				  
				  
				  //Validate the default status of the Discard,Calculate,Back,Revert to Verification buttons,Notes Text Area,Selected Verifier and Suggested Verifier drop downs
				  isEnabled(EDTC_OR.CALCULATEBTN, "Calculate Button");
				  isEnabled(EDTC_OR.NOTESTEXTAREA, "Notes Text Area");
				  isEnabled(EDTC_OR.BWRADIOBTN, "Pay Cycle -BW Radio Button");
				  isEnabled(EDTC_OR.SMRADIOBTN, "Pay Cycle -SM Radio Button");
				  isEnabled(EDTC_OR.SELECTEMPBTN, "Back to Select Employee Button");
				  isEnabled(EDTC_OR.RESEARCHBTN, "Research Button");
				  
				  //Suggested Preparer drop down and Notes to Preparer Text Area
				  isDisabled(EDTC_OR.SUGGESTEDPREPARERDROPDOWN, "Suggested Preparer drop down");
				  isDisabled(EDTC_OR.NOTESTOPREPARERTEXTAREA, "Notes to Preparer Text Area");
		
				  
				  //This method validates the Drop down and Text Field Default Status
				  validateEditWorkSheetDropDownStatus();
				
				blnEventReport = false;
			} catch (Exception e) {
				throw e;
			}
		}

	/********************************************************************************************************
	  * Method 	Name		:	validateSaveButtonStatus()
	  * Author				:	
	  * Description			:	This method validates the validates State Code
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification:
	  ********************************************************************************************************/ 
	  public boolean validateSaveButtonStatus(String strUserType) throws Throwable {
		try {
			blnEventReport = true;
			boolean bFlag=false;
			if(strUserType.equalsIgnoreCase("Verifier")){
				if(isDisabled(EDTC_OR.BOTTOMSAVEBTNBTN, "Save Button (Present at the Bottom of the Page)") && isDisabled(EDTC_OR.TOPSAVEBTNBTN, "Save Button (Present at the Top of the Page)")){
					SuccessReport("Validate whether Save Buttons (Top and Bottom) are Disabled for Verifier", "Save Buttons (Top and Bottom) are Disabled for Verifier");
					bFlag=false;
				}else{
					failureReport("Validate whether Save Buttons (Top and Bottom) are Disabled for Verifier", "Save Buttons (Top and Bottom) are in Enabled state for Verifier");
					bFlag=false;
				}
			}else if(strUserType.equalsIgnoreCase("All") || strUserType.equalsIgnoreCase("Editor")){
				if(isEnabled(EDTC_OR.BOTTOMSAVEBTNBTN, "Save Button (Present at the Bottom of the Page)") && isEnabled(EDTC_OR.TOPSAVEBTNBTN, "Save Button (Present at the Top of the Page)")){
					SuccessReport("Validate whether Save Buttons (Top and Bottom) are Enabled for Admin with All and Editor Privileges", "Save Buttons (Top and Bottom) are Enabled for Validate whether Save Buttons (Top and Bottom) are Enabled for Admin with All and Editor Privileges");
					bFlag=true;
				}
			}
			blnEventReport = true;
			return bFlag;
		} catch (Exception e) {
			throw e;
		}
	}
	  
  /********************************************************************************************************
	 * Method 	Name		:	forgotPassword()
	 * Author				:	
	 * Description			:	This method will validate the page header
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	: 
	 * @throws Throwable	:
	 ********************************************************************************************************/
		public void forgotPassword() throws Throwable{
			try{
				blnEventReport=true;
				String strMainWin=driver.getWindowHandle();
				click(EDTC_OR.FORGOTPWDCLICKHERELINK, "Forgot password? Click Here -  Link");
				Thread.sleep(lSleep_Medium);
				Set<String> strWindows=driver.getWindowHandles();
				if((strWindows.size()>1)){
					for(String window:strWindows){
						if(!window.equalsIgnoreCase(strMainWin)){
							driver.switchTo().window(window);
							break;
						}
					}
					if(isElementPresent(EDTC_OR.PWDRESETREQUESTFORMHEADER, "Password Reset Request Form Screen")){
						SuccessReport("Validate whether the user is navigated to Password Reset Request Form Screen", "User is navigated to Password Reset Request Form Screen");
					}else{
						failureReport("Validate whether the user is navigated to Password Reset Request Form Screen", "User is not navigated to Password Reset Request Form Screen");
					}
					driver.close();
					driver.switchTo().window(strMainWin);
				}else{
					if(isElementPresent(EDTC_OR.PWDRESETREQUESTFORMHEADER, "Password Reset Request Form Screen")){
						SuccessReport("Validate whether the user is navigated to Password Reset Request Form Screen", "User is navigated to Password Reset Request Form Screen");
					}else{
						failureReport("Validate whether the user is navigated to Password Reset Request Form Screen", "User is not navigated to Password Reset Request Form Screen");
					}
				}
				blnEventReport=false;
			}catch(Exception e){
				throw e;
			}
		}
		  
	/********************************************************************************************************
	 * Method 	Name		:	validateEmpBasicInfo()
	 * Author				:	
	 * Description			:	This method will validate the page header
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	: 
	 * @throws Throwable	:
	 ********************************************************************************************************/		
	 public void validateEmpBasicInfo(String SheetName,int iLoop) throws Throwable{
		 try{
			 blnEventReport=true;
			 String strEmpName=Excelobject.getCellData(SheetName, "Employee Name", iLoop);
			 String strEmpEmail=Excelobject.getCellData(SheetName, "Employee Email", iLoop);
			 String strEmpTimekeeper1=Excelobject.getCellData(SheetName, "TimeKeeper1", iLoop);
			 String strEmpTimekeeper2=Excelobject.getCellData(SheetName, "TimeKeeper2", iLoop);
			 String strAddlEmp_GrantSuppPay=Excelobject.getCellData(SheetName, "Additional Employee who can grant supplemental pay", iLoop);
			 String strNoPTOEmail=Excelobject.getCellData(SheetName, "No PTO Email", iLoop);
			 String strNoGenEmail=Excelobject.getCellData(SheetName, "No Gen Email", iLoop);
			 String strNoTimeSheetReminder=Excelobject.getCellData(SheetName, "No routine timesheet reminders", iLoop);
			 String strHRMgr=Excelobject.getCellData(SheetName, "HR Manager", iLoop);
			 String strCompany=Excelobject.getCellData(SheetName, "Company", iLoop);
			 String strPosition=Excelobject.getCellData(SheetName, "Position", iLoop);
			 String strInputType=Excelobject.getCellData(SheetName, "Input Type", iLoop);
			 String strPayType=Excelobject.getCellData(SheetName, "Pay Type", iLoop);
			 String strLevel=Excelobject.getCellData(SheetName, "Level", iLoop);
			 String strStateCode=Excelobject.getCellData(SheetName, "State Code", iLoop);
			 String strSickLeaveOverride=Excelobject.getCellData(SheetName, "Sick Leave Override", iLoop);
			 String strTPSPrivileges=Excelobject.getCellData(SheetName, "TPS Privileges", iLoop);
			 String strHolidayTemplate=Excelobject.getCellData(SheetName, "Holiday Template", iLoop);
			 String strScheduledHours=Excelobject.getCellData(SheetName, "Scheduled Hours", iLoop);	

			 waitForElementPresent(EDTC_OR.BASICINFOSECTIONTAB, "Basic Information Tab");
			 if(browsertype.equalsIgnoreCase("Safari")){
				 click(EDTC_OR.BASICINFOSECTIONTAB, "Basic Information Tab");
				 Thread.sleep(lSleep_Low);
			 }else{
				 JSClick(EDTC_OR.BASICINFOSECTIONTAB, "Basic Information Tab");
				 Thread.sleep(lSleep_Low);
			 }
			 
			 //If Employee Name is not Empty enter the details
			  if(!strEmpName.isEmpty()){
				  validateTextFieldValue(EDTC_OR.EMPNAMETEXTFIELD, strEmpName, "Employe Name Text Field");
			  }
			  //If Employee Email is not Empty enter the details
			  if(!strEmpEmail.isEmpty()){
				  validateTextFieldValue(EDTC_OR.EMPEMAILTEXTFIELD, strEmpEmail, "Employe Email Text Field");
			  }
			  //If Timekeeper1 is not Empty enter the details
			  if(!strEmpTimekeeper1.isEmpty()){
				  validateDropDownValue(EDTC_OR.TIMEKEEPERDROPDOWN1, strEmpTimekeeper1, "Timekeeper Drop Down");
			  }
			 
			  //If strEmpTimekeeper2 is not Empty enter the details
			  if(!strEmpTimekeeper2.isEmpty()){
				  validateDropDownValue(EDTC_OR.TIMEKEEPERDROPDOWN2, strEmpTimekeeper2, "TimekeeperID Text Field");
			  }
			 
			  //If Additional Employee who can grant supplemental pay is not Empty enter the details
			  if(!strAddlEmp_GrantSuppPay.isEmpty()){
				  validateTextFieldValue(EDTC_OR.SUPPPAYAPPROVERTEXTFIELD, strAddlEmp_GrantSuppPay, "Additional Employee who can grant supplemental pay Text Field");
			  }
			  
			  //If No PTO Email Yes, Check the Checkbox
			  if(strNoPTOEmail.equalsIgnoreCase("Yes")){
				 isChecked_Report(EDTC_OR.NOPTOEMAILCHECKBOX, "No PTO Email Checkbox");
				  
			  }
			  
			  //If No Gen Email Yes, Check the Checkbox
			  if(strNoGenEmail.equalsIgnoreCase("Yes")){
				  isChecked_Report(EDTC_OR.NOGENEMAILCHECKBOX, "No Gen Email Checkbox");
			  }
					
			 //If No routine timesheet reminders Checkbox flag is Yes, Check the Checkbox
			  if(strNoTimeSheetReminder.equalsIgnoreCase("Yes")){
				  isChecked_Report(EDTC_OR.NOTIMESHEETREMINDERCHECKBOX, "No routine timesheet reminders Checkbox");
			  }
			  
			  //If HR Manager Checkbox flag is Yes, Check the Checkbox
			  if(strHRMgr.equalsIgnoreCase("Yes")){
				  isChecked_Report(EDTC_OR.HRMGRCHECKBOX, "HR Manager Checkbox");
				}
			  
			  //If Company is not Empty enter the details
			  if(!strCompany.isEmpty()){
				  validateDropDownValue(EDTC_OR.COMPANYDROPDOWN, strCompany, "Company Drop Down");
			  }
			  //If Position is not Empty enter the details
			  if(!strPosition.isEmpty()){
				  validateDropDownValue(EDTC_OR.POSITIONDROPDOWN, strPosition, "Position Drop Down");
			  }
			  //If Input Type is not Empty enter the details
			  if(!strInputType.isEmpty()){
				  validateDropDownValue(EDTC_OR.INPUTTYPEDROPDOWN, strInputType, "Input type Drop Down");
			  }
			  //If Input Type is not Empty enter the details
			  if(!strPayType.isEmpty()){
				  validateDropDownValue(EDTC_OR.PAYTYPEDROPDOWN, strPayType, "Pay Type Drop Down");
			  }
			  //If Level is not Empty enter the details
			  if(!strLevel.isEmpty()){
				  validateDropDownValue(EDTC_OR.LEVELDROPDOWN, strLevel, "Level Drop Down");
			  }
			  //If State Code is not Empty enter the details
			  if(!strStateCode.isEmpty()){
				  validateDropDownValue(EDTC_OR.STATECODEDROPDOWN, strStateCode, "State Code Drop Down");
			  }
			  
			  //If Override Sick Leave is not Empty enter the details
			  if(!strSickLeaveOverride.isEmpty()){
				  validateDropDownValue(EDTC_OR.SICKLEAVEOVERRIDEDROPDOWN, strSickLeaveOverride, "Override Sick Leave Drop Down");
			  }
			  //If TPS Privileges is not Empty enter the details
			  if(!strTPSPrivileges.isEmpty()){
				  validateDropDownValue(EDTC_OR.TPSPRIVILEGESDROPDOWN, strTPSPrivileges, "TPS Privileges Drop Down");
			  }
			  //If Holiday Template is not Empty enter the details
			  if(!strHolidayTemplate.isEmpty()){
				  validateTextFieldValue(EDTC_OR.HOLIDAYTEMPLATEDROPDOWN, strHolidayTemplate, "Holiday Template Drop Down");
			  }
			  
			  if(!strScheduledHours.isEmpty()){
				  String[] arrayValues=strScheduledHours.split(",");
				  boolean bFlag=false; 
				  List<WebElement> elements=driver.findElements(EDTC_OR.REGULARLYSCHEDULEDHRS);
				  for(int i=0;i<arrayValues.length;i++){
					  if(!arrayValues[i].isEmpty()){
						if(!arrayValues[i].equalsIgnoreCase(elements.get(i).getAttribute("value"))){
							bFlag=true;
							break;
						}
					  }
				  }if(bFlag){
					  failureReport("Validate the Regular Scheduled Hours", "Incorrect hours");
				  }else{
					  SuccessReport("Validate the Regular Scheduled Hours", "Hours are added correctly");
				  }
			  }
			 
			  
			 blnEventReport=false;
		 }catch(Exception e){
			 throw e;
		 }
	 }
 
   /********************************************************************************************************
   * Method 	Name    :	validateTextFieldValue()
   * Author				:	
   * Description		:	This method will validate the page header
   * Date of creation 	:	
   * modifying person 	: 	
   * Date of modification	: 
   * @throws Throwable	:
   ********************************************************************************************************/
	 public void validateTextFieldValue(By Loc,String strValue,String locName) throws Throwable {
		try {
			String strTextFieldValue=getAttribute(Loc, "value", locName+" Text Field");
			if(strTextFieldValue.equalsIgnoreCase(strValue)){
				SuccessReport("Validate the value in the \""+locName+"\" text field", "\""+strValue+"\" is present in the \""+locName+"\" text field");
			}else{
				failureReport("Validate the value in the \""+locName+"\" text field", "\""+strValue+"\" is not present in the \""+locName+"\" text field");
			}
		} catch (Exception e) {
			throw e;
		}
	}
	 /********************************************************************************************************
	   * Method 	Name    :	validateTextFieldValue()
	   * Author				:	
	   * Description		:	This method will validate the page header
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	: 
	   * @throws Throwable	:
     ********************************************************************************************************/ 
	  public void validateDropDownValue(By Loc,String strValue,String locName) throws Throwable {
		try {
			Select s = new Select(driver.findElement(Loc));
			String strDropDownValue = s.getFirstSelectedOption().getText().trim();
			if(strDropDownValue.equalsIgnoreCase(strValue)){
				SuccessReport("Validate whether  \""+strValue+"\" is selected in the \""+locName+"\"  drop down", "\""+strValue+"\" is selected");
			}else{
				failureReport("Validate whether  \""+strValue+"\" is selected in the \""+locName+"\"  drop down", "Value is not selected");
			}
		} catch (Exception e) {
			throw e;
		}
	}
	 /********************************************************************************************************
	  * Method 	Name  	    :	validateTimeSheetEntryPage()
	  * Author				:	
	  * Description		    :	This method will validate the page header
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification: 
	  * @throws Throwable	:
     ********************************************************************************************************/   
	 public void validateTimeSheetEntryPage(String strTableHeadings,String strValue,String strWeek) throws Throwable {
		try {
			blnEventReport = true;
			//This method validates the Table Headings
			verifyTableHeading(EDTC_OR.TIMESHEETENTRYTABLEHEADINGS,strTableHeadings);
			
			//Validate the 
			String[] strHeading=strValue.split(",");
			java.util.List<WebElement> headings=driver.findElements(By.xpath(EDTC_OR.TIMESHEETENTRYTABLE));
			int flag=0;
			for(int i=1;i<=headings.size();i++){
				String strText=getText(By.xpath(EDTC_OR.TIMESHEETENTRYTABLE+"["+i+"]/td[1]"), "").trim();
				if(!strText.isEmpty()){
					for(int j=0;j<strHeading.length;j++){
						if(strText.replaceAll(" ", "").contains(strHeading[j].replaceAll(" ", ""))){						
							flag++;
							break;
						}								
					}	
				}
				
			}
			if(flag==strHeading.length){
				SuccessReport("Validate whether following values are available in the table "+strValue,"values are available");
			}
			else{
				failureReport("Validate whether following values are available in the table "+strValue,"values are not available");
			}
			
			 
			isElementDisplayed(EDTC_OR.PRINFORMATTBTN, "Print Button");
			isElementDisplayed(EDTC_OR.CHANGETOWEEKENDINGDROPDOWN, "Change to Week Ending on Drop Down");
			isElementDisplayed(EDTC_OR.STARTOVERBTN, "Start Over Button");
			isElementDisplayed(EDTC_OR.SAVEBTN, "Save Button");
			
			
			isEnabled(EDTC_OR.PRINFORMATTBTN, "Print Button");
			isEnabled(EDTC_OR.CHANGETOWEEKENDINGDROPDOWN, "Change to Week Ending on Drop Down");
			isEnabled(EDTC_OR.STARTOVERBTN, "Start Over Button");
			isEnabled(EDTC_OR.SAVEBTN, "Save Button");
			
			
			if(userType.equalsIgnoreCase("Punch FTN")){
				isElementDisplayed(EDTC_OR.TIMEOFFDETAILSBTN, "Time Off Details Button");
				isElementDisplayed(EDTC_OR.CALCULATEHRSBTN, "Calculate Hours Button");
				isElementDisplayed(EDTC_OR.PUNCHDETAILSBTN, "Punch Details Button");
				isEnabled(EDTC_OR.TIMEOFFDETAILSBTN, "Time Off Details Button");
				isEnabled(EDTC_OR.CALCULATEHRSBTN, "Calculate Hours Button");
				isEnabled(EDTC_OR.PUNCHDETAILSBTN, "Punch Details Button");
			}else if(userType.equalsIgnoreCase("Punch FTE")){
				isElementDisplayed(EDTC_OR.TIMEOFFDETAILSBTN, "Time Off Details Button");
				isElementDisplayed(EDTC_OR.PUNCHDETAILSBTN, "Punch Details Button");
				isEnabled(EDTC_OR.TIMEOFFDETAILSBTN, "Time Off Details Button");
				isEnabled(EDTC_OR.PUNCHDETAILSBTN, "Punch Details Button");
				
				if(isElementPresent(EDTC_OR.CALCULATEHRSBTN, "Calculate Hours Button")){
					failureReport("Calculate Hours Button should not be present", "Calculate Hours Button  is present");
				}else{
					SuccessReport("Calculate Hours Button should not be present", "Calculate Hours Button is not present");
				}
			}else if(userType.equalsIgnoreCase("HRN")){
				isElementDisplayed(EDTC_OR.CALCULATEHRSBTN, "Calculate Hours Button");
				isEnabled(EDTC_OR.CALCULATEHRSBTN, "Calculate Hours Button");
				
				if(isElementPresent(EDTC_OR.PUNCHDETAILSBTN, "Punch Details Button") || isElementPresent(EDTC_OR.TIMEOFFDETAILSBTN, "Time Off Details Button")){
					failureReport("Punch Details and  Time Off Details Button should not be present", "Punch Details and  Time Off Details Button are present");
				}else{
					SuccessReport("Punch Details and  Time Off Details Button should not be present", "Punch Details and  Time Off Details Button are not present");
				}
				
			}else if(userType.equalsIgnoreCase("Standard FTE")){
				isElementDisplayed(EDTC_OR.TIMEOFFDETAILSBTN, "Time Off Details Button");
				isEnabled(EDTC_OR.TIMEOFFDETAILSBTN, "Time Off Details Button");
				
				if(isElementPresent(EDTC_OR.CALCULATEHRSBTN, "Calculate Hours Button") || isElementPresent(EDTC_OR.PUNCHDETAILSBTN, "Punch Details Button")){
					failureReport("Punch Details and Calculate Hours Button should not be present", "Punch Details and  Calculate Hours Button are present");
				}else{
					SuccessReport("Punch Details and Calculate Hours Button should not be present", "Punch Details and  Calculate Hours Button are not present");
				}
				
			}else if(userType.equalsIgnoreCase("Standard FTN")){
				isElementDisplayed(EDTC_OR.TIMEOFFDETAILSBTN, "Time Off Details Button");
				isEnabled(EDTC_OR.TIMEOFFDETAILSBTN, "Time Off Details Button");
				isElementDisplayed(EDTC_OR.CALCULATEHRSBTN, "Calculate Hours Button");
				isEnabled(EDTC_OR.CALCULATEHRSBTN, "Calculate Hours Button");
				
				if(isElementPresent(EDTC_OR.PUNCHDETAILSBTN, "Punch Details Button")){
					failureReport("Punch Details Button should not be present", "Punch Details Button is present");
				}else{
					SuccessReport("Punch Details Button should not be present", "Punch Details Button is not present");
				}
				
			}
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	 /********************************************************************************************************
	  * Method 	Name  	    :	enterTimeSheet()
	  * Author				:	
	  * Description		    :	This method will validate the page header
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification: 
	  * @throws Throwable	:
     ********************************************************************************************************/  
	 public void timeSheetEntryHelpButton(String empHoursEntryHelpText,String printFormatHelpText,String hrsProcessingHelpText) throws Throwable{
		 try{
			 blnEventReport = true;
			 //Validate Employee Hourly Entry Help Text
			 click(EDTC_OR.EMPHRSENTRYHELPLINK, "Employee Hourly Entry Help Link");
			 assertText(EDTC_OR.MODALDIALOGTEXT,empHoursEntryHelpText);
			 click(EDTC_OR.MODALDIALOGCLOSEBTN,"Employee Hourly Entry Help Close Button");
			 
			 //Validate Print Format Help Text
			 click(EDTC_OR.PRINTFORMATHELPLINK, "Print Format Help Link");
			 assertText(EDTC_OR.MODALDIALOGTEXT,printFormatHelpText);
			 click(EDTC_OR.MODALDIALOGCLOSEBTN,"Print Format Help Close Button");
			 
			 //Validate Hours Processing Functions Help Text
			 click(EDTC_OR.HRSPROCESSINFUNCHELPLINK, "Hours Processing Functions Help Link");
			 assertText(EDTC_OR.MODALDIALOGTEXT,hrsProcessingHelpText);
			 click(EDTC_OR.MODALDIALOGCLOSEBTN,"Hours Processing Functions Help Close Button");
			 blnEventReport = false;
			} catch (Exception e) {
				throw e;
			}
	 }
	 /********************************************************************************************************
	  * Method 	Name  	    :	enterTimeSheet()
	  * Author				:	
	  * Description		    :	This method will validate the page header
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification: 
	  * @throws Throwable	:
     ********************************************************************************************************/    
	 public void enterTimeSheet(String strMon,String strMonHours,String strTue,String strTueHours,String strWed,
			 String strWedHours,String strThu,String strThuHours,String strFri,String strFriHours,String strSat,String strSatHours,
			 String strSun,String strSunHours,String strWeek,String passwordRequired,String strPwd) throws Throwable{
		 try{
			 blnEventReport = true;
			 pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
			 //Change the Date format to M/d/yyy
			 SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yyyy");
			 Date d_date = dateFormat.parse(strWeek);
			 String week=dateFormat.format(d_date);
			
			 selectByVisibleText(EDTC_OR.CHANGETOWEEKENDINGDROPDOWN, week, "Change to Week Ending on Drop Down");
			 pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
			 
			 //Take the PTO and OPT Value before entering the Values
			 double pto=Integer.parseInt(getText(EDTC_OR.PTOVALUE, "PTO Value"));
			 double opt=Integer.parseInt(getText(EDTC_OR.OPTVALUE, "OPT Value"));
			 
			 int count=driver.findElements(By.xpath(EDTC_OR.ELEMENTTEXT1+"Scheduled') or contains(text(),'Regular')]/following-sibling::td")).size();
			 for(int i=1;i<count-1;i++){
				 String strHrs=getText(By.xpath(EDTC_OR.ELEMENTTEXT1+"Scheduled') or contains(text(),'Regular')]/following-sibling::td["+i+"]/div"),"");
				 String strHolidayHrs=getText(By.xpath(EDTC_OR.ELEMENTTEXT1+"Holiday')]/following-sibling::td["+i+"]/div"),"");
				 regHrs.add(Double.valueOf(strHrs)); 
				 totalRegHrs+=Double.valueOf(strHrs);
				 holidayCount+=Double.valueOf(strHolidayHrs);
			 }
			 
			 
			 //Enter Hours for Monday
			 enterHours(strMon,strMonHours,2);
			 //Enter Hours for Tuesday
			 enterHours(strTue,strTueHours,3);
			 //Enter Hours for Wednesday
			 enterHours(strWed,strWedHours,4);
			 //Enter Hours for Thursday
			 enterHours(strThu,strThuHours,5);
			 //Enter Hours for Friday
			 enterHours(strFri,strFriHours,6);
			 //Enter Hours for Saturday
			 enterHours(strSat,strSatHours,7);
			 //Enter Hours for Sunday
			 enterHours(strSun,strSunHours,8);
			 Thread.sleep(lSleep_Low);
			 
			 //Add the Total Entered PTO and OPT with already Available
			 pto=pto-ptoCount;
			 opt=opt-optCount;
			 
			 
			 //Save
			 click(EDTC_OR.SAVEBTN, "Save Button");
			 pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
			 
			 if(passwordRequired.equalsIgnoreCase("Y")){
				 waitForElementPresent(EDTC_OR.SEARCHMATCHESLABEL, "Confirm password Modal Dialog");
				 isDisabled(EDTC_OR.MODALDIALOGSUBMITBTN, "Submit Button");
				 type(EDTC_OR.CONFIRMPASSWORDTEXTFIELD,"invalid","Confirm Password Text Field");
				 isEnabled(EDTC_OR.MODALDIALOGSUBMITBTN, "Submit Button");
				 click(EDTC_OR.MODALDIALOGSUBMITBTN, "Submit Button");
				 Thread.sleep(lSleep_Low);
				 isElementDisplayed(EDTC_OR.INVALIDAPWD, "Invalid Password entered.");
				 type(EDTC_OR.CONFIRMPASSWORDTEXTFIELD,strPwd,"Confirm Password Text Field");
				 isEnabled(EDTC_OR.MODALDIALOGSUBMITBTN, "Submit Button");
				 click(EDTC_OR.MODALDIALOGSUBMITBTN, "Submit Button");
				 Thread.sleep(lSleep_Low);
			 }
			 pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
			 
			 Date todaysDate = new Date();
			 SimpleDateFormat formatter = new SimpleDateFormat("hh:mm a");
			 formatter.setTimeZone(TimeZone.getTimeZone("GMT"));
			 empRequestTime = formatter.format(todaysDate);
			 System.out.println(empRequestTime);
			 Thread.sleep(lSleep_Low);
			 
			 //Calculate the PTO
			 if(!isElementPresent(EDTC_OR.TIMESHEETENTRYERRORMSG, "Error Message")){
				 double ptoValue=Integer.parseInt(getText(EDTC_OR.PTOVALUE, "PTO Value"));
				 double optValue=Integer.parseInt(getText(EDTC_OR.OPTVALUE, "OPT Value"));
				 int val=Double.compare(pto, ptoValue);
				 int val1=Double.compare(opt, optValue);
				 
				 if(val==0 && val1==0){
					 SuccessReport("Valdiate the PTO Value from the Table after entering the TimeSheet","\""+pto+"\" is the PTO Value after entering the TimeSheet");
					 SuccessReport("Valdiate the OPT Value from the Table after entering the TimeSheet","\""+opt+"\" is the OPT Value after entering the TimeSheet");
				 }else{
					 failureReport("Valdiate the PTO and OPT Value from the Table after entering the TimeSheet", "PTO "+pto+" and OPT "+opt+"value are incorrect");
				 }
				 value=getText(EDTC_OR.TIMESHEETUPDATEDTIME, "TimeSheet Updated Time");
				 SuccessReport("Validate the Message once the TimeSheet is saved", value);
				 value.replaceAll("Hours ", "");
				 
				 //Validate Time Sheet Entered for Monday
				 validateHoursEntered(strMon,strMonHours,2,"Monday",regHrs.get(0));
				 //Validate Time Sheet Entered for Tuesday
				 validateHoursEntered(strTue,strTueHours,3,"Tuesday",regHrs.get(1));
				 //Validate Time Sheet Entered for Wednesday
				 validateHoursEntered(strWed,strWedHours,4,"Wednesday",regHrs.get(2));
				 //Validate Time Sheet Entered for Thursday
				 validateHoursEntered(strThu,strThuHours,5,"Thursday",regHrs.get(3));
				 //Validate Time Sheet Entered for Friday
				 validateHoursEntered(strFri,strFriHours,6,"Friday",regHrs.get(4));
				 //Validate Time Sheet Entered for Saturday
				 validateHoursEntered(strSat,strSatHours,7,"Saturday",regHrs.get(5));
				 //Validate Time Sheet Entered for Sunday
				 validateHoursEntered(strSun,strSunHours,8,"Sunday",regHrs.get(6));
				 
				 validateTotalHours(EDTC_OR.TIMESHEETSENTRYTABLE);
				 
				 String strTimeText=getText(EDTC_OR.TIMESHEETUPDATEDTIME,"").trim();
				 String strTime=strTimeText.replaceAll("[a-zA-Z]", "").trim().split("  ")[1];
				 String strAM_PM=empRequestTime.split(" ")[1];
				 DateFormat sdf = new SimpleDateFormat("hh:mm");
				 Date appTime = sdf.parse(strTime);
				 Date codeTime = sdf.parse(empRequestTime);
				 long diff = appTime.getTime() - codeTime.getTime();
				 long diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(diff);
				 String strTodaysDate=getCurrentDate("MM/dd/YYYY");
				 if(diffInSeconds<=100 && strTimeText.contains(strAM_PM) && strTimeText.contains("GMT") && strTimeText.contains(strTodaysDate)){
					   SuccessReport("Validate whether the Time stamp is displayed correctly after the Employee/Mgr saves the timesheet "+empRequestTime, strTimeText+" Time stamp is displayed correctly after the Employee/Mgr saves the timesheet ");
				 }else{
					   failureReport("Validate whether the Time stamp is displayed correctly after the Employee/Mgr saves the timesheet "+empRequestTime, "Time stamp is not displayed correctly after the Employee/Mgr saves the timesheet ");
				 } 
				 
			 }
			 blnEventReport = false;
			} catch (Exception e) {
				throw e;
			}
	 }
	 /********************************************************************************************************
	  * Method 	Name  	    :	enterHours()
	  * Author				:	
	  * Description		    :	This method will validate the page header
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification: 
	  * @throws Throwable	:
     ********************************************************************************************************/   
	 public void enterHours(String strType,String strHours,int columnNum) throws Throwable{
		 try{
			 blnEventReport = true;
			 if(!strType.isEmpty()){
				 String[] arrayType=strType.split(",");
				 String[] arrayHours=strHours.split(",");
				 
				 for(int i=0;i<arrayType.length;i++){
					 switch (arrayType[i]) {
						case "PTO":
							ptoCount+=Double.parseDouble(arrayHours[i]);
							totalRegHrs-=Double.parseDouble(arrayHours[i]);
							break;
						case "OPT":
							optCount+=Double.parseDouble(arrayHours[i]);
							totalRegHrs-=Double.parseDouble(arrayHours[i]);
							break;
						case "Jury duty":
							juryDutyCount+=Double.parseDouble(arrayHours[i]);
							totalRegHrs-=Double.parseDouble(arrayHours[i]);
							break;
						case "Bereavement":
							bereavementCount+=Double.parseDouble(arrayHours[i]);
							totalRegHrs-=Double.parseDouble(arrayHours[i]);
							break;
						case "Sick":
							sickCount+=Double.parseDouble(arrayHours[i]);
							break;
						case "Additional":
							additionalCount+=Double.parseDouble(arrayHours[i]);
							break;
						case "Offsite":
							offsiteCount+=Double.parseDouble(arrayHours[i]);
							break;
						case "Unpaid":
							unpaidCount+=Double.parseDouble(arrayHours[i]);
							totalRegHrs-=Double.parseDouble(arrayHours[i]);
							break;
					 }
					 type(By.xpath(EDTC_OR.ELEMENTTEXT1+arrayType[i]+"')]/parent::tr/td["+columnNum+"]/input"),arrayHours[i],arrayType[i]+" Text Field");	 
					 Thread.sleep(lSleep_VLow);
 				 }
			 }
			 blnEventReport = true;
			} catch (Exception e) {
				throw e;
			}
	 } 
	 
	 /********************************************************************************************************
	  * Method 	Name  	    :	enterHours()
	  * Author				:	
	  * Description		    :	This method will validate the page header
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification: 
	  * @throws Throwable	:
     ********************************************************************************************************/   
	 public void enterHours_NegativeScenarios(String strType,String strHours,int columnNum) throws Throwable{
		 try{
			 blnEventReport = true;
			 if(!strType.isEmpty()){
				 String[] arrayType=strType.split(",");
				 String[] arrayHours=strHours.split(",");
				 
				 for(int i=0;i<arrayType.length;i++){
					 type(By.xpath(EDTC_OR.ELEMENTTEXT1+arrayType[i]+"')]/parent::tr/td["+columnNum+"]/input"),arrayHours[i],arrayType[i]+" Text Field");	 
					 Thread.sleep(lSleep_VLow);
 				 }
			 }
			 blnEventReport = true;
			} catch (Exception e) {
				throw e;
			}
	 } 
	 	 
	 
	/********************************************************************************************************
	 * Method 	Name  	    :	validateTotalHours()
	 * Author				:	
	 * Description		    :	This method will validate the page header
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification: 
	 * @throws Throwable	:
     ********************************************************************************************************/   
	 public void validateTotalHours(String Loc) throws Throwable{
		 try{
			 blnEventReport = true;
			 String type="";
			 int rowCount=driver.findElements(By.xpath(Loc+"/tbody/tr")).size();
			 for(int i=1;i<=rowCount;i++){
				 Double totalCount=0.0;
				 Double totalValue=0.0;
				 int value=-1;
				 int colCount=driver.findElements(By.xpath(Loc+"/tbody/tr["+i+"]/td")).size();
				 type=getText(By.xpath(Loc+"/tbody/tr["+i+"]/td[1]"), "");
				 for(int j=2;j<=colCount-1;j++){
					 if(isElementPresent(By.xpath(Loc+"/tbody/tr["+i+"]/td["+j+"]/input"), "")){
						 totalCount+=Double.valueOf(getAttribute(By.xpath(Loc+"/tbody/tr["+i+"]/td["+j+"]/input"),"value", "")); 	 
					 }
					 else if(isElementPresent(By.xpath(Loc+"/tbody/tr["+i+"]/td["+j+"]"), "")){
						 totalCount+=Double.valueOf(getText(By.xpath(Loc+"/tbody/tr["+i+"]/td["+j+"]"), "")); 
					 }
				 }
				 if(isElementPresent(By.xpath(Loc+"/tbody/tr["+i+"]/td[last()]/input"),"")){
					 totalValue=Double.valueOf(getAttribute(By.xpath(Loc+"/tbody/tr["+i+"]/td[last()]/input"),"value",""));
				 }
				 else if(isElementPresent(By.xpath(Loc+"/tbody/tr["+i+"]/td[last()]"),"")){
					 totalValue=Double.valueOf(getText(By.xpath(Loc+"/tbody/tr["+i+"]/td[last()]"),""));
				 }
				 switch (type) {
					case "PTO":
						value=Double.compare(totalValue, ptoCount);
						break;
					case "OPT":
						value=Double.compare(totalValue, optCount);
						break;
					case "Jury duty":
						value=Double.compare(totalValue, juryDutyCount);
						break;
					case "Bereavement":
						value=Double.compare(totalValue, bereavementCount);
						break;
					case "Sick":
						value=Double.compare(totalValue, sickCount);
						break;
					case "Additional":
						value=Double.compare(totalValue, additionalCount);
						break;
					case "Offsite":
						value=Double.compare(totalValue, offsiteCount);
						break;
					case "Unpaid":
						value=Double.compare(totalValue, unpaidCount);
						break;
					case "Regular":
						value=Double.compare(totalValue, totalRegHrs);
						break;	
					case "Scheduled":
						value=Double.compare(totalValue, totalRegHrs);
						break;
					case "Holiday":
						value=Double.compare(totalValue, holidayCount);
						break;			
					}
				 if(type.equalsIgnoreCase("Punch")){
					 int value1=Double.compare(totalValue, totalCount);
					 if(value1==0){
						 SuccessReport("Validate the Total Hours for "+type, totalValue+" is the Value under Total Hours Colums for "+type);
					 }else{
						 failureReport("Validate the Total Hours for "+type, "Invalid Data under Total Column");
					 }
				 }else{
					 int value1=Double.compare(totalValue, totalCount);
					 if(value==0 && value1==0){
						 SuccessReport("Validate the Total Hours for "+type, totalValue+" is the Value under Total Hours Colums for "+type);
					 }else{
						 failureReport("Validate the Total Hours for "+type, "Invalid Data under Total Column");
					 }
	 
				 }
				 			 }
			 blnEventReport = false;
			} catch (Exception e) {
				throw e;
			}
	 } 
	 /********************************************************************************************************
	  * Method 	Name  	    :	validateHoursEntered()
	  * Author				:	
	  * Description		    :	This method will validate the page header
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification: 
	  * @throws Throwable	:
     ********************************************************************************************************/   
	 public void validateHoursEntered(String strType,String strHours,int columnNum,String strDay,Double regHrs) throws Throwable{
		 try{
			 blnEventReport = true;
			 String strValue="";
			 Double reg_SchHrs=0.0;
			 if(!strType.isEmpty()){
				 String[] arrayType=strType.split(",");
				 String[] arrayHours=strHours.split(",");
				 for(int i=0;i<arrayType.length;i++){
					 if(isElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT2+"Scheduled') or contains(text(),'Regular')]/parent::tr/td["+columnNum+"]/input"), "")){
						 reg_SchHrs=Double.valueOf(getAttribute(By.xpath(EDTC_OR.ELEMENTTEXT2+"Scheduled') or contains(text(),'Regular')]/parent::tr/td["+columnNum+"]/input"),"value", ""));
					 }else if(isElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT2+"Scheduled') or contains(text(),'Regular')]/parent::tr/td["+columnNum+"]"), "")){
						 reg_SchHrs=Double.valueOf(getText(By.xpath(EDTC_OR.ELEMENTTEXT2+"Scheduled') or contains(text(),'Regular')]/parent::tr/td["+columnNum+"]"), ""));
					 }
					 
					 if(isElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT2+arrayType[i]+"')]/parent::tr/td["+columnNum+"]/input"), "")){
						 strValue=getAttribute(By.xpath(EDTC_OR.ELEMENTTEXT2+arrayType[i]+"')]/parent::tr/td["+columnNum+"]/input"), "value", arrayType[i]+" Text Field");	 
					 }else if(isElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT2+arrayType[i]+"')]/parent::tr/td["+columnNum+"]"), "")){
						 strValue=getText(By.xpath(EDTC_OR.ELEMENTTEXT2+arrayType[i]+"')]/parent::tr/td["+columnNum+"]"), "");
					 }
					 
					 if(strValue.equalsIgnoreCase(arrayHours[i])){
						 SuccessReport("Validate whether the Time Sheet Entries are saved", arrayHours[i]+" is saved for "+arrayType[i]+" on "+strDay);
					 }else{
						 failureReport("Validate whether the Time Sheet Entries are saved", "Time Sheet Entries are not saved");
					 }
					 int val=Double.compare(regHrs, 0.0);
					 if(!arrayType[i].equalsIgnoreCase("Offsite") && !arrayType[i].equalsIgnoreCase("Additional") && val!=0 && !strEmpType.equalsIgnoreCase("HRN")){
						 regHrs=regHrs-Double.valueOf(arrayHours[i]);
					 }
				 }	 
				int res=Double.compare(regHrs, reg_SchHrs);
				if(res==0){
					SuccessReport("Validate the Regular/Scheduled hours "+strDay+" after saving the Timesheet", regHrs+" is the value of the Regular/Scheduled hours after saving the Timesheet on "+strDay);
				}else{
					failureReport("Validate the Regular/Scheduled hours "+strDay+" after saving the Timesheet", regHrs+" is the value of the Regular/Scheduled hours after saving the Timesheet on "+strDay);
				}
			 }
			 blnEventReport = true;
			} catch (Exception e) {
				throw e;
			}
	 } 
	 
	 
	 /********************************************************************************************************
	  * Method 	Name  	    :	validateTimeSheetEntryErrorMsg()
	  * Author				:	
	  * Description		    :	This method will validate the page header
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification: 
	  * @throws Throwable	:
     ********************************************************************************************************/ 	  
	  public void validateTimeSheetEntryErrorMsg(String strErrorMsg1,String strErrorMsg2,String strErrorMsg3) throws Throwable{
		  try{
			  blnEventReport = true;
			 
			 assertText(EDTC_OR.TIMESHEETENTRYERRORMSG1,strErrorMsg1);
			 assertText(EDTC_OR.TIMESHEETENTRYERRORMSG2,strErrorMsg2);
			 assertText(EDTC_OR.TIMESHEETENTRYERRORMSG3,strErrorMsg3);
			 
			 blnEventReport = false;
		  } catch (Exception e) {
			  throw e;
		  }
	 }
	  /********************************************************************************************************
		  * Method 	Name  	    :	enterTimeSheet_NegativeScenario()
		  * Author				:	
		  * Description		    :	This method will validate the page header
		  * Date of creation 	:	
		  * modifying person 	: 	
		  * Date of modification: 
		  * @throws Throwable	:
	     ********************************************************************************************************/    
		 public void enterTimeSheet_NegativeScenario(String strMon,String strMonHours,String strTue,String strTueHours,String strWed,
				 String strWedHours,String strThu,String strThuHours,String strFri,String strFriHours,String strSat,String strSatHours,
				 String strSun,String strSunHours,String strWeek) throws Throwable{
			 try{
				 blnEventReport = true;
				
				 
				 //Select the Week
				 selectByVisibleText(EDTC_OR.CHANGETOWEEKENDINGDROPDOWN, strWeek, "Change to Week Ending on Drop Down");
				 pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
				
				 isElementDisplayed(EDTC_OR.NOTIMEENTRIESLABEL, "No time entries recorded for this date");
				 
				 //Enter Hours for Monday
				 enterHours_NegativeScenarios(strMon,strMonHours,2);
				 //Enter Hours for Tuesday
				 enterHours_NegativeScenarios(strTue,strTueHours,3);
				 //Enter Hours for Wednesday
				 enterHours_NegativeScenarios(strWed,strWedHours,4);
				 //Enter Hours for Thursday
				 enterHours_NegativeScenarios(strThu,strThuHours,5);
				 //Enter Hours for Friday
				 enterHours_NegativeScenarios(strFri,strFriHours,6);
				 //Enter Hours for Saturday
				 enterHours_NegativeScenarios(strSat,strSatHours,7);
				 //Enter Hours for Sunday
				 enterHours_NegativeScenarios(strSun,strSunHours,8);
				 Thread.sleep(lSleep_Low);
				 
				 if(isDisabled(EDTC_OR.SAVEBTN, "Save Button")){
					 SuccessReport("Validate the Save Button is Disabled when values other than positive values are enterd", "Save Button is Disabled ");
				 }else{
					 failureReport("Validate the Save Button is Disabled when values other than positive values are enterd", "Save Button is Enabled ");
				 }
				 
				 
				 blnEventReport = false;
				} catch (Exception e) {
					throw e;
				}
		 } 
 /********************************************************************************************************
  	 * Method 	Name		:	validateSetPayer_Approver()
  	 * Author				:	
  	 * Description			:	This method Sets the Approver or Payer
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/
	public void validateSetPayer_Approver(String SheetName,int iLoop) throws Throwable {
		try {
			blnEventReport = true;
			String strPaymentLimit=Excelobject.getCellData(SheetName, "Payment Limit", iLoop);
			String strAuthCode=Excelobject.getCellData(SheetName, "Authorization Code", iLoop);
			String strApprover1=Excelobject.getCellData(SheetName, "Approver1", iLoop);
			String strApprover2=Excelobject.getCellData(SheetName, "Approver2", iLoop);
			String strApprover3=Excelobject.getCellData(SheetName, "Approver3", iLoop);
			
			
			//Click on the Supplemental Pay Tab
			click(EDTC_OR.SUPPPAYTAB, "Supplemental Pay Tab");
			
			//If Payment limit for employee acting as approver is not Empty enter the details
			if(!strPaymentLimit.isEmpty()){
				validateTextFieldValue(EDTC_OR.PAYMENTLIMITTEXTFIELD, strPaymentLimit, "Payment limit for employee acting as approver Text Field");
			}	
			//If Authorization code to act as supplemental Payer/Approver is not Empty enter the details
			if(!strAuthCode.isEmpty()){
				validateTextFieldValue(EDTC_OR.AUTHCODETOACTASAPPROVERTEXTFIELD, strAuthCode, "Authorization code to act as supplemental Payer/Approver Text Field");
			}	
			//If Employee who can approve payments created by this employee (#1) is not Empty enter the details
			if(!strApprover1.isEmpty()){
				validateTextFieldValue(EDTC_OR.APPROVEPAYMENTSTEXTFIELD1, strApprover1, "Employee who can approve payments created by this employee (#1) Text Field");
			}
			//If Employee who can approve payments created by this employee (#2) is not Empty enter the details
			if(!strApprover2.isEmpty()){
				validateTextFieldValue(EDTC_OR.APPROVEPAYMENTSTEXTFIELD2, strApprover2, "Employee who can approve payments created by this employee (#2) Text Field");
			}
			//If Employee who can approve payments created by this employee (#3) is not Empty enter the details
			if(!strApprover3.isEmpty()){
				validateTextFieldValue(EDTC_OR.APPROVEPAYMENTSTEXTFIELD3, strApprover3, "Employee who can approve payments created by this employee (#3) Text Field");
			}
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	} 
	
	/********************************************************************************************************
  	 * Method 	Name		:	validatePTODetails()
  	 * Author				:	
  	 * Description			:	This method Sets the Approver or Payer
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/	
	public void validatePTODetails(String SheetName,int iLoop) throws Throwable{
		try{
			blnEventReport = true;
			String strPTOEligibilityDate=Excelobject.getCellData(SheetName, "PTO Eigibility Date", iLoop);
			String strCarryOverType=Excelobject.getCellData(SheetName, "Carryover Type", iLoop);
			String strAllocationType=Excelobject.getCellData(SheetName, "Allocation Type", iLoop);
			String strAmount=Excelobject.getCellData(SheetName, "Amount", iLoop);
			String strAnnualBaseSal=Excelobject.getCellData(SheetName, "Annual Base Salary", iLoop);
			
			//Click on the Paid Time Off Tab
			click(EDTC_OR.PAIDTIMEOFFTAB, "Paid Time Off Tab");
			//If PTO Eligibility Date is not Empty enter the details
			if(!strPTOEligibilityDate.isEmpty()){
				validateTextFieldValue(EDTC_OR.PTOELIGIBILITYDATETEXTFIELD, strPTOEligibilityDate, "PTO Eligibility Date Text Field");
			}
			//If Carryover is not Empty enter the details
			if(!strCarryOverType.isEmpty()){
				validateTextFieldValue(EDTC_OR.CARRYOVERTYPETEXTFIELD, strCarryOverType, "Carryover Text Field");
			}
			//If Allocation Type is not Empty enter the details
			if(!strAmount.isEmpty()){
				validateTextFieldValue(EDTC_OR.AMOUNTTEXTFIELD, strAllocationType, "Amount Text Field");
			}
			//If Allocation Type is not Empty enter the details
			if(!strAmount.isEmpty()){
				validateTextFieldValue(EDTC_OR.ALLOCATIONTYPETEXTFIELD, strAmount, "Allocation Type Text Field");
			}
			//If Annual Base Salary is not Empty enter the details
			if(!strAnnualBaseSal.isEmpty()){
				validateTextFieldValue(EDTC_OR.ANNUALBASESALTEXTFIELD, strAnnualBaseSal, "Annual Base Salary Text Field");
			}
			
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}	
	
	/********************************************************************************************************
  	 * Method 	Name		:	validateOT_OffsiteBalances()
  	 * Author				:	
  	 * Description			:	This method Sets the Approver or Payer
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/
	public void validateOT_OffsiteBalances(String SheetName,int iLoop) throws Throwable{
		try{
			blnEventReport = false;
			String strOTCalculationDate=Excelobject.getCellData(SheetName, "Calculation Date", iLoop);
			String strST_OT_MTD=Excelobject.getCellData(SheetName, "ST OT_MTD", iLoop);
			String strST_OT_QTD=Excelobject.getCellData(SheetName, "ST OT_QTD", iLoop);
			String strST_OT_YTD=Excelobject.getCellData(SheetName, "ST OT_YTD", iLoop);
			String strOT_MTD_1_5=Excelobject.getCellData(SheetName, "1.5 OT_MTD", iLoop);
			String strOT_QTD_1_5=Excelobject.getCellData(SheetName, "1.5 OT_QTD", iLoop);
			String strOT_YTD_1_5=Excelobject.getCellData(SheetName, "1.5 OT_YTD", iLoop);
			String strOT_MTD_2_0=Excelobject.getCellData(SheetName, "2.0 OT_MTD", iLoop);
			String strOT_QTD_2_0=Excelobject.getCellData(SheetName, "2.0 OT_QTD", iLoop);
			String strOT_YTD_2_0=Excelobject.getCellData(SheetName, "2.0 OT_YTD", iLoop);
			String strHPREM_MTD=Excelobject.getCellData(SheetName, "HPREM MTD", iLoop);
			String strHPREM_QTD=Excelobject.getCellData(SheetName, "HPREM QTD", iLoop);
			String strHPREM_YTD=Excelobject.getCellData(SheetName, "HPREM YTD", iLoop);
			String strOffsite_MTD=Excelobject.getCellData(SheetName, "Offsite MTD", iLoop);
			String strOffsite_QTD=Excelobject.getCellData(SheetName, "Offsite QTD", iLoop);
			String strOffsite_YTD=Excelobject.getCellData(SheetName, "Offsite YTD", iLoop);
			String strTableHeadings=Excelobject.getCellData(SheetName, "OT Amt Table Headings", iLoop);
			
			//Click on the Paid Time Off Tab
			click(EDTC_OR.OT_OFFSITEBALANCETAB, "OT Offsite Balance Tab");
			
			//This method validates the OT Amounts Table Headings
			verifyTableHeading(EDTC_OR.OTAMTTABLEHEADINGS, strTableHeadings);
			
			//If OT Calculation Date is not Empty enter the details
			if(!strOTCalculationDate.isEmpty()){
				validateTextFieldValue(EDTC_OR.OTCALCULATIONDATETEXTFIELD, strOTCalculationDate, "OT Calculation Date Text Field");
			}
			
			//If ST OT MTD is not Empty enter the details
			if(!strST_OT_MTD.isEmpty()){
				validateTextFieldValue(EDTC_OR.ST_OT_MTD_TEXTFIELD, strST_OT_MTD, "ST OT MTD Text Field");
			}
			
			//If ST OT QTD is not Empty enter the details
			if(!strST_OT_QTD.isEmpty()){
				validateTextFieldValue(EDTC_OR.ST_OT_QTD_TEXTFIELD, strST_OT_QTD, "ST OT QTD Text Field");
			}
			
			//If ST OT YTD is not Empty enter the details
			if(!strST_OT_YTD.isEmpty()){
				validateTextFieldValue(EDTC_OR.ST_OT_YTD_TEXTFIELD, strST_OT_YTD, "ST OT YTD Text Field");
			}
			
			
			//If 1.5 OT MTD is not Empty enter the details
			if(!strOT_MTD_1_5.isEmpty()){
				validateTextFieldValue(EDTC_OR.OT_1_5_MTD_TEXTFIELD, strOT_MTD_1_5, "1.5 OT MTD Text Field");
			}
			
			//If 1.5 OT QTD is not Empty enter the details
			if(!strOT_QTD_1_5.isEmpty()){
				validateTextFieldValue(EDTC_OR.OT_1_5_QTD_TEXTFIELD, strOT_QTD_1_5, "1.5 OT QTD Text Field");
			}
			
			//If 1.5 OT YTD is not Empty enter the details
			if(!strOT_YTD_1_5.isEmpty()){
				validateTextFieldValue(EDTC_OR.OT_1_5_YTD_TEXTFIELD, strOT_YTD_1_5, "1.5OT YTD Text Field");
			}
			
			//If 2.0 OT MTD is not Empty enter the details
			if(!strOT_MTD_2_0.isEmpty()){
				validateTextFieldValue(EDTC_OR.OT_2_0_MTD_TEXTFIELD, strOT_MTD_2_0, "2.0 OT MTD Text Field");
			}
			
			//If 2.0 OT QTD is not Empty enter the details
			if(!strOT_QTD_2_0.isEmpty()){
				validateTextFieldValue(EDTC_OR.OT_2_0_QTD_TEXTFIELD, strOT_QTD_2_0, "2.0 OT QTD Text Field");
			}
			
			//If 2.0 OT YTD is not Empty enter the details
			if(!strOT_YTD_2_0.isEmpty()){
				validateTextFieldValue(EDTC_OR.OT_2_0_YTD_TEXTFIELD, strOT_YTD_2_0, "2.0 OT YTD Text Field");
			}
			
			
			
			//If HPREM MTD is not Empty enter the details
			if(!strHPREM_MTD.isEmpty()){
				validateTextFieldValue(EDTC_OR.HPREM_MTD_TEXTFIELD, strHPREM_MTD, "HPREM MTD Text Field");
			}
			
			//If HPREM QTD is not Empty enter the details
			if(!strHPREM_QTD.isEmpty()){
				validateTextFieldValue(EDTC_OR.HPREM_QTD_TEXTFIELD, strHPREM_QTD, "HPREM QTD Text Field");
			}
			
			//If HPREM YTD is not Empty enter the details
			if(!strHPREM_YTD.isEmpty()){
				validateTextFieldValue(EDTC_OR.HPREM_YTD_TEXTFIELD, strHPREM_YTD, "HPREM YTD Text Field");
			}
			
			//If Offsite MTD is not Empty enter the details
			if(!strOffsite_MTD.isEmpty()){
				validateTextFieldValue(EDTC_OR.OFFSITE_MTD_TEXTFIELD, strOffsite_MTD, "Offsite MTD Text Field");
			}
			
			//If Offsite QTD is not Empty enter the details
			if(!strOffsite_QTD.isEmpty()){
				validateTextFieldValue(EDTC_OR.OFFSITE_QTD_TEXTFIELD, strOffsite_QTD, "Offsite QTD Text Field");
			}
			
			//If Offsite YTD is not Empty enter the details
			if(!strOffsite_YTD.isEmpty()){
				validateTextFieldValue(EDTC_OR.OFFSITE_YTD_TEXTFIELD, strOffsite_YTD, "Offsite YTD Text Field");
			}
			
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}	
	/********************************************************************************************************
  	 * Method 	Name		:	save_Edit_Employee()
  	 * Author				:	
  	 * Description			:	This method Sets the Approver or Payer
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/	
	
	public void save_Edit_Employee(String strAction) throws Throwable{
		try{
			blnEventReport = true;
			//Click Save Button
			click(EDTC_OR.SAVEBTN,"Save Button");
			
			if(isAlertPresent()){
				Alert alert=driver.switchTo().alert();
				String strText=alert.getText();
				if(strText.replaceAll("\n", "").contains("WARNING! -- WARNING! -- WARNING! -- WARNING! -- WARNING! -- WARNING!  Hours, Input Type, Pay Type, State Code, Sick Leave, and/or the Holiday Template have been changed.To protect the integrity of the data, any current or future pay records for this employee will have to be DELETED.You may click Cancel if you wish to return and review the employee's Time Summary.Otherwise press OK to allow this operation to continue.")){
					SuccessReport("Validate the Alert text when User modifies an employee "+strText, strText+" Alert text is present");
				}else{
					failureReport("Validate the Alert text when User modifies an employee "+strText, strText+" Alert text is not present");
				}
				alert.accept();
				
				if(isElementPresent(EDTC_OR.ZEROVALUESFOUNDMSG, "Message")){
					assertText(EDTC_OR.ZEROVALUESFOUNDMSG, "One or more non-zero values were found for Scheduled Hours or PTO/OPT/StOT/HPrem balances.");
					assertText(EDTC_OR.HRNFEATURESFOUNDMSG, "HRN employee records do not use these features so these values will be saved as zeros.");
					click(EDTC_OR.MODALDIALOGOKBTN,"OK Button");
					Thread.sleep(lSleep_Low);
				}
				
				waitForElementPresent(EDTC_OR.EMPLOYEEADDED_UPDATESUCCMSG, "Employee Updated Successfully Message");
				if(isElementPresent(EDTC_OR.EMPLOYEEADDED_UPDATESUCCMSG, "Employee Updated Successfully Message")){
					strText=getText(EDTC_OR.EMPLOYEEADDED_UPDATESUCCMSG, "Employee Updated Successfully Message");
					if(strText.replaceAll("\n", "").contains("Input type, Pay Type, STCode, Sick Leave and/or Holiday Template has            changed !        Current and future records deleted")){
						SuccessReport("Validate the Success Message"+strText, strText+" Success Message is present");
					}else{
						failureReport("Validate the Success Message"+strText, "Success Message is not present");
					}
					click(EDTC_OR.OKBTN, "OK Button");
					Thread.sleep(lSleep_Low);
				}
			}
			
			
			waitForElementPresent(EDTC_OR.EMPLOYEEADDED_UPDATESUCCMSG, "Employee Updated Successfully Message");
			if(isElementPresent(EDTC_OR.EMPLOYEEADDED_UPDATESUCCMSG, "Employee Updated Successfully Message")){
				if(strAction.equalsIgnoreCase("Add")){
					assertText(EDTC_OR.EMPLOYEEADDED_UPDATESUCCMSG, "Employee Created Successfully !");	
				}else if(strAction.equalsIgnoreCase("Modify")){
					assertText(EDTC_OR.EMPLOYEEADDED_UPDATESUCCMSG, "Employee Updated Successfully !");
				}
				click(EDTC_OR.OKBTN, "OK Button");
				Thread.sleep(lSleep_Low);
			}	
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
  	 * Method 	Name		:	validateSaveButtonStatus()
  	 * Author				:	
  	 * Description			:	This method Sets the Approver or Payer
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/	
  	public void saveButtonStatus(String strSaveActionStatus) throws Throwable{
  		try{
  			blnEventReport = true;
  			if(strSaveActionStatus.equalsIgnoreCase("Approved as final") || strSaveActionStatus.equalsIgnoreCase("Void")){
				  isDisabled(EDTC_OR.BOTTOMSAVEBTNBTN, "Bottom Save Button");
				  isDisabled(EDTC_OR.TOPSAVEBTNBTN, "Top Save Button");     
			  }else{
				  if(userType.equalsIgnoreCase("All")){
					  isEnabled(EDTC_OR.BOTTOMSAVEBTNBTN, "Bottom Save Button");
					  isEnabled(EDTC_OR.TOPSAVEBTNBTN, "Top Save Button");  
				  }else if(userType.equalsIgnoreCase("Editor") && strSaveActionStatus.equalsIgnoreCase("Under Edit")){
					  isEnabled(EDTC_OR.BOTTOMSAVEBTNBTN, "Bottom Save Button");
					  isEnabled(EDTC_OR.TOPSAVEBTNBTN, "Top Save Button");  
				  }else if(userType.equalsIgnoreCase("Editor") && strSaveActionStatus.equalsIgnoreCase("Under verification")){
					  isDisabled(EDTC_OR.BOTTOMSAVEBTNBTN, "Bottom Save Button");
					  isDisabled(EDTC_OR.TOPSAVEBTNBTN, "Top Save Button");  
				  }else if(userType.equalsIgnoreCase("Verifier") && strSaveActionStatus.equalsIgnoreCase("Under Edit")){
					  isDisabled(EDTC_OR.BOTTOMSAVEBTNBTN, "Bottom Save Button");
					  isDisabled(EDTC_OR.TOPSAVEBTNBTN, "Top Save Button");    
				  }else if(userType.equalsIgnoreCase("Verifier") && strSaveActionStatus.equalsIgnoreCase("Under verification")){
					  isEnabled(EDTC_OR.BOTTOMSAVEBTNBTN, "Bottom Save Button");
					  isEnabled(EDTC_OR.TOPSAVEBTNBTN, "Top Save Button");   
				  }  
			  }
  			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
  	}
  	/********************************************************************************************************
  	 * Method 	Name		:	validateSaveButtonStatus()
  	 * Author				:	
  	 * Description			:	This method Sets the Approver or Payer
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/	
	public void searchApproved_VoidEmployee(String strEmpID_Name) throws Throwable {
		try {
			blnEventReport = true;
			 if(isElementPresent(EDTC_OR.TPSLINK,"TPS Link")){
				  click(EDTC_OR.TPSLINK,"TPS Link");
				  //This page validates the TERMINATION PROCESSING SYSTEM Title
				  validatePageHeader(EDTC_OR.PAGEHEADER, "TERMINATION PROCESSING SYSTEM (Signed in as "+loginEmpName+")");
			  }
			 //Validate the Fields in the History page
			 click(EDTC_OR.HISTORYBTN,"History Button");
			 waitForElementPresent(By.xpath(EDTC_OR.RECORDSTABLE+"//table//tbody//tr/td[5]//div[not(contains(@class,'ng-hide'))]"), "Records");
			 Thread.sleep(lSleep_Medium);
			 Thread.sleep(lSleep_Medium);
			 click(EDTC_OR.APPROVED_VOIDED_RADIOBTN,"Approved/Voided Radio Button");
			 pageLoadingCompleted(EDTC_OR.PAGESPINNER);
			 waitForElementPresent(By.xpath(EDTC_OR.RECORDSTABLE+"//table//tbody//tr/td[5]//div[not(contains(@class,'ng-hide'))]"), "Records");
			 Thread.sleep(lSleep_Medium);
			 type(EDTC_OR.SEARCHTEXTFIELD_HISTORYPAGE,strEmpID_Name,"Search table Text Field");
			 Thread.sleep(lSleep_Medium);
			 if(isElementPresent(By.xpath(EDTC_OR.RECORDSTABLE+"//table//tbody//tr"), "Records")){
				 SuccessReport("Validate whether the record is found", "Record is found");
				 String strStatus=getText(By.xpath(EDTC_OR.RECORDSTABLE+"//table//tbody//tr[1]//td[5]//div[not(contains(@class,'ng-hide'))]"), "Records");
				 SuccessReport("Validate the status of the TPS Record", "The status is "+strStatus);
				 click(By.xpath(EDTC_OR.ELEMENTTEXT1+empID+"')]/parent::td//following-sibling::td/div[@title='Edit']//span"),empID+" Edit Button");
				 //This page validates the Title
				 validatePageHeader(EDTC_OR.PAGEHEADER, "TPS sheet for "+empName);
			 }else{
				 failureReport("Validate whether the record is found", "Record is not found");
			 }
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}	
	
  	/********************************************************************************************************
  	 * Method 	Name		:	revertToVerification()
  	 * Author				:	
  	 * Description			:	This method Sets the Approver or Payer
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/	
	public void revertToVerification() throws Throwable{
		try{
			blnEventReport = true;
			//Click on Revert to verification Button
			click(EDTC_OR.REVERTTOVERIFICATIONBTN, "Revert to verification Button");
			waitForElementPresent(EDTC_OR.MODALDIALOGTEXT, "Modal Dialog");
			String strText=getText(EDTC_OR.MODALDIALOGTEXT, "Modal Dialog Text").trim().replaceAll("\n", " ");
			if(strText.contains("This command will set the status as Ready for Verification for this worksheet! Make sure you have a valid reason to make this change and that no downstream actions are adversely affected. Are you sure you want to do this?")){
				SuccessReport("Validate the warning message after user clicks on Revert to verification Button", "\""+strText+"\" message is displayed");
			}else{
				failureReport("Validate the warning message after user clicks on Revert to verification Button","Message is displayed");
			}
			click(EDTC_OR.MODALDIALOGOKBTN, "OK Button");
			waitForElementPresent(EDTC_OR.PREXCEPTIONMODALDIALOG, "Modal Dialog");
			assertText(EDTC_OR.PREXCEPTIONMODALDIALOG, "Worksheet returned to Verification Status");
			click(EDTC_OR.MODALDIALOGOKBTN, "OK Button");
			//This page validates the TERMINATION PROCESSING SYSTEM Title
			validatePageHeader(EDTC_OR.PAGEHEADER, "TERMINATION PROCESSING SYSTEM (Signed in as "+loginEmpName+")");
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	
	
	/********************************************************************************************************
  	 * Method 	Name		:	voidWorkSheet()
  	 * Author				:	
  	 * Description			:	This method Sets the Approver or Payer
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/	
	
	public void voidWorkSheet() throws Throwable{
		try{
			blnEventReport = true;
			//Click on reve
			click(EDTC_OR.VOIDBTN, "Void Button");
			waitForElementPresent(EDTC_OR.MODALDIALOGTEXT, "Modal Dialog");
			String strText=getText(EDTC_OR.MODALDIALOGTEXT, "Modal Dialog Text").trim().replaceAll("\n", " ");
			if(strText.contains("This command will >>void<< this worksheet! A voided worksheet remains available for viewing and can only be returned to active status by a verifier. Are you sure you want to do this?")){
				SuccessReport("Validate the warning message after user clicks on Revert to verification Button", "\""+strText+"\" message is displayed");
			}else{
				failureReport("Validate the warning message after user clicks on Revert to verification Button","Message is displayed");
			}
			click(EDTC_OR.MODALDIALOGOKBTN, "OK Button");
			waitForElementPresent(EDTC_OR.PREXCEPTIONMODALDIALOG, "Modal Dialog");
			assertText(EDTC_OR.PREXCEPTIONMODALDIALOG, "Worksheet successfully Voided");
			click(EDTC_OR.MODALDIALOGOKBTN, "OK Button");
			Thread.sleep(lSleep_Medium);

			//This method validates the Field Values 
			validateEditWorkSheetPage();
			
			blnEventReport = true;
			//This method validates the Save Button Status
			saveButtonStatus("Void");
		
			blnEventReport = true;
			//Ready For Verification Check box
			isDisabled(EDTC_OR.READYFORVERIFICATIONCHECKBOX,"Ready For Verification Check box");
			//Suggested Verifier
			isDisabled(EDTC_OR.SUGGESTEDVERIFIERDROPDOWN,"Suggested Verifier Drop Down");
			//Save Action Radio Button Status
			isDisabled(EDTC_OR.UNDEREDITRADIOTBN, "Under Edit Radio Button");
			isEnabled(EDTC_OR.UNDERVERIFICATIONRADIOTBN, "Under Verification Radio Button");
			isEnabled(EDTC_OR.RETURNTOPREPARATIONRADIOBTN, "Return to Preparation Radio Button");
			isEnabled(EDTC_OR.APPROVEDASFINALRADIOBTN, "Approved as Final Radio Button");
			isEnabled(EDTC_OR.RETAINRECORDRADIOBTN, "Void (retain record) Button");
			
			isChecked_Report(EDTC_OR.RETAINRECORDRADIOBTN, "Void (retain record)");
			//Delete Button
			isDisabled(EDTC_OR.DELETEBTN_PARENT, "Delete Button");
			//Check the Status of Revert to Verification Button 
			isEnabled(EDTC_OR.REVERTTOVERIFICATIONBTN, "Revert to Verification Button");
			
			click(EDTC_OR.SELECTEMPBTN, "Back to Select Employee Button");
			//This page validates the TERMINATION PROCESSING SYSTEM Title
			validatePageHeader(EDTC_OR.PAGEHEADER, "TERMINATION PROCESSING SYSTEM (Signed in as "+loginEmpName+")");
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
  	 * Method 	Name		:	voidWorkSheet()
  	 * Author				:	
  	 * Description			:	This method Sets the Approver or Payer
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/		
	public void continue_DiscontinueEmployee(String discontinuesStatus) throws Throwable{
		try{
			blnEventReport = true;
			if(discontinuesStatus.equalsIgnoreCase("Y")){
				if(isChecked(EDTC_OR.DISCONTINUECHECKBOX, "Discontinue Employee")){
					failureReport("Validate the Employee status", "Employee is already dicontinued");
				}else{
					click(EDTC_OR.DISCONTINUECHECKBOX, "Discontinue Employee");	
				}
			}else{
				if(isChecked(EDTC_OR.DISCONTINUECHECKBOX, "Discontinue Employee")){
					click(EDTC_OR.DISCONTINUECHECKBOX, "Discontinue Employee");	
				}else{
					failureReport("Validate the Employee status", "Employee is active");
				}
				
			}

			Thread.sleep(lSleep_Low);
			//Click Save Button
			click(EDTC_OR.SAVEBTN,"Save Button");
			waitForElementPresent(EDTC_OR.EMPLOYEEADDED_UPDATESUCCMSG, "Employee Updated Successfully Message");
			if(isElementPresent(EDTC_OR.EMPLOYEEADDED_UPDATESUCCMSG, "Employee Updated Successfully Message")){
				assertText(EDTC_OR.EMPLOYEEADDED_UPDATESUCCMSG, "Employee Updated Successfully !");
		
				click(EDTC_OR.OKBTN, "OK Button");
				Thread.sleep(lSleep_Low);
			}
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}

	
	/********************************************************************************************************
	 * Method 	Name		:	validateAddModifyEmployeePageHelpButtons()
	 * Author				:	
	 * Description			:	This method validates loginpage help buttons
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	:
  ********************************************************************************************************/
  public void validateAddModifyEmployeePageHelpButtons(String modifyEmployeeHelpText,String noPtoEmailHelpText,
		  String noGenMailHelpText,String additionalEmployeeSupplementalPayHelpText,String positionHelpText,
		  String levelHelpText,String sickLeaveOverrideHelpText,String tpsPrivilegesHelpText,
		  String regularyScheduledHoursHelpText,String authorizationCodeSupplementalPayHelpText,
		  String maximumApprovalLimitHelpText,String employeeApprovePaymentsHelpText,String createYmpHelpText,
		  String calculatePtolHelpText,String annualBaseSalaryHelpText,String ptoCarryOversAndAllocationsHelpText,
		  String otCalculationDateHelpText) throws Throwable{
	 try{
		 blnEventReport = true;
		 //Validate Modify Employee Help Text
		 isEnabled(EDTC_OR.MODIFYEMPLOYEEHELPLINK,"Modify Employee Help Link" );
		 click(EDTC_OR.MODIFYEMPLOYEEHELPLINK, "Modify Employee Help Link");
		 assertText(EDTC_OR.MODALDIALOGTEXT, modifyEmployeeHelpText);
		 click(EDTC_OR.MODALDIALOGCLOSEBTN,"Modify Employee Help Close Button");
		 Thread.sleep(lSleep_Low);
		 //Validate No PTO Email Help Text
		 isEnabled(EDTC_OR.NOPTOEMAILHELPLINK,"No PTO Email Help Link" );
		 click(EDTC_OR.NOPTOEMAILHELPLINK,"No PTO Email Help Link");
		 assertText(EDTC_OR.MODALDIALOGTEXT,noPtoEmailHelpText);
		 click(EDTC_OR.MODALDIALOGCLOSEBTN,"No PTO Email Help Close Button");
		 Thread.sleep(lSleep_Low);
		 //Validate No Gen Mail Help Text
		 isEnabled(EDTC_OR.NOGENMAILHELPLINK,"No Gen Mail Help Link" );
		 click(EDTC_OR.NOGENMAILHELPLINK,"No Gen Mail Help Link" );
		 assertText(EDTC_OR.MODALDIALOGTEXT, noGenMailHelpText);
		 click(EDTC_OR.MODALDIALOGCLOSEBTN,"No Gen Mail Help Close Button");
		 Thread.sleep(lSleep_Low);
		 //Validate Additional Employee Supplemental Pay Help Text
		 isEnabled(EDTC_OR.ADDITIONALEMPLOYEESUPPLEMENTALPAYHELPLINK,"Additional Employee Supplemental Pay Help Link" );
		 click(EDTC_OR.ADDITIONALEMPLOYEESUPPLEMENTALPAYHELPLINK, "Additional Employee Supplemental Pay Help Link");
		 assertText(EDTC_OR.MODALDIALOGTEXT, additionalEmployeeSupplementalPayHelpText);
		 click(EDTC_OR.MODALDIALOGCLOSEBTN,"Additional Employee Supplemental Pay Help Link Help Close Button");
		 Thread.sleep(lSleep_Low);
		 //Validate Position Help Text
		 isEnabled(EDTC_OR.POSITIONHELPLINK,"Position Help Link" );
		 click(EDTC_OR.POSITIONHELPLINK, "Position Help Link");
		 assertText(EDTC_OR.MODALDIALOGTEXT, positionHelpText);
		 click(EDTC_OR.MODALDIALOGCLOSEBTN,"Position Help Close Button");
		 Thread.sleep(lSleep_Low);
		 //Validate Level Help Text
		 isEnabled(EDTC_OR.LEVELHELPLINK,"Level Help Link" );
		 click(EDTC_OR.LEVELHELPLINK, "Level Help Link");
		 assertText(EDTC_OR.MODALDIALOGTEXT, levelHelpText);
		 click(EDTC_OR.MODALDIALOGCLOSEBTN,"Level Help Close Button");
		 Thread.sleep(lSleep_Low);
		 //Validate Sick Leave Override Help Text
		 isEnabled(EDTC_OR.SICKLEAVEOVERRIDEHELPLINK,"Sick Leave Override Help Link" );
		 click(EDTC_OR.SICKLEAVEOVERRIDEHELPLINK, "Sick Leave Override Help Link");
		 assertText(EDTC_OR.MODALDIALOGTEXT, sickLeaveOverrideHelpText);
		 click(EDTC_OR.MODALDIALOGCLOSEBTN,"Sick Leave Override Help Close Button");
		 Thread.sleep(lSleep_Low);
		 //Validate TPS Privileges Help Text
		 isEnabled(EDTC_OR.TPSPRIVILEGESHELPLINK,"TPS Privileges Help Link" );
		 click(EDTC_OR.TPSPRIVILEGESHELPLINK, "TPS Privileges Help Link");
		 assertText(EDTC_OR.MODALDIALOGTEXT, tpsPrivilegesHelpText);
		 click(EDTC_OR.MODALDIALOGCLOSEBTN,"TPS Privileges Help Close Button");
		 Thread.sleep(lSleep_Low);
		 //Validate Regulary Scheduled Hours Help Text
		 isEnabled(EDTC_OR.REGULARYSCHEDULEDHOURSHELPLINK,"Regulary Scheduled Hours Help Link" );
		 click(EDTC_OR.REGULARYSCHEDULEDHOURSHELPLINK, "Regulary Scheduled Hours Help Link");
		 assertText(EDTC_OR.MODALDIALOGTEXT, regularyScheduledHoursHelpText);
		 click(EDTC_OR.MODALDIALOGCLOSEBTN,"Regulary Scheduled Hours Help Close Button");
		 Thread.sleep(lSleep_Low);
		 
		 //Click on Supplemental Pay Tab
		 click(EDTC_OR.SUPPPAYTAB, "Supplemental Pay Tab");
		 
		 //Validate Authorization Code Supplemental Pay Help Text
		 isEnabled(EDTC_OR.AUTHORIZATIONCODESUPPLEMENTALPAYERHELPLINK,"Authorization Code Supplemental Pay Help Link" );
		 click(EDTC_OR.AUTHORIZATIONCODESUPPLEMENTALPAYERHELPLINK, "Authorization Code Supplemental Pay Help Link");
		 assertText(EDTC_OR.MODALDIALOGTEXT, authorizationCodeSupplementalPayHelpText);
		 click(EDTC_OR.MODALDIALOGCLOSEBTN,"Authorization Code Supplemental Pay Help Close Button");
		 Thread.sleep(lSleep_Low);
		 //Validate Maximum Approval Limit Help Text
		 isEnabled(EDTC_OR.MAXIMUMAPPROVALLIMITHELPLINK,"Maximum Approval Limit Help Link" );
		 click(EDTC_OR.MAXIMUMAPPROVALLIMITHELPLINK, "Maximum Approval Limit Help Link");
		 assertText(EDTC_OR.MODALDIALOGTEXT, maximumApprovalLimitHelpText);
		 click(EDTC_OR.MODALDIALOGCLOSEBTN,"Maximum Approval Limit Help Close Button");
		 Thread.sleep(lSleep_Low);
		 //Validate Employee Approve Payment Help Text
		 isEnabled(EDTC_OR.EMPLOYEEAPPROVEPAYMENTSHELPLINK,"Employee Approve Payment Help Link" );
		 click(EDTC_OR.EMPLOYEEAPPROVEPAYMENTSHELPLINK, "Employee Approve Payment Help Link");
		 assertText(EDTC_OR.MODALDIALOGTEXT, employeeApprovePaymentsHelpText);
		 click(EDTC_OR.MODALDIALOGCLOSEBTN,"Employee Approve Payment Help Close Button");
		 Thread.sleep(lSleep_Low);
		 
		 //Click on PTO - Paid Time Off Tab
		 click(EDTC_OR.PAIDTIMEOFFTAB, "Paid Time Off Tab");
		 
		 //Validate Create YMP Help Text
		 isEnabled(EDTC_OR.CREATEYMPHELPLINK_ADD_MODIFYPAGE,"Create YMP Help Link" );
		 click(EDTC_OR.CREATEYMPHELPLINK_ADD_MODIFYPAGE, "Create YMP Help Link");
		 assertText(EDTC_OR.MODALDIALOGTEXT, createYmpHelpText);
		 click(EDTC_OR.MODALDIALOGCLOSEBTN,"Create YMP Help Close Button");
		 Thread.sleep(lSleep_Low);
		 //Validate Calculate PTO Help Text
		 isEnabled(EDTC_OR.CALCULATEPTOHELPLINK,"Calculate PTO Help Link" );
		 click(EDTC_OR.CALCULATEPTOHELPLINK, "Calculate PTO Help Link");
		 assertText(EDTC_OR.MODALDIALOGTEXT, calculatePtolHelpText);
		 click(EDTC_OR.MODALDIALOGCLOSEBTN,"Calculate PTO Help Close Button");
		 Thread.sleep(lSleep_Low);
		 //Validate Annual Base Salary Help Text
		 isEnabled(EDTC_OR.ANNUALBASESALARYHELPLINK,"Annual Base Salary Help Link" );
		 click(EDTC_OR.ANNUALBASESALARYHELPLINK, "Annual Base Salary Help Link");
		 assertText(EDTC_OR.MODALDIALOGTEXT, annualBaseSalaryHelpText);
		 click(EDTC_OR.MODALDIALOGCLOSEBTN,"Annual Base Salary Help Close Button");
		 Thread.sleep(lSleep_Low);
		 //Validate PTO CarryOver And Allocations Help Text
		 isEnabled(EDTC_OR.PTOCARRYOVERSANDALLOCATIONSHELPLINK,"PTO CarryOver And Allocations Help Link" );
		 click(EDTC_OR.PTOCARRYOVERSANDALLOCATIONSHELPLINK, "PTO CarryOver And Allocations Help Link");
		 assertText(EDTC_OR.MODALDIALOGTEXT, ptoCarryOversAndAllocationsHelpText);
		 click(EDTC_OR.MODALDIALOGCLOSEBTN,"PTO CarryOver And Allocations Help Close Button");
		 Thread.sleep(lSleep_Low);
		 
		 //Click on OT/Offsite balances Tab
		 click(EDTC_OR.OT_OFFSITEBALANCETAB, "Offsite Balances Tab");
		 //Validate OT Calculation Date Help Text
		 isEnabled(EDTC_OR.OTCALCULATIONDATEHELPLINK,"OT Calculation Date Help Link" );
		 click(EDTC_OR.OTCALCULATIONDATEHELPLINK, "OT Calculation Date Help Link");
		 assertText(EDTC_OR.MODALDIALOGTEXT, otCalculationDateHelpText);
		 click(EDTC_OR.MODALDIALOGCLOSEBTN,"OT Calculation Date Help Close Button");
		 Thread.sleep(lSleep_Low);
              blnEventReport = false;
		} catch (Exception e) {
		throw e;
	}
 }


	
	/********************************************************************************************************
  	 * Method 	Name		:	voidWorkSheet()
  	 * Author				:	
  	 * Description			:	This method Sets the Approver or Payer
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/
	public void validateTPSSheetPageErrorMsg() throws Throwable{
		try{
			blnEventReport = true;
			
			 //Blank Addl PTO taken
			 driver.findElement(EDTC_OR.ADDLPTOTAKENVALUE).clear();
			 click(EDTC_OR.CALCULATEBTN, "Calculate Button");
			 waitForElementPresent(EDTC_OR.ACCESSTONEWRECORDNOTALLOWEDMSG, "Value in Addl PTO taken is invalid");
			 assertText(EDTC_OR.ACCESSTONEWRECORDNOTALLOWEDMSG, "Value in Addl PTO taken is invalid");
			 click(EDTC_OR.MODALDIALOGOKBTN, "OK Button");
			
			 //Alphabets in Addl PTO taken
			 type(EDTC_OR.ADDLPTOTAKENVALUE,"tps", "Addl PTO taken Text Field");
			 click(EDTC_OR.CALCULATEBTN, "Calculate Button");
			 waitForElementPresent(EDTC_OR.ACCESSTONEWRECORDNOTALLOWEDMSG, "Value in Addl PTO taken is invalid");
			 assertText(EDTC_OR.ACCESSTONEWRECORDNOTALLOWEDMSG, "Value in Addl PTO taken is invalid");
			 click(EDTC_OR.MODALDIALOGOKBTN, "OK Button");

			 //Negative values in Addl PTO taken
			 type1(EDTC_OR.ADDLPTOTAKENVALUE,"-11", "Addl PTO taken Text Field");
			 click(EDTC_OR.CALCULATEBTN, "Calculate Button");
			 waitForElementPresent(EDTC_OR.ACCESSTONEWRECORDNOTALLOWEDMSG, "Value in Addl PTO taken is invalid");
			 assertText(EDTC_OR.ACCESSTONEWRECORDNOTALLOWEDMSG, "Value in Addl PTO taken is invalid");
			 click(EDTC_OR.MODALDIALOGOKBTN, "OK Button");
			
			 // Alphabets and Numerical values 
			 type1(EDTC_OR.HOURLYRATETEXTFIELD,"tps","Hourly Rate Text Field");
			 type1(EDTC_OR.PAYGROUPTEXTFIELD,"tps", "Pay Group Text Field");
			 type1(EDTC_OR.PAIDTHRUDATETEXTFIELD,"tps", "Paid thru date Text Field");
			 type1(EDTC_OR.ADDLPTOTAKENVALUE,"11", "Addl PTO taken Text Field");
			 click(EDTC_OR.BWPAYCYCLERADIOBTN, "BW Pay cycle Radio Button");
			 isDisabled(EDTC_OR.TOPSAVEBTNBTN, "Top Save Button");
			 
			 
			 type1(EDTC_OR.HOURLYRATETEXTFIELD,"-11","Hourly Rate Text Field");
			 isDisabled(EDTC_OR.TOPSAVEBTNBTN, "Top Save Button");
			 
			 type1(EDTC_OR.HOURLYRATETEXTFIELD,"11","Hourly Rate Text Field");
			 isDisabled(EDTC_OR.TOPSAVEBTNBTN, "Top Save Button");
			 
			 type1(EDTC_OR.PAYGROUPTEXTFIELD,"-11", "Pay Group Text Field");
			 isDisabled(EDTC_OR.TOPSAVEBTNBTN, "Top Save Button");
			 
			 type1(EDTC_OR.PAYGROUPTEXTFIELD,"11", "Pay Group Text Field");
			 type1(EDTC_OR.PAIDTHRUDATETEXTFIELD,"-11", "Paid thru date Text Field");
			 isDisabled(EDTC_OR.TOPSAVEBTNBTN, "Top Save Button");
			 
			 type1(EDTC_OR.PAIDTHRUDATETEXTFIELD,"11", "Paid thru date Text Field");
			 isEnabled(EDTC_OR.TOPSAVEBTNBTN, "Top Save Button");
			 
			 blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
  	 * Method 	Name		:	addPRExceptions()
  	 * Author				:	
  	 * Description			:	This method creates an PR Exception
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/
	public void validatePRException(String SheetName,int iLoop) throws Throwable{
		try{
			blnEventReport = true;
			String strPayType=Excelobject.getCellData(SheetName, "Pay Type", iLoop);
			String strCompany=Excelobject.getCellData(SheetName, "Company", iLoop);
			String strMemo=Excelobject.getCellData(SheetName, "Memo", iLoop);
			String strCompleteStatus=Excelobject.getCellData(SheetName, "Complete Status", iLoop);
			String strST_OT=Excelobject.getCellData(SheetName, "ST OT", iLoop);
			String str_1_5_OT=Excelobject.getCellData(SheetName, "1.5 OT", iLoop);
			String str_2_0_OT=Excelobject.getCellData(SheetName, "2.O OT", iLoop);
			String strPTO=Excelobject.getCellData(SheetName, "PTO", iLoop);
			String strOPT=Excelobject.getCellData(SheetName, "OPT", iLoop);
			String strSick=Excelobject.getCellData(SheetName, "Sick", iLoop);
			String strBereavement=Excelobject.getCellData(SheetName, "Bereavement", iLoop);
			String strJuryDuty=Excelobject.getCellData(SheetName, "Jury Duty", iLoop);
			String strUnpaid=Excelobject.getCellData(SheetName, "Unpaid", iLoop);
			String strRegular=Excelobject.getCellData(SheetName, "Regular", iLoop);
			String strOffsite=Excelobject.getCellData(SheetName, "Offsite", iLoop);
			String strReclassPTO=Excelobject.getCellData(SheetName, "Reclass PTO", iLoop);
			String strPriorYearPTO=Excelobject.getCellData(SheetName, "PriorYear PTO", iLoop);
			String strPriorYearOPT=Excelobject.getCellData(SheetName, "PriorYear OPT", iLoop);
			
			
			//Select Pay Type
			if(!strPayType.isEmpty()){
				validateDropDownValue(EDTC_OR.PAYTYPEDROPDOWN, strPayType, "PayType Drop Down");		
			}
			//Select Company			
			if(!strCompany.isEmpty()){
				validateDropDownValue(EDTC_OR.COMPANYDROPDOWN, strCompany, "Company Drop Down");		
			}
			//Enter Memo
			if(!strMemo.isEmpty()){
				validateTextFieldValue(EDTC_OR.MEMOTEXTAREA_PREXCEPTIONPAGE, strMemo, "Memo Text Area");		
			}
			
			//Click the Complete Checkbox
			if(strCompleteStatus.equalsIgnoreCase("Y")){
				isChecked_Report(EDTC_OR.COMPLETECHECKBOX, "Complete Checkbox");
			}else if(strCompleteStatus.equalsIgnoreCase("N")){
				if(isChecked(EDTC_OR.COMPLETECHECKBOX, "Complete Checkbox")){
					failureReport("Validate whether the Complete Checkbox is unchecked", "Complete Checkbox is checked");
				}else{
					SuccessReport("Validate whether the Complete Checkbox is unchecked", "Complete Checkbox is unchecked");
				}
			}
			//Enter the SO OT value
			if(!strST_OT.isEmpty()){
				validateTextFieldValue(EDTC_OR.STOTTEXTFIELD, strST_OT, "ST OT Text Field");		
			}
			//Enter the 1.5 OT value
			if(!str_1_5_OT.isEmpty()){
				validateTextFieldValue(EDTC_OR.OT_1_5TEXTFIELD, str_1_5_OT, "1.5 OT Text Field");		
			}
			//Enter the 2.0 OT value
			if(!str_2_0_OT.isEmpty()){
				validateTextFieldValue(EDTC_OR.OT_2_0TTEXTFIELD, str_2_0_OT, "2.0 OT Text Field");		
			}
			//Enter the PTO value
			if(!strPTO.isEmpty()){
				validateTextFieldValue(EDTC_OR.PTOTEXTFIELD, strPTO, "PTO Text Field");		
			}
			//Enter the OPT value
			if(!strOPT.isEmpty()){
				validateTextFieldValue(EDTC_OR.OPTTEXTFIELD, strOPT, "OPT Text Field");		
			}
			//Enter the Sick value
			if(!strSick.isEmpty()){
				validateTextFieldValue(EDTC_OR.SICKTEXTFIELD, strSick, "Sick Text Field");		
			}
			//Enter the Sick value
			if(!strBereavement.isEmpty()){
				validateTextFieldValue(EDTC_OR.BEREAVEMENTTEXTFIELD, strSick, "Bereavement Text Field");		
			}
			//Enter the Jury Date value
			if(!strJuryDuty.isEmpty()){
				validateTextFieldValue(EDTC_OR.JURYDUTYTEXTFIELD, strJuryDuty, "Jury Duty Text Field");		
			}
			//Enter the Unpaid value
			if(!strUnpaid.isEmpty()){
				validateTextFieldValue(EDTC_OR.UNPAIDTEXTFIELD, strUnpaid, "Unpaid Text Field");		
			}
			//Enter the Regular value
			if(!strRegular.isEmpty()){
				validateTextFieldValue(EDTC_OR.REGULARTEXTFIELD, strRegular, "Regular Text Field");		
			}
			//Enter the Offsite value
			if(!strOffsite.isEmpty()){
				validateTextFieldValue(EDTC_OR.OFFSITETEXTFIELD, strOffsite, "Offsite Text Field");		
			}
			//Enter the Reclass PTO value
			if(!strReclassPTO.isEmpty()){
				validateTextFieldValue(EDTC_OR.RECLASSPTOTEXTFIELD, strReclassPTO, "Reclass PTO Text Field");		
			}
			//Enter the PriorYear PTO value
			if(!strPriorYearPTO.isEmpty()){
				validateTextFieldValue(EDTC_OR.PRIOYEARROPTTEXTFIELD, strPriorYearPTO, "PriorYear PTO Text Field");		
			}
			//Enter the PriorYear OPT value
			if(!strPriorYearOPT.isEmpty()){
				validateTextFieldValue(EDTC_OR.PRIOYEARROPTTEXTFIELD, strPriorYearOPT, "PriorYear OPT Text Field");		
			}
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}	
	
	/********************************************************************************************************
  	 * Method 	Name		:	validateResetPwdPage()
  	 * Author				:	
  	 * Description			:	This method Sets the Approver or Payer
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/
	public void validateResetPwdPage(String addlNoteHelpText,String newPwdHelpText,String empStatus,String employeesAdmin,String employeesEmail) throws Throwable{
		try{
			blnEventReport = true;
			//Validate the fields
			isElementDisplayed(EDTC_OR.PWDEXPIRESTEXTFIELD, "Number of hours until password expires Text Field");
			isElementDisplayed(EDTC_OR.NEWPASSWORDDTEXTFIELD, "New Password Text Field");
			isElementDisplayed(EDTC_OR.GENERATERANDOMPWDBTN, "Retype new password Text Field");
			isElementDisplayed(EDTC_OR.UPDATEPWDBTN, "Update Password sButton");
			isElementDisplayed(EDTC_OR.SENDEMAILNOTIFICATIONCHECKBOX, "Send email notification to employee Check box");
			isElementDisplayed(EDTC_OR.TEXTAREA, "Note for Employee Text Area");
			isChecked_Report(EDTC_OR.SENDEMAILNOTIFICATIONCHECKBOX, "Send email notification to employee Check box");
			
			//Check for Update Pwd Disable
			isDisabled(EDTC_OR.UPDATEPWDBTN, "Update Password Button");
			
			//Validate whether the Employee is Active or not
			assertText(EDTC_OR.EMPACTIVESTATUS,empStatus);

			//Validate whether the Employees Admin 
			assertText(EDTC_OR.EMPADMINNAME,employeesAdmin);

			//Validate whether the Employees Admin 
			assertText(EDTC_OR.EMPEMAIL,employeesEmail);

			type(EDTC_OR.PWDEXPIRESTEXTFIELD,"12345","Number Of Hours Until Password Expires Text Field");
			String strValue1=getAttribute(EDTC_OR.PWDEXPIRESTEXTFIELD,"value","Number Of Hours Until Password Expires Text Value");
			if(strValue1.equalsIgnoreCase("123")){
				SuccessReport("Validate whether user is allowed to enter maximum 3 characters in Number Of Hours Until Password Expires Text Field", "User is allowed to enter maximum 3 characters in Number Of Hours Until Password Expires Text Field");
			}else{
				failureReport("Validate whether user is allowed to enter maximum 3 characters in Number Of Hours Until Password Expires Text Field", "User is allowed to enter maximum 20 characters in Number Of Hours Until Password Expires Text Field");
			}
			
			
			type(EDTC_OR.NEWPASSWORDDTEXTFIELD,"passwordexpires123","Number Of Hours Until Password Expires Text Field");
			//Check for Update Pwd Disable
			isDisabled(EDTC_OR.UPDATEPWDBTN, "Update Password Button");
			
			type(EDTC_OR.NEWPASSWORDDTEXTFIELD,"passwordexpires1","Number Of Hours Until Password Expires Text Field");
			//Check for Update Pwd Disable
			isEnabled(EDTC_OR.UPDATEPWDBTN, "Update Password Button");
			
			//Validate New Password Help Text
			click(EDTC_OR.NEWPWDHELPLINK, "New password Help Link");
			assertText(EDTC_OR.MODALDIALOGTEXT,newPwdHelpText);
			click(EDTC_OR.MODALDIALOGCLOSEBTN,"Close Button");
			Thread.sleep(lSleep_Low);
			
			//Validate Additional Administrator Note Help Text
			click(EDTC_OR.ADDITIONALNOTEHELPLINK, "Additional note Help Link");
			assertText(EDTC_OR.MODALDIALOGTEXT,addlNoteHelpText);
			click(EDTC_OR.MODALDIALOGCLOSEBTN,"Close Button");
			Thread.sleep(lSleep_Low);
			
			
			click(EDTC_OR.BACKBUTTON, "Back Button");
		    //This method validates the Page title
			validatePageHeader(EDTC_OR.PAGEHEADER, "ADMINISTRATOR TOOLS");
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
	   * Method 	Name    :	enterDetailsOfResetPassword()
	   * Author				:	
	   * Description		:	This method will enter ResetPassword Page text boxes in EDTC Application
	   * Date of creation 	:	
	   * modifying person 	: 	
	   * Date of modification	: 
	   * @throws Throwable	:
   ********************************************************************************************************/ 
	  public void enterDetailsOfResetPassword(String strNoOfHours,String strNewPassword,String strAdditionalNoteTextField,String empNotification) throws Throwable {
		try {
			blnEventReport = true;
			//Enter the values if Number Of Hours Until Password Expires is not empty
			if(!strNoOfHours.isEmpty()){
				type(EDTC_OR.PWDEXPIRESTEXTFIELD, strNoOfHours, "Number Of Hours Until Password Expires Text Field");
			}
			
			//Enter the Password/Generate Random Password
			if(strNewPassword.isEmpty()){
				click(EDTC_OR.GENERATERANDOMPWDBTN,"Generate Random Password Button");
				value=getAttribute(EDTC_OR.NEWPASSWORDDTEXTFIELD, "value", "New Password Value");
				SuccessReport("Validate the Random Password generated", value+" is the Random Password Generated");
			}
			else{
				type(EDTC_OR.NEWPASSWORDDTEXTFIELD, strNewPassword, "New PasswordText Field");
			}
	
			isEnabled(EDTC_OR.UPDATEPWDBTN, "Update Password Button");
			
			//Enter the Additional Note For Employee
			if(!strAdditionalNoteTextField.isEmpty()){
				type(EDTC_OR.TEXTAREA, strAdditionalNoteTextField, "Additional Note For Employee Text Field");
			}
	
			//Send Email Notification to Employee
			if(empNotification.equalsIgnoreCase("Y")){
				if(!isChecked(EDTC_OR.SENDEMAILNOTIFICATIONCHECKBOX, "Send email notification to employee Check box")){
					click(EDTC_OR.SENDEMAILNOTIFICATIONCHECKBOX, "Send email notification to employee Check box");
				}
			}else if (empNotification.equalsIgnoreCase("N")){
				if(isChecked(EDTC_OR.SENDEMAILNOTIFICATIONCHECKBOX, "Send email notification to employee Check box")){
					click(EDTC_OR.SENDEMAILNOTIFICATIONCHECKBOX, "Send email notification to employee Check box");
				}
			}
			blnEventReport = false;
			} catch (Exception e) {
			throw e;
		}
	}	
	 /********************************************************************************************************
	  * Method 	Name    :	updatePassword()
	  * Author				:	
	  * Description		:	This method will validate enabling of update password in EDTC Application
	  * Date of creation 	:	
	  * modifying person 	: 	
	  * Date of modification	: 
	  * @throws Throwable	:
	  ********************************************************************************************************/ 	  
	  public void updatePassword() throws Throwable{
		  try {
			  blnEventReport = true;
			  String strValue=getText(EDTC_OR.EMPEMAIL,"Email").trim();
			  click(EDTC_OR.UPDATEPWDBTN, "Update Password Button");
			  if(isAlertPresent()){
				Alert alert=driver.switchTo().alert();
				String strText=alert.getText();
				if(strText.equalsIgnoreCase("Password is in non-standard format. Are you sure you want to do this ? See Help (?) topic next to New Password field for more details")){
					SuccessReport("Validate the Alert Text", strText+ " text is present");
				}else{
					failureReport("Validate the Alert Text", "Text is not present");
				}
				alert.accept();
			  }
			  if(strValue.isEmpty()){
				  assertText(EDTC_OR.SEARCHMATCHESLABEL, "Success! Successfully updated password. Send mail process failed");  
			  }else{
				  assertText(EDTC_OR.SEARCHMATCHESLABEL, "Success! Successfully updated password. Send mail process successful");
			  }
			  click(EDTC_OR.MODALDIALOGOKBTN, "OK Button");
			  Thread.sleep(lSleep_Low);
			  
			  blnEventReport = false;
			} catch (Exception e) {
			throw e;
		}
	  }
	  
//	  /********************************************************************************************************
//	   * Method 	Name    :	enablingOfUpdatePassword()
//	   * Author				:	
//	   * Description		:	This method will validate enabling of update password in EDTC Application
//	   * Date of creation 	:	
//	   * modifying person 	: 	
//	   * Date of modification	: 
//	   * @throws Throwable	:
//   ********************************************************************************************************/ 
//	  public void enablingOfUpdatePassword(String strNewPassword,String strPassword) throws Throwable {
//		try {
//			type(EDTC_OR.NEWPASSWORDTEXTFIELD, strNewPassword, "New PasswordText Field");
//			if(strNewPassword.length()==6 && strNewPassword.length()<=16 ){
//				isEnabled(EDTC_OR.UPDATEPASSWORDBTN, "Update Password Button");
//			}
//			else if(strNewPassword.equalsIgnoreCase(strPassword)){
//				
//				isElementDisplayed(EDTC_OR.NEWPASSWORDERRORMSG, "New password cannot be same as old password");
//			}
//			else {
//				isElementDisplayed(EDTC_OR.NEWPASSWORDERRORMSG, "Enter a valid password");
//			}
//			
//		    } catch (Exception e) {
//		  	  throw e;
//			}
//		}
	  /********************************************************************************************************
		 * Method Name : validate_ModifyEmployeePageFields() 
		 * Author : 
		 * Description : This method Validates the Fields on the Modify Employee Page
		 * Date of creation :
		 * modifying person :
		 * Date of modification :
		 * @throws Throwable
		 ********************************************************************************************************/
		public void validate_PTO_OffsitBalance_Section(String strCarryOverTypeDDValues,
				String strAllocationTypeDDValues) throws Throwable {
		try{
			blnEventReport = true;
		
			//Validate Paid Time Off Section
			click(EDTC_OR.PAIDTIMEOFFTAB, "Paid Time Off Tab");
			isElementDisplayed(EDTC_OR.PTOELIGIBILITYDATETEXTFIELD, "PTO Eligibility Date Text Field");
			isDisabled(EDTC_OR.CREATEYMPBUTTON, "Create YMP Button");
			isElementDisplayed(EDTC_OR.CALCULATEPTOBTN, "Calculate PTO Button");
			isElementDisplayed(EDTC_OR.ANNUALBASESALTEXTFIELD, "Annual Base Salary Text Field");
			isElementDisplayed(EDTC_OR.AMOUNTTEXTFIELD, "Amount Text Field");
			isElementDisplayed(EDTC_OR.OT_OFFSITEBALANCETAB, "Offsite Balances Tab");
			
			validateDropDownValues(EDTC_OR.CARRYOVERTYPETEXTFIELD, strCarryOverTypeDDValues, "Holiday Template");
			validateDropDownValues(EDTC_OR.ALLOCATIONTYPETEXTFIELD, strAllocationTypeDDValues, "Holiday Template");
			
			//Validate OT/Offsite balances Section
			click(EDTC_OR.OT_OFFSITEBALANCETAB, "Offsite Balances Tab");
			isEnabled(EDTC_OR.OTCALCULATIONDATETEXTFIELD, "OT Calculation Date Text Field");
			isEnabled(EDTC_OR.ST_OT_MTD_TEXTFIELD, "ST OT For MTD Text Field");
			isEnabled(EDTC_OR.ST_OT_QTD_TEXTFIELD, "ST OT For QTD Text Field");
			isEnabled(EDTC_OR.ST_OT_YTD_TEXTFIELD, "ST OT For YTD Text Field");
			isEnabled(EDTC_OR.OT_1_5_MTD_TEXTFIELD, "1.5 OT For MTD Text Field");
			isEnabled(EDTC_OR.OT_1_5_QTD_TEXTFIELD, "1.5 OT For QTD Text Field");
			isEnabled(EDTC_OR.OT_1_5_YTD_TEXTFIELD, "1.5 OT For YTD Text Field");
			isEnabled(EDTC_OR.OT_2_0_MTD_TEXTFIELD, "2.0 OT For MTD Text Field");
			isEnabled(EDTC_OR.OT_2_0_QTD_TEXTFIELD, "2.0 OT For QTD Text Field");
			isEnabled(EDTC_OR.OT_2_0_YTD_TEXTFIELD, "2.0 OT For YTD Text Field");
			isEnabled(EDTC_OR.HPREM_MTD_TEXTFIELD, "HPREM For MTD Text Field");
			isEnabled(EDTC_OR.HPREM_QTD_TEXTFIELD, "HPREM For QTD Text Field");
			isEnabled(EDTC_OR.HPREM_YTD_TEXTFIELD, "HPREM For YTD Text Field");
			isEnabled(EDTC_OR.OFFSITE_MTD_TEXTFIELD, "Offsite For MTD Text Field");
			isEnabled(EDTC_OR.OFFSITE_QTD_TEXTFIELD, "Offsite For QTD Text Field");
			isEnabled(EDTC_OR.OFFSITE_YTD_TEXTFIELD, "Offsite For YTD Text Field");
			isEnabled(EDTC_OR.RESETBTN, "Research Button");
			isEnabled(EDTC_OR.SAVEBTN, "Save Button");
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	
	/********************************************************************************************************
	 * Method Name 		: validateBasicInfo_Section() 
	 * Author 			: 
	 * Description		: This method Validates the Fields on the Modify Employee Page
	 * Date of creation :
	 * modifying person :
	 * Date of modification :
	 * @throws Throwable
	 ********************************************************************************************************/		
	public void validateBasicInfo_Section(String strTimekeeperDropDown1,String strTimekeeperDropDown2,
				String strCompanyDDValues,String strPositionDDValues,String strLevelDDValues,String strPayTypeDDValues,
				String strStateCodeDDValues,String strSickLeaveOverrideDDValues,String strInputTypeDDValues,
				String strTpsPrivilegesDDValues,String strHolidayTemplateDDValues) throws Throwable {
		try {
			blnEventReport = true;
			boolean bFlag=false;
		
			// Validate the Fields on the Basic Info Section
			isElementDisplayed(EDTC_OR.TIMEKEEPERIDTEXTFIELD1, "TimeKeeper Text Field1");
			isElementDisplayed(EDTC_OR.TIMEKEEPERIDTEXTFIELD2, "TimeKeeper Text Field2");
			
			isEnabled(EDTC_OR.DISCONTINUEEMPCHECKBOX, "Discontinue Employee Check Box");
			isEnabled(EDTC_OR.EMPNAMETEXTFIELD, "Name Text Field");
			isEnabled(EDTC_OR.EMPEMAILTEXTFIELD, "Email Text Field");
			isEnabled(EDTC_OR.TIMEKEEPERDROPDOWN1, "TimeKeeper DropDown1");
			isEnabled(EDTC_OR.TIMEKEEPERDROPDOWN2, "TimeKeeper DropDown2");
			isEnabled(EDTC_OR.EMPID_NAMETEXTFIELD, "Payroll Id Or Employee Name Text Field");
			isEnabled(EDTC_OR.SEARCHBTN, "Search Button");
			isEnabled(EDTC_OR.SUPPPAYAPPROVERTEXTFIELD, "Supplemental Pay Approver Text Field");
			isEnabled(EDTC_OR.NOPTOEMAILCHECKBOX, "No PTO Email Checkbox");
			isEnabled(EDTC_OR.NOGENEMAILCHECKBOX, "No Gen Email Checkbox");
			isEnabled(EDTC_OR.NOTIMESHEETREMINDERCHECKBOX, "No Routine Timesheet Remainders Checkbox");
			isEnabled(EDTC_OR.HRMGRCHECKBOX, "HR Manager Checkbox");
			
			isEnabled(EDTC_OR.TIMEKEEPERDROPDOWN1,"TimeKeeper DropDown1");
			isEnabled(EDTC_OR.TIMEKEEPERDROPDOWN2,"TimeKeeper DropDown2");
			isEnabled(EDTC_OR.COMPANYDROPDOWN,"Company");
			isEnabled(EDTC_OR.POSITIONDROPDOWN,"Position");
			isEnabled(EDTC_OR.LEVELDROPDOWN,"Level");
			isEnabled(EDTC_OR.PAYTYPEDROPDOWN,"paytype");
			isEnabled(EDTC_OR.STATECODEDROPDOWN,"State Code");
			isEnabled(EDTC_OR.SICKLEAVEOVERRIDEDROPDOWN,"Sick Leave Override");
			isEnabled(EDTC_OR.INPUTTYPEDROPDOWN,"Input Type");
			isEnabled(EDTC_OR.TPSPRIVILEGESDROPDOWN,"TPS Privileges");
			isEnabled(EDTC_OR.HOLIDAYTEMPLATEDROPDOWN,"Holiday Template");
			
			
//			validateDropDownValues(EDTC_OR.TIMEKEEPERDROPDOWN1, strTimekeeperDropDown1, "TimeKeeper DropDown1");
//			validateDropDownValues(EDTC_OR.TIMEKEEPERDROPDOWN2, strTimekeeperDropDown2, "TimeKeeper DropDown2");
			//This method validates the Drop Down Values - Company	
			validateCompanyDropDown(strCompanyDDValues);
			validateDropDownValues(EDTC_OR.POSITIONDROPDOWN, strPositionDDValues, "Position");
			validateDropDownValues(EDTC_OR.LEVELDROPDOWN, strLevelDDValues, "Level");
			validateDropDownValues(EDTC_OR.PAYTYPEDROPDOWN, strPayTypeDDValues, "paytype");
			validateDropDownValues(EDTC_OR.STATECODEDROPDOWN, strStateCodeDDValues, "State Code");
			validateDropDownValues(EDTC_OR.SICKLEAVEOVERRIDEDROPDOWN, strSickLeaveOverrideDDValues, "Sick Leave Override");
			validateDropDownValues(EDTC_OR.INPUTTYPEDROPDOWN, strInputTypeDDValues, "Input Type");
			validateDropDownValues(EDTC_OR.TPSPRIVILEGESDROPDOWN, strTpsPrivilegesDDValues, "TPS Privileges");
			validateDropDownValues(EDTC_OR.HOLIDAYTEMPLATEDROPDOWN, strHolidayTemplateDDValues, "Holiday Template");
			
			List<WebElement> elements=driver.findElements(EDTC_OR.REGULARLYSCHEDULEDHRS);
			for(WebElement ele:elements){
			 if(!ele.isDisplayed()){
				 bFlag=true;
			     break;
				}
			}
			if(!bFlag){
				SuccessReport("Validate Regularly Scheduled Hours text fields are Displayed", "Regularly Scheduled Hours text fields are Displayed");
			   }else{
				failureReport("Validate Regularly Scheduled Hours text fields are Displayed", "Regularly Scheduled Hours text fields are Not Displayed");
			   }
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
	 * Method Name 		: validateSupp_Pay_Section() 
	 * Author 			: 
	 * Description		: This method Validates the Fields on the Modify Employee Page
	 * Date of creation :
	 * modifying person :
	 * Date of modification :
	 * @throws Throwable
	 ********************************************************************************************************/		
	public void validateSupp_Pay_Section() throws Throwable{
		try{
			blnEventReport = true;

			//Validate Supplemental Pay Tab
			isElementDisplayed(EDTC_OR.SUPPPAYTAB, "Supplemental Pay Tab");
			click(EDTC_OR.SUPPPAYTAB, "Supplemental Pay Tab");
			isElementDisplayed(EDTC_OR.PAYMENTLIMITTEXTFIELD, "Payment Limit For Employee Acting As Approver Text Field");
			isElementDisplayed(EDTC_OR.AUTHCODETOACTASAPPROVERTEXTFIELD, "Authorization Code To Act As Supplemental Approver Text Field");
			isElementDisplayed(EDTC_OR.APPROVEPAYMENTSTEXTFIELD1, "Approve Payments Text Field1");
			isElementDisplayed(EDTC_OR.APPROVEPAYMENTSTEXTFIELD2, "Approve Payments Text Field2");
			isElementDisplayed(EDTC_OR.APPROVEPAYMENTSTEXTFIELD3, "Approve Payments Text Field3");
			if(getAttribute(EDTC_OR.MAXAPPROVALLIMITTEXTFIELD,"readonly","Maximum Approval Limit Text Field").equalsIgnoreCase("true")){
				   SuccessReport("Validae whether Maximum Approval Limit Text Field is Readonly", "PTO Eligibility Date Text Field is Readonly");
			   }else{
				   SuccessReport("Validae whether Maximum Approval Limit Text Field is Readonly", "PTO Eligibility Date Text Field is not Readonly");
			   }
			isElementDisplayed(EDTC_OR.CHECKLIMITSBTN, "Check Limits Button");
			isElementDisplayed(EDTC_OR.PAIDTIMEOFFTAB, "Paid Time Off Tab");
			
			isEnabled(EDTC_OR.PAYMENTLIMITTEXTFIELD, "Payment Limit For Employee Acting As Approver Text Field");
			isEnabled(EDTC_OR.AUTHCODETOACTASAPPROVERTEXTFIELD, "Authorization Code To Act As Supplemental Approver Text Field");
			isEnabled(EDTC_OR.APPROVEPAYMENTSTEXTFIELD1, "Approve Payments Text Field1");
			isEnabled(EDTC_OR.APPROVEPAYMENTSTEXTFIELD2, "Approve Payments Text Field2");
			isEnabled(EDTC_OR.APPROVEPAYMENTSTEXTFIELD3, "Approve Payments Text Field3");
			isEnabled(EDTC_OR.CHECKLIMITSBTN, "Check Limits Button");
			isEnabled(EDTC_OR.PAIDTIMEOFFTAB, "Paid Time Off Tab");
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
	 * Method Name 		: employeeSearch() 
	 * Author 			: 
	 * Description		: This method Validates the Fields on the Modify Employee Page
	 * Date of creation :
	 * modifying person :
	 * Date of modification :
	 * @throws Throwable
	 ********************************************************************************************************/
	public void employeeSearch(String strEmpID_Name) throws Throwable{
		try{
			blnEventReport = true;
			type(EDTC_OR.EMPID_NAMETEXTFIELD,"123456789090111","Employee ID/Name Text Field");
			String strValue=getAttribute(EDTC_OR.EMPID_NAMETEXTFIELD,"value","Employee ID/Name Text Field");
			if(strValue.equalsIgnoreCase("123456789090")){
				SuccessReport("Validate whether user is allowed to enter maximum 12 characters in Employee ID/Name Text Field", "User is allowed to enter maximum 12 characters in Employee ID/Name Text Field");
			}else{
				failureReport("Validate whether user is allowed to enter maximum 12 characters in Employee ID/Name Text Field", "User is allowed to enter more than 12 characters in Employee ID/Name Text Field");
			}
			
			type(EDTC_OR.EMPID_NAMETEXTFIELD,strEmpID_Name,"Employee ID/Name Text Field");
			click(EDTC_OR.SEARCHEMPLOYEEBTN,"Search for Employee Button");
			waitForElementPresent(EDTC_OR.EMPSEARCHLOOKUPTABLE, "Employee Search Lookup table");
			String searchResults=getText(EDTC_OR.EMPSEARCHLOOKUPTABLE, "Employee Search Lookup table").split(" ")[0];
			SuccessReport("Validate whether Admin searches an Employee", "Popup Dialog is displayed with "+searchResults+" results");
			click(EDTC_OR.MODALDIALOGCLOSELINK, "Close Link");
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
	 * Method Name 		: validateTimeSheetSummaryPage() 
	 * Author 			: 
	 * Description		: This method Validates the Fields on the Modify Employee Page
	 * Date of creation :
	 * modifying person :
	 * Date of modification :
	 * @throws Throwable
	 ********************************************************************************************************/	
	 public void validateTimeSheetSummaryPage(String tsSummaryTableHeadings,String timeSheetSummaryHelpText,
			 String tsEnteredTableHeadings,String strValue,String strCorrectionRequest) throws Throwable{
		 try{
			 blnEventReport = true;
			 isElementDisplayed(EDTC_OR.PRINFORMATTBTN, "Print Format Button");
			 
			 //This method validates the Table Headings
			 verifyTableHeading(By.xpath(EDTC_OR.TIMESHEETSUMMARYTABLE+"/thead/tr/th"), tsSummaryTableHeadings);
			 Thread.sleep(lSleep_Low);
			 
			 if(isElementPresent(By.xpath(EDTC_OR.TIMESHEETSUMMARYTABLE+"/tbody/tr"), "Time Sheet Summary Table")){
				 String strWeek=getText(By.xpath(EDTC_OR.TIMESHEETSUMMARYTABLE+"/tbody/tr[1]/td[2]/div"), "Week Date");
				 isElementDisplayed(By.xpath(EDTC_OR.TIMESHEETSUMMARYTABLE+"/tbody/tr[1]/td/div[@title='View timesheet']//span"), "Spyglass Icon");
				 isElementDisplayed(By.xpath(EDTC_OR.TIMESHEETSUMMARYTABLE+"/tbody/tr[1]/td/div[@title='View punch times']//span"), "Analog Clock Icon");
				 click(By.xpath(EDTC_OR.TIMESHEETSUMMARYTABLE+"/tbody/tr[1]/td/div[@title='View timesheet']//span"), "Spyglass Icon");
				 waitForElementPresent(EDTC_OR.SEARCHMATCHESLABEL, "Modal Diaolg");
				 
				 //Assert the Modal Dialog text
				 assertText(EDTC_OR.SEARCHMATCHESLABEL, "Self entered hours for "+empName+" ("+empID+"), for week ending "+strWeek);
				 
				 //This method validates the Table Headings
				 verifyTableHeading(By.xpath(EDTC_OR.MODALDIALOGTABLE+"/thead[1]/tr/th"), tsEnteredTableHeadings);
				 Thread.sleep(lSleep_Low);
				 
				 
				 if(strCorrectionRequest.equalsIgnoreCase("Y")){
					 isElementDisplayed(EDTC_OR.CORRECTIONREQLABEL, "Correction request(s) exist for this PE Date.");
				 }
				 
				 
				//Validate the 
				 String[] strHeading=strValue.split(",");
				 java.util.List<WebElement> headings=driver.findElements(By.xpath(EDTC_OR.MODALDIALOGTABLE+"/tbody/tr"));
				 int flag=0;
				 for(int i=1;i<=headings.size();i++){
					 String strText=getText(By.xpath(EDTC_OR.MODALDIALOGTABLE+"/tbody/tr["+i+"]/td[1]"), "").trim();
					 if(!strText.isEmpty()){
						 for(int j=0;j<strHeading.length;j++){
							 if(strText.contains(strHeading[j])){						
								 flag++;
								 break;
							 }								
						 }		
					 }
				 }
				 if(flag==strHeading.length){
					 SuccessReport("Validate whether following values are available in the table "+strValue,"values are available");
				 }
				 else{
					 failureReport("Validate whether following values are available in the table "+strValue,"values are not available");
				 } 
				 
				 click(EDTC_OR.MODALDIALOGCLOSEBTN, "Close Button");
				 Thread.sleep(lSleep_Low);
			 }else{
				 assertText(EDTC_OR.NODATAERRORMSG, "No Time Data has been entered for any Week Ending dates");
			 }
			 
			//Validate Time Sheet Summary Help Text
			click(EDTC_OR.TIMESHEETSUMMARYHELPLINK, "Time Sheet Summary Help Help Link");
			assertText(EDTC_OR.MODALDIALOGTEXT,timeSheetSummaryHelpText);
			click(EDTC_OR.MODALDIALOGCLOSEBTN,"Time Sheet Summary Help Help Close Button");
			
			blnEventReport = false;
			} catch (Exception e) {
				throw e;
			}
	 }
   /********************************************************************************************************
    * Method Name 		: validateTimeSheetSummaryPage() 
    * Author 			: 
    * Description		: This method Validates the Fields on the Modify Employee Page
    * Date of creation :
    * modifying person :
    * Date of modification :
    * @throws Throwable
    ********************************************************************************************************/		
	 public void validateTimeSheetEnteredDetails(String strMon,String strMonHours,String strTue,String strTueHours,String strWed,
			 String strWedHours,String strThu,String strThuHours,String strFri,String strFriHours,String strSat,String strSatHours,
			 String strSun,String strSunHours,String strWeek) throws Throwable{
	 	try{
	 		blnEventReport = true;
	 		
	 		if(isElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+strWeek+"')]"), "WE Date") && isElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+strWeek+"')]/parent::td/preceding-sibling::td/span[text()='Emp entered']"), "WE Date")){
	 			SuccessReport("Validate whether the Employee Entered Time Sheet for the "+strWeek+" is present", "Employee Entered Time Sheet for the "+strWeek+" is present");
	 			click(By.xpath(EDTC_OR.ELEMENTTEXT1+strWeek+"')]/parent::td/following-sibling::td/div[@title='View timesheet']//span"), strWeek+" SpyGlass Icon");
	 			waitForElementPresent(EDTC_OR.SEARCHMATCHESLABEL, "Modal Diaolg");
	 			 
	 			String strTimeText=getText(EDTC_OR.TIMESHEETUPDATEDTIME1,"").trim();
	 			String strTime=strTimeText.replaceAll("\\pL+", "").trim().split("  ")[1];
	 			String strAM_PM=empRequestTime.split(" ")[1];
	 			DateFormat sdf = new SimpleDateFormat("hh:mm");
	 			Date appTime = sdf.parse(strTime);
	 			Date codeTime = sdf.parse(empRequestTime);
	 			long diff = appTime.getTime() - codeTime.getTime();
	 			long diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(diff);
	 			String strTodaysDate=getCurrentDate("MM/dd/YYYY");
	 			if(diffInSeconds<=100 && strTimeText.contains(strAM_PM) && strTimeText.contains("GMT") && strTimeText.contains(strTodaysDate)){
	 				SuccessReport("Validate whether the Time stamp is displayed correctly after the Employee saves the timesheet "+empRequestTime, strTimeText+" Time stamp is displayed correctly after the Employee saves the timesheet ");
	 			}else{
	 				failureReport("Validate whether the Time stamp is displayed correctly after the Employee saves the timesheet "+empRequestTime, "Time stamp is not displayed correctly after the Employee saves the timesheet ");
	 			} 
	 			
	 			
	 			 //Validate Time Sheet Entered for Monday
				 validateHoursEntered(strMon,strMonHours,2,"Monday",regHrs.get(0));
				 //Validate Time Sheet Entered for Tuesday
				 validateHoursEntered(strTue,strTueHours,3,"Tuesday",regHrs.get(1));
				 //Validate Time Sheet Entered for Wednesday
				 validateHoursEntered(strWed,strWedHours,4,"Wednesday",regHrs.get(2));
				 //Validate Time Sheet Entered for Thursday
				 validateHoursEntered(strThu,strThuHours,5,"Thursday",regHrs.get(3));
				 //Validate Time Sheet Entered for Friday
				 validateHoursEntered(strFri,strFriHours,6,"Friday",regHrs.get(4));
				 //Validate Time Sheet Entered for Saturday
				 validateHoursEntered(strSat,strSatHours,7,"Saturday",regHrs.get(5));
				 //Validate Time Sheet Entered for Sunday
				 validateHoursEntered(strSun,strSunHours,8,"Sunday",regHrs.get(6));
				
				 //This method validates the Total Hours
	 			 validateTotalHours(EDTC_OR.MODALDIALOGTABLE);
	 			 
	 			 click(EDTC_OR.MODALDIALOGCLOSEBTN, "Close Button");
	 			 
	 		}else{
	 			failureReport("Validate whether the Employee Entered Time Sheet for the "+strWeek+" is present", "Employee Entered Time Sheet for the "+strWeek+" is not present");
	 		}
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	 
 /********************************************************************************************************
  * Method 	Name		:	clickEmployeeTimeSheetLink()
  * Author				:	
  * Description			:	This method validates the validates State Code
  * Date of creation 	:	
  * modifying person 	: 	
  * Date of modification	:
  ********************************************************************************************************/	
	public void clickEmployeeTimeSheetLink(String strEmptype) throws Throwable {
		try {
			blnEventReport = true;
			click(EDTC_OR.EMPTIMESHEETSLINK,"Employee Time Sheets Link");
			waitForElementPresent(EDTC_OR.SEARCHMATCHESLABEL, "Select Employee Group");
			click(EDTC_OR.MODALDIALOGCLOSELINK, "Modal Dialog Close Link");
			 
			//This method validates the Page title
			validatePageHeader(EDTC_OR.PAGEHEADER, "MANAGER TOOLS");
			
			click(EDTC_OR.EMPTIMESHEETSLINK,"Employee Time Sheets Link");
			waitForElementPresent(EDTC_OR.SEARCHMATCHESLABEL, "Select Employee Group");
			//Validate the Modal Dialog Heading
			assertText(EDTC_OR.SEARCHMATCHESLABEL, "Select employee group");
			//Validate the Modal Dialog Heading
			assertText(EDTC_OR.TIMESHEETSLABEL, "Time sheets");
			
			//Click on Exempt/Non-Exempt Link
			click(By.xpath(EDTC_OR.MODALDIALOGLINKTEXT+strEmptype+"']"),strEmptype+" Link");
			pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
			//This method validates the Page title
			if(strEmptype.equalsIgnoreCase("Exempt")){
				validatePageHeader(EDTC_OR.PAGEHEADER, "MANAGE FTE EMPLOYEE TIME TIMEKEEPER:"+loginEmpName);
			}else if(strEmptype.equalsIgnoreCase("Non-Exempt")){
				validatePageHeader(EDTC_OR.PAGEHEADER, "MANAGE FTN EMPLOYEE TIME TIMEKEEPER:"+loginEmpName);
			}else if(strEmptype.equalsIgnoreCase("Temporary")){
				validatePageHeader(EDTC_OR.PAGEHEADER, "MANAGE HRN EMPLOYEE TIME TIMEKEEPER:"+loginEmpName);
			}
			
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}	 
	 /********************************************************************************************************
  	 * Method 	Name		:	validateManageEmpTimePage()
  	 * Author				:	
  	 * Description			:	This method validates the validates State Code
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/		 
	public void validateManageEmpTimePage(String strHeadings,String strManageEmpHelptext,String updateHelpText) throws Throwable {
		try {
			blnEventReport = true;
			isElementDisplayed(EDTC_OR.CHANGETOWEEKENDINGDROPDOWN, "Change to Week Ending Drop Down");
			isElementDisplayed(EDTC_OR.UPDATEAUTHORIZATIONSBTN, "Update authorizations Button");
			//This method validates the Table Headings
			verifyTableHeading(EDTC_OR.TIMERECORDSTABLEHEADINGS, strHeadings);
			
			boolean blnFlag=false;
			List<WebElement> eleList=driver.findElements(By.xpath(EDTC_OR.ELEMENTTEXT1+"No data entered')]"));
			for(int i=0;i<eleList.size();i++){
				String cssValue=eleList.get(i).getCssValue("background-color");
				Color color = Color.fromString(cssValue);
				String bgdcolor=color.asHex().toString();
				if(!bgdcolor.equalsIgnoreCase("#5bc0de")){
					blnFlag=true;
					break;
				}
			}if(blnFlag){
				failureReport("Validate whether the Background color of No Data Entered Label is Malibu", "Background color of No Data Entered Label is not Malibu");
			}else{
				SuccessReport("Validate whether the Background color of No Data Entered Label is Malibu", "Background color of No Data Entered Label is Malibu");
			}
			
			
			blnFlag=false;
			eleList=driver.findElements(By.xpath(EDTC_OR.ELEMENTTEXT1+"Employee Entered')]"));
			for(int i=0;i<eleList.size();i++){
				String cssValue=eleList.get(i).getCssValue("background-color");
				Color color = Color.fromString(cssValue);
				String bgdcolor=color.asHex().toString();
				if(!bgdcolor.equalsIgnoreCase("#777777")){
					blnFlag=true;
					break;
				}
			}if(blnFlag){
				failureReport("Validate whether the Background color of Employee Entered Label is Black", "Background color of Employee Entered Label is Black Label is not Black");
			}else{
				SuccessReport("Validate whether the Background color of Employee Entered Label is Black", "Background color of Employee Entered Label is Black Label is Black");
			}
			
			
			 //Validate EDTC Help Text
			 click(EDTC_OR.MANAGEEMPTIMEHELPLINK, "Manage Employee Time Help Link");
			 assertText(EDTC_OR.MODALDIALOGTEXT,strManageEmpHelptext);
			 click(EDTC_OR.CLOSEBTN,"MANAGE Employee Time Help Close Button");
			
			 //Validate EDTC Help Text
			 click(EDTC_OR.UPDATEFUNCTIONHELPLINK, "Update Function Help Link");
			 assertText(EDTC_OR.MODALDIALOGTEXT,updateHelpText);
			 click(EDTC_OR.CLOSEBTN,"Update Function Help Close Button");
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
  	 * Method 	Name		:	validateEmpTimeSheetLinkVisibility()
  	 * Author				:	
  	 * Description			:	This method validates the validates State Code
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/		 
	public void validateEmpTimeSheetLinkVisibility(String empReporting) throws Throwable {
		try {
			blnEventReport = true;
			if(empReporting.equalsIgnoreCase("Y")){
				isElementDisplayed(EDTC_OR.EMPTIMESHEETSLINK,"Employee Time Sheets Link");
			}else if(empReporting.equalsIgnoreCase("N")){
				if(isElementPresent(EDTC_OR.EMPTIMESHEETSLINK,"Employee Time Sheets Link")){
					failureReport("Validate whether the Employee Time Sheets Link should not be shown for Manager when there are no employees reporting to the Manager.", "Employee Time Sheets Link is visible");
				}else{
					SuccessReport("Validate whether the Employee Time Sheets Link should not be shown for Manager when there are no employees reporting to the Manager.", "Employee Time Sheets Link is not visible");
				}
				
			}
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
	/********************************************************************************************************
  	 * Method 	Name		:	validateEmpTimeSheetLinkVisibility()
  	 * Author				:	
  	 * Description			:	This method validates the validates State Code
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/		 
	public void validateTotalHours(String SheetName,int iLoop) throws Throwable {
		try {
			blnEventReport = true;
			 String strAddlTotalHrs=Excelobject.getCellData(SheetName, "Additional Total Hours", iLoop);
			 String strOffsiteTotalHrs=Excelobject.getCellData(SheetName, "Offsite Total Hours", iLoop);
			 String strPTOTotalHrs=Excelobject.getCellData(SheetName, "PTO Total Hours", iLoop);
			 String strOPTTotalHrs=Excelobject.getCellData(SheetName, "OPT Total Hours", iLoop);
			 String strJuryDutyTotalHrs=Excelobject.getCellData(SheetName, "Jury duty Total Hours", iLoop);
			 String strBrvmtTotalHrs=Excelobject.getCellData(SheetName, "Bereavement Total Hours", iLoop);
			 String strUnpaidTotalHrs=Excelobject.getCellData(SheetName, "Unpaid Total Hours", iLoop);
			 String strSickTotalHrs=Excelobject.getCellData(SheetName, "Sick Total Hours", iLoop);
			 String strWeek=Excelobject.getCellData(SheetName, "Week", iLoop);
			 
			 Double regTotalHrs=Double.valueOf(getText(By.xpath(EDTC_OR.ELEMENTTEXT1+strWeek+"')]/../following-sibling::td[1]/div"),"Reg Total Hours"));
			 int val=Double.compare(regTotalHrs, regHrs.get(0));
			 if(val==0){
				 SuccessReport("Validate the Reg total hours", regTotalHrs+" is Reg total hours");
			 }else{
				 failureReport("Validate the Reg total hours", regTotalHrs+" is Reg total hours");
			 }
			 
			 validateText(By.xpath(EDTC_OR.ELEMENTTEXT1+strWeek+"')]/../following-sibling::td[2]/div"), strAddlTotalHrs, "Addl Total Hours");
			 validateText(By.xpath(EDTC_OR.ELEMENTTEXT1+strWeek+"')]/../following-sibling::td[3]/div"), strOffsiteTotalHrs, "Offsite Total Hours");
			 validateText(By.xpath(EDTC_OR.ELEMENTTEXT1+strWeek+"')]/../following-sibling::td[4]/div"), strPTOTotalHrs, "PTO Total Hours");
			 validateText(By.xpath(EDTC_OR.ELEMENTTEXT1+strWeek+"')]/../following-sibling::td[5]/div"), strOPTTotalHrs, "OPT Total Hours");
			 validateText(By.xpath(EDTC_OR.ELEMENTTEXT1+strWeek+"')]/../following-sibling::td[6]/div"), strJuryDutyTotalHrs, "Jury Total Hours");
			 validateText(By.xpath(EDTC_OR.ELEMENTTEXT1+strWeek+"')]/../following-sibling::td[7]/div"), strBrvmtTotalHrs, "Brvmt Total Hours");
			 validateText(By.xpath(EDTC_OR.ELEMENTTEXT1+strWeek+"')]/../following-sibling::td[8]/div"), strUnpaidTotalHrs, "Sick Total Hours");
			 validateText(By.xpath(EDTC_OR.ELEMENTTEXT1+strWeek+"')]/../following-sibling::td[9]/div"), strSickTotalHrs, "Unpaid Total Hours");
			 
			 
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}	
		
	/********************************************************************************************************
  	 * Method 	Name		:	validateText()
  	 * Author				:	
  	 * Description			:	This method validates the validates State Code
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
    ********************************************************************************************************/
	 public void validateText(By Loc,String value,String locName) throws Throwable{
		 try{
			 blnEventReport = true;
			 String strText=getText(Loc, "");
			 if(strText.equalsIgnoreCase(value)){
				SuccessReport("Validate the "+locName, strText+" is the "+locName); 
			 }else{
				 failureReport("Validate the "+locName, strText+" is the "+locName);  
			 }
			 blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}

	/********************************************************************************************************
	 * Method 	Name		:	validateText()
	 * Author				:	
	 * Description			:	This method validates the validates State Code
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	:
	 ********************************************************************************************************/
   	 public void managerViewsEmpTimeSheet(String strMon,String strMonHours,String strTue,String strTueHours,String strWed,
			 String strWedHours,String strThu,String strThuHours,String strFri,String strFriHours,String strSat,String strSatHours,
			 String strSun,String strSunHours,String strWeek) throws Throwable {
   		try {
   			blnEventReport = true;
   			//Change the Date format to M/d/yyy
			 SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yyyy");
			 Date d_date = dateFormat.parse(strWeek);
			 String week=dateFormat.format(d_date);
   			 selectByVisibleText(EDTC_OR.CHANGETOWEEKENDINGDROPDOWN, week, "Change to Week Ending on Drop Down");
		  	pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
			
   			if(isElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+empName+" ("+empID+")')]/../../following-sibling::tr/td/span[contains(text(),'Employee Entered')]"), "")){
	 			SuccessReport("Validate whether the Timesheet entered by the Employee "+empID+" is displayed", "Timesheet entered by the Employee is displayed");
	 			click(By.xpath(EDTC_OR.ELEMENTTEXT1+empName+" ("+empID+")')]/../../following-sibling::tr/td/span[contains(text(),'Employee Entered')]/../following-sibling::td//span[contains(@class,'eye-open')]"), "Eye Open Icon");
	 			waitForElementPresent(EDTC_OR.TIMESHEETUPDATEDTIME1,"");
	 			String strTimeText=getText(EDTC_OR.TIMESHEETUPDATEDTIME1,"").trim();
				String strTime=strTimeText.replaceAll("\\pL+", "").trim().split("  ")[1];
				String strAM_PM=empRequestTime.split(" ")[1];
				DateFormat sdf = new SimpleDateFormat("hh:mm");
				Date appTime = sdf.parse(strTime);
				Date codeTime = sdf.parse(empRequestTime);
				long diff = appTime.getTime() - codeTime.getTime();
				long diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(diff);
				String strTodaysDate=getCurrentDate("MM/dd/YYYY");
				if(diffInSeconds<=100 && strTimeText.contains(strAM_PM) && strTimeText.contains("GMT") && strTimeText.contains(strTodaysDate)){
					SuccessReport("Validate whether the Time stamp is displayed correctly after the Employee saves the timesheet "+empRequestTime, strTimeText+" Time stamp is displayed correctly after the Employee saves the timesheet ");
				}else{
					failureReport("Validate whether the Time stamp is displayed correctly after the Employee saves the timesheet "+empRequestTime, "Time stamp is not displayed correctly after the Employee saves the timesheet ");
				} 
	 			
	 			
	 			//Validate Time Sheet Entered for Monday
	 			validateHoursEntered(strMon,strMonHours,2,"Monday",regHrs.get(0));
	 			//Validate Time Sheet Entered for Tuesday
	 			validateHoursEntered(strTue,strTueHours,3,"Tuesday",regHrs.get(1));
	 			//Validate Time Sheet Entered for Wednesday
	 			validateHoursEntered(strWed,strWedHours,4,"Wednesday",regHrs.get(2));
	 			//Validate Time Sheet Entered for Thursday
	 			validateHoursEntered(strThu,strThuHours,5,"Thursday",regHrs.get(3));
	 			//Validate Time Sheet Entered for Friday
	 			validateHoursEntered(strFri,strFriHours,6,"Friday",regHrs.get(4));
	 			//Validate Time Sheet Entered for Saturday
	 			validateHoursEntered(strSat,strSatHours,7,"Saturday",regHrs.get(5));
	 			//Validate Time Sheet Entered for Sunday
	 			validateHoursEntered(strSun,strSunHours,8,"Sunday",regHrs.get(6));
	 			
				//This method validates the Total Hours
				validateTotalHours(EDTC_OR.MODALDIALOGTABLE);
				
				click(EDTC_OR.MODALDIALOGCLOSEBTN, "Close Button");
			
			}else{
				failureReport("Validate whether the Timesheet entered by the Employee "+empID+" is displayed", "Timesheet entered by the Employee is not displayed");
			}
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}	
   	/********************************************************************************************************
   	  * Method 	Name		:	administerHours()
   	  * Author				:	
   	  * Description			:	This method validates the validates State Code
   	  * Date of creation 	:	
   	  * modifying person 	: 	
   	  * Date of modification	:
   	  ********************************************************************************************************/	
   		public void administerHours(String strEmptype) throws Throwable {
   			try {
   				blnEventReport = true;

   				click(EDTC_OR.EMPLOYEEMANAGEMENTBTN,"Employee Management Button");
   				waitForVisibilityOfElement(EDTC_OR.EMPIDTEXTFIELD, "Employee ID Text Field");
   				type(EDTC_OR.EMPIDTEXTFIELD,empID,"Employee ID Text Field");
   				click(EDTC_OR.ADMINISTERHRSLINK,"Administer hours Link");
   				Thread.sleep(lSleep_Low);
   				
   				//This method validates the Page title
   				if(strEmptype.equalsIgnoreCase("Exempt")){
   					validatePageHeader(EDTC_OR.PAGEHEADER, "MANAGE FTE EMPLOYEE TIME TIMEKEEPER:"+loginEmpName);
   				}else if(strEmptype.equalsIgnoreCase("Non-Exempt")){
   					validatePageHeader(EDTC_OR.PAGEHEADER, "MANAGE FTN EMPLOYEE TIME TIMEKEEPER:"+loginEmpName);
   				}else if(strEmptype.equalsIgnoreCase("Temporary")){
   					validatePageHeader(EDTC_OR.PAGEHEADER, "MANAGE HRN EMPLOYEE TIME TIMEKEEPER:"+loginEmpName);
   				}
   				
   				blnEventReport = false;
   			} catch (Exception e) {
   				throw e;
   			}
   		}
   		
	/********************************************************************************************************
  	  * Method 	Name		:	approveTimeSheet()
  	  * Author				:	
  	  * Description			:	This method validates the validates State Code
  	  * Date of creation 	:	
  	  * modifying person 	: 	
  	  * Date of modification	:
  	  ********************************************************************************************************/	
   	  public void approveTimeSheet(String strWeek) throws Throwable {
  		try {
  			blnEventReport = true;
  			SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yyyy");
  			Date d_date = dateFormat.parse(strWeek);
  			String week=dateFormat.format(d_date);
  			selectByVisibleText(EDTC_OR.CHANGETOWEEKENDINGDROPDOWN, week, "Change to Week Ending on Drop Down");
  			pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
  			
  			click(By.xpath(EDTC_OR.ELEMENTTEXT1+empName+" ("+empID+"')]/../../following-sibling::tr/td/span[contains(text(),'Employee Entered')]/../following-sibling::td//input[@type='checkbox']"), "Authorize Checkbox");
  			click(EDTC_OR.UPDATEAUTHORIZATIONSBTN,"Update Authorization Button");
  			Date todaysDate = new Date();
  			SimpleDateFormat formatter = new SimpleDateFormat("hh:mm a");
  			formatter.setTimeZone(TimeZone.getTimeZone("GMT"));
  			mgrApproveTime = formatter.format(todaysDate);
  			System.out.println(mgrApproveTime);
  			Thread.sleep(lSleep_Low);
  			waitForElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+empName+" ("+empID+")')]/../../following-sibling::tr/td/span[contains(text(),'Auth')]"), "");
  			isChecked(By.xpath(EDTC_OR.ELEMENTTEXT1+empName+" ("+empID+"')]/../../following-sibling::tr/td/span[contains(text(),'Auth')]/../following-sibling::td//input[@type='checkbox']"), "Authorize Checkbox");
  			blnEventReport = false;
  		} catch (Exception e) {
  			throw e;
  		}
   	  }	 		
	/********************************************************************************************************
	 * Method 	Name		:	validateApprovedTimeSheet_ManageEmpPage()
	 * Author				:	
	 * Description			:	This method validates the validates State Code
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification	:
	 ********************************************************************************************************/	
  	 public void validateApprovedTimeSheet_ManageEmpPage(String approverName) throws Throwable{
  		 try{
  			blnEventReport = true;
  			
  			String cssValue=driver.findElement(By.xpath(EDTC_OR.ELEMENTTEXT1+empName+" ("+empID+")')]/../../following-sibling::tr/td/span[contains(text(),'Auth')]")).getCssValue("background-color");
  			Color color = Color.fromString(cssValue);
  			String bgdcolor=color.asHex().toString();
  			if(!bgdcolor.equalsIgnoreCase("#5cb85c")){
  				failureReport("Validate whether the Background color of Auth'd: "+approverName+" label is Green Color after Manager authorizes the Timesheet", "Background color is not Green Color");
  			}else{
  				SuccessReport("Validate whether the Background color of Auth'd: "+approverName+" label is Green Color after Manager authorizes the Timesheet", "Background color is Green Color");
  			}
			click(By.xpath(EDTC_OR.ELEMENTTEXT1+empName+" ("+empID+")')]/../../following-sibling::tr/td/span[contains(text(),'Auth')]/../following-sibling::td//span[contains(@class,'eye-open')]"), "Eye Open Icon");
  			waitForElementPresent(EDTC_OR.TIMESHEETUPDATEDTIME1,"");
  			assertText(EDTC_OR.TSAUTHORIZED,"AUTHORIZED BY "+approverName);
  			click(EDTC_OR.MODALDIALOGCLOSEBTN, "Close Button"); 
  			blnEventReport = false;
  		 } catch (Exception e) {
  			 throw e;
  		 }
  	 }
  	 
  	/********************************************************************************************************
 	 * Method 	Name		:	validateApprovedTimeSheet_SummaryPage()
 	 * Author				:	
 	 * Description			:	This method validates the validates State Code
 	 * Date of creation 	:	
 	 * modifying person 	: 	
 	 * Date of modification	:
 	 ********************************************************************************************************/	
   	 public void validateApprovedTimeSheet_SummaryPage(String strWeek,String approverName) throws Throwable{
   		 try{
   			blnEventReport = true;
			waitForElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+strWeek+"')]/../preceding-sibling::td/span[contains(text(),'Auth')]"), "");
			String cssValue=driver.findElement(By.xpath(EDTC_OR.ELEMENTTEXT1+strWeek+"')]/../preceding-sibling::td/span[contains(text(),'Auth')]")).getCssValue("background-color");
			Color color = Color.fromString(cssValue);
			String bgdcolor=color.asHex().toString();
			if(!bgdcolor.equalsIgnoreCase("#5cb85c")){
				failureReport("Validate whether the Background color of Auth'd: "+approverName+" label is Green Color after Manager authorizes the Timesheet", "Background color is not Green Color");
			}else{
				SuccessReport("Validate whether the Background color of Auth'd: "+approverName+" label is Green Color after Manager authorizes the Timesheet", "Background color is Green Color");
			}
			
			click(By.xpath(EDTC_OR.ELEMENTTEXT1+strWeek+"')]/../preceding-sibling::td/span[contains(text(),'Auth')]/../following-sibling::td/div[@title='View timesheet']"), "Spyglass Icon");
			waitForElementPresent(EDTC_OR.TIMESHEETUPDATEDTIME1,"");
			assertText(EDTC_OR.TSAUTHORIZED,"AUTHORIZED BY "+approverName);
			click(EDTC_OR.MODALDIALOGCLOSEBTN, "Close Button");
			
   			blnEventReport = false;
   		 } catch (Exception e) {
   			 throw e;
   		 }
   	 }
   	 
   	/********************************************************************************************************
  	 * Method 	Name		:	empValidatesApprovedTimeSheet()
  	 * Author				:	
  	 * Description			:	This method validates the validates State Code
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
  	 ********************************************************************************************************/	
   	 public void empValidatesApprovedTimeSheet(String strWeek,String approverName) throws Throwable{
   		 try{
   			 blnEventReport = true;
   			 SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yyyy");
   			 Date d_date = dateFormat.parse(strWeek);
   			 String week=dateFormat.format(d_date);
   			 
   			 selectByVisibleText(EDTC_OR.CHANGETOWEEKENDINGDROPDOWN, week, "Change to Week Ending on Drop Down");
			 pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
			 String strTimeText=getText(EDTC_OR.TIMESHEETAPPROVALLABEL,"").trim();
			 String strTime=strTimeText.replaceAll("\\pL+", "").replaceAll("'", "").replaceAll(",", "").trim().split("  ")[1];
			 String strAM_PM=mgrApproveTime.split(" ")[1];
			 DateFormat sdf = new SimpleDateFormat("hh:mm");
			 Date appTime = sdf.parse(strTime);
			 Date codeTime = sdf.parse(mgrApproveTime);
			 long diff = appTime.getTime() - codeTime.getTime();
			 long diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(diff);
			 String strTodaysDate=getCurrentDate("MM/dd/YYYY");
			 if(diffInSeconds<=100 && strTimeText.contains(strAM_PM) && strTimeText.contains("GMT") && strTimeText.contains(strTodaysDate) && strTimeText.contains(approverName) && strTimeText.contains("Hours OK'd by")){
				 SuccessReport("Validate whether the Time stamp is displayed correctly after the Employee saves the timesheet "+mgrApproveTime, strTimeText+" Time stamp is displayed correctly after the Employee saves the timesheet ");
			 }else{
				 failureReport("Validate whether the Time stamp is displayed correctly after the Employee saves the timesheet "+mgrApproveTime, "Time stamp is not displayed correctly after the Employee saves the timesheet ");
			 } 
   			 
   			 blnEventReport = false;
   		 } catch (Exception e) {
   			 throw e;
   		 }
   	 }	 
  
   	/********************************************************************************************************
   	 * Method 	Name		:	empValidatesApprovedTimeSheet()
   	 * Author				:	
   	 * Description			:	This method validates the validates State Code
   	 * Date of creation 	:	
   	 * modifying person 	: 	
   	 * Date of modification	:
   	 ********************************************************************************************************/	
   	 public void overrideTimeSheet(String strMon,String strMonHours,String strTue,String strTueHours,String strWed,
			 String strWedHours,String strThu,String strThuHours,String strFri,String strFriHours,String strSat,String strSatHours,
			 String strSun,String strSunHours,String strWeek,String passwordRequired,String strPwd,String overriderName) throws Throwable{
   		 try{
   			 blnEventReport = true;
   			
   			 //Change the Date format to M/d/yyy
			 SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yyyy");
			 Date d_date = dateFormat.parse(strWeek);
			 String week=dateFormat.format(d_date);
			 selectByVisibleText(EDTC_OR.CHANGETOWEEKENDINGDROPDOWN, week, "Change to Week Ending on Drop Down");
			 pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
			 click(By.xpath(EDTC_OR.ELEMENTTEXT1+empName+" ("+empID+"')]/../../following-sibling::tr/td/span[contains(text(),'Employee Entered')]/../following-sibling::td//span[contains(@class,'pencil')]"), "Edit - Pencil Icon");
			 pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
			 //This method validates the Page Title
 			 validatePageHeader(EDTC_OR.PAGEHEADER, " O/R FOR "+empName+"  ("+empID+")");
 			 
			 //Take the PTO and OPT Value before entering the Values
			 double pto=Integer.parseInt(getText(EDTC_OR.PTOVALUE, "PTO Value"));
			 double opt=Integer.parseInt(getText(EDTC_OR.OPTVALUE, "OPT Value"));
			 
			 int count=driver.findElements(By.xpath(EDTC_OR.ELEMENTTEXT1+"Scheduled') or contains(text(),'Regular')]/following-sibling::td/div")).size();
			 for(int i=1;i<count;i++){
				 String strHrs=getText(By.xpath(EDTC_OR.ELEMENTTEXT1+"Scheduled') or contains(text(),'Regular')]/following-sibling::td["+i+"]/div"),"");
				 String strHolidayHrs=getText(By.xpath(EDTC_OR.ELEMENTTEXT1+"Holiday')]/following-sibling::td["+i+"]/div"),"");
				 regHrs.add(Double.valueOf(strHrs)); 
				 totalRegHrs+=Double.valueOf(strHrs);
				 holidayCount+=Double.valueOf(strHolidayHrs);
			 }
			 
			 
			 //Enter Hours for Monday
			 enterHours(strMon,strMonHours,2);
			 //Enter Hours for Tuesday
			 enterHours(strTue,strTueHours,3);
			 //Enter Hours for Wednesday
			 enterHours(strWed,strWedHours,4);
			 //Enter Hours for Thursday
			 enterHours(strThu,strThuHours,5);
			 //Enter Hours for Friday
			 enterHours(strFri,strFriHours,6);
			 //Enter Hours for Saturday
			 enterHours(strSat,strSatHours,7);
			 //Enter Hours for Sunday
			 enterHours(strSun,strSunHours,8);
			 Thread.sleep(lSleep_Low);
			 
			 //Add the Total Entered PTO and OPT with already Available
			 pto=pto-ptoCount;
			 opt=opt-optCount;
			 
			 
			 //Save
			 click(EDTC_OR.SAVEBTN, "Save Button");
			 pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
			 
			 if(passwordRequired.equalsIgnoreCase("Y")){
				 waitForElementPresent(EDTC_OR.SEARCHMATCHESLABEL, "Confirm password Modal Dialog");
				 isDisabled(EDTC_OR.MODALDIALOGSUBMITBTN, "Submit Button");
				 type(EDTC_OR.CONFIRMPASSWORDTEXTFIELD,strPwd,"Confirm Password Text Field");
				 isEnabled(EDTC_OR.MODALDIALOGSUBMITBTN, "Submit Button");
				 click(EDTC_OR.MODALDIALOGSUBMITBTN, "Submit Button");
				 Thread.sleep(lSleep_Low);
			 }
			 
			 Date todaysDate = new Date();
			 SimpleDateFormat formatter = new SimpleDateFormat("hh:mm a");
			 formatter.setTimeZone(TimeZone.getTimeZone("GMT"));
			 mgrApproveTime = formatter.format(todaysDate);
			 System.out.println(mgrApproveTime);
			 Thread.sleep(lSleep_Low);
			 
			 //Calculate the PTO
			 if(!isElementPresent(EDTC_OR.TIMESHEETENTRYERRORMSG, "Error Message")){
				
				 
				 double ptoValue=Integer.parseInt(getText(EDTC_OR.PTOVALUE, "PTO Value"));
				 double optValue=Integer.parseInt(getText(EDTC_OR.OPTVALUE, "OPT Value"));
				 int val=Double.compare(pto, ptoValue);
				 int val1=Double.compare(opt, optValue);
				 
				 if(val==0 && val1==0){
					 SuccessReport("Valdiate the PTO Value from the Table after entering the TimeSheet","\""+pto+"\" is the PTO Value after entering the TimeSheet");
					 SuccessReport("Valdiate the OPT Value from the Table after entering the TimeSheet","\""+opt+"\" is the OPT Value after entering the TimeSheet");
				 }else{
					 failureReport("Valdiate the PTO and OPT Value from the Table after entering the TimeSheet", "PTO "+pto+" and OPT "+opt+"value are incorrect");
				 }
				 
				 
				 //Validate Time Sheet Entered for Monday
				 validateHoursEntered(strMon,strMonHours,2,"Monday",regHrs.get(0));
				 //Validate Time Sheet Entered for Tuesday
				 validateHoursEntered(strTue,strTueHours,3,"Tuesday",regHrs.get(1));
				 //Validate Time Sheet Entered for Wednesday
				 validateHoursEntered(strWed,strWedHours,4,"Wednesday",regHrs.get(2));
				 //Validate Time Sheet Entered for Thursday
				 validateHoursEntered(strThu,strThuHours,5,"Thursday",regHrs.get(3));
				 //Validate Time Sheet Entered for Friday
				 validateHoursEntered(strFri,strFriHours,6,"Friday",regHrs.get(4));
				 //Validate Time Sheet Entered for Saturday
				 validateHoursEntered(strSat,strSatHours,7,"Saturday",regHrs.get(5));
				 //Validate Time Sheet Entered for Sunday
				 validateHoursEntered(strSun,strSunHours,8,"Sunday",regHrs.get(6));
				 
				 validateTotalHours(EDTC_OR.TIMESHEETSENTRYTABLE);
				 
				 String strTimeText=getText(EDTC_OR.TIMESHEETAPPROVALLABEL,"").trim();
				 String strTime=strTimeText.replaceAll("[a-zA-Z]", "").trim().split("  ")[2];
				 String strAM_PM=mgrApproveTime.split(" ")[1];
				 DateFormat sdf = new SimpleDateFormat("hh:mm");
				 Date appTime = sdf.parse(strTime);
				 Date codeTime = sdf.parse(mgrApproveTime);
				 long diff = appTime.getTime() - codeTime.getTime();
				 long diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(diff);
				 String strTodaysDate=getCurrentDate("MM/dd/YYYY");
				 if(diffInSeconds<=100 && strTimeText.contains(strAM_PM) && strTimeText.contains("GMT") && strTimeText.contains(strTodaysDate) && strTimeText.contains("Mgr override by") && strTimeText.contains(overriderName)){
					   SuccessReport("Validate whether the Time stamp is displayed correctly after the Mgr Overrides the timesheet "+mgrApproveTime, strTimeText+" Time stamp is displayed correctly after the Mgr Overrides the timesheet ");
				 }else{
					   failureReport("Validate whether the Time stamp is displayed correctly after the Mgr Overrides the timesheet "+mgrApproveTime, "Time stamp is not displayed correctly after the Mgr Overrides the timesheet ");
				 } 
				 
			 }
			 	//This method clicks on the Back Button
				backButton();	
				pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);	 
				
				blnEventReport = false;
    		 } catch (Exception e) {
    			 throw e;
    		 }
    	 }
   	/********************************************************************************************************
  	 * Method 	Name		:	validateOverridenTimeSheetPage()
  	 * Author				:	
  	 * Description			:	This method validates the validates State Code
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification	:
  	 ********************************************************************************************************/	
     public void validateOverridenTimeSheetPage(String strMon,String strMonHours,String strTue,String strTueHours,String strWed,
			 String strWedHours,String strThu,String strThuHours,String strFri,String strFriHours,String strSat,String strSatHours,
			 String strSun,String strSunHours,String strWeek,String overriderName) throws Throwable{
	 	try{
	 			blnEventReport = true;
	 			
	 			//Change the Date format to M/d/yyy
	 			SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yyyy");
	 			Date d_date = dateFormat.parse(strWeek);
	 			String week=dateFormat.format(d_date);
	 			selectByVisibleText(EDTC_OR.CHANGETOWEEKENDINGDROPDOWN, week, "Change to Week Ending on Drop Down");
	 			pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
	 			waitForElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+empName+" ("+empID+")')]/../../../following-sibling::tbody//span[contains(text(),'Mgr O/R')]"), "");
				String cssValue=driver.findElement(By.xpath(EDTC_OR.ELEMENTTEXT1+empName+" ("+empID+")')]/../../../following-sibling::tbody//span[contains(text(),'Mgr O/R')]")).getCssValue("background-color");
				Color color = Color.fromString(cssValue);
				String bgdcolor=color.asHex().toString();
				if(!bgdcolor.equalsIgnoreCase("#df9123")){
					failureReport("Validate whether the Background color of Mgr O/R: "+overriderName+" label is Orange Color after Manager Overrides the Timesheet", "Background color is not Orange Color");
				}else{
					SuccessReport("Validate whether the Background color of Mgr O/R: "+overriderName+" label is Orange Color after Manager Overrides the Timesheet", "Background color is Orange Color");
				}
	 			
	 			
	 			click(By.xpath(EDTC_OR.ELEMENTTEXT1+empName+" ("+empID+")')]/../../../following-sibling::tbody//span[contains(text(),'Mgr O/R')]/../following-sibling::td//span[contains(@class,'eye-open')]"), "Eye-Open Icon");
	 			waitForElementPresent(EDTC_OR.TIMESHEETUPDATEDTIME1,"");
	 			 
	 			String strTimeText=getText(EDTC_OR.TIMESHEETUPDATEDTIME1,"").trim();
	 			String strTime=strTimeText.replaceAll("\\pL+", "").trim().split("  ")[1];
	 			String strAM_PM=mgrApproveTime.split(" ")[1];
	 			DateFormat sdf = new SimpleDateFormat("hh:mm");
	 			Date appTime = sdf.parse(strTime);
	 			Date codeTime = sdf.parse(mgrApproveTime);
	 			long diff = appTime.getTime() - codeTime.getTime();
	 			long diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(diff);
	 			String strTodaysDate=getCurrentDate("MM/dd/YYYY");
	 			if(diffInSeconds<=100 && strTimeText.contains(strAM_PM) && strTimeText.contains("GMT") && strTimeText.contains(strTodaysDate) && strTimeText.contains(overriderName)){
	 				SuccessReport("Validate whether the Time stamp is displayed correctly after the Manager saves the timesheet "+mgrApproveTime, strTimeText+" Time stamp is displayed correctly after the Manager saves the timesheet ");
	 			}else{
	 				failureReport("Validate whether the Time stamp is displayed correctly after the Manager saves the timesheet "+mgrApproveTime, "Time stamp is not displayed correctly after the Manager saves the timesheet ");
	 			} 
	 			
	 			
	 			 //Validate Time Sheet Entered for Monday
				 validateHoursEntered(strMon,strMonHours,2,"Monday",regHrs.get(0));
				 //Validate Time Sheet Entered for Tuesday
				 validateHoursEntered(strTue,strTueHours,3,"Tuesday",regHrs.get(1));
				 //Validate Time Sheet Entered for Wednesday
				 validateHoursEntered(strWed,strWedHours,4,"Wednesday",regHrs.get(2));
				 //Validate Time Sheet Entered for Thursday
				 validateHoursEntered(strThu,strThuHours,5,"Thursday",regHrs.get(3));
				 //Validate Time Sheet Entered for Friday
				 validateHoursEntered(strFri,strFriHours,6,"Friday",regHrs.get(4));
				 //Validate Time Sheet Entered for Saturday
				 validateHoursEntered(strSat,strSatHours,7,"Saturday",regHrs.get(5));
				 //Validate Time Sheet Entered for Sunday
				 validateHoursEntered(strSun,strSunHours,8,"Sunday",regHrs.get(6));
				
				 //This method validates the Total Hours
	 			 validateTotalHours(EDTC_OR.MODALDIALOGTABLE);
	 			 
	 			 click(EDTC_OR.MODALDIALOGCLOSEBTN, "Close Button");
	 	
			blnEventReport = false;
		} catch (Exception e) {
			throw e;
		}
	}
     /********************************************************************************************************
   	 * Method 	Name		:	validateOverridenTimeSheet_SummaryPage()
   	 * Author				:	
   	 * Description			:	This method validates the validates State Code
   	 * Date of creation 	:	
   	 * modifying person 	: 	
   	 * Date of modification	:
   	 ********************************************************************************************************/	
      public void validateOverridenTimeSheet_SummaryPage(String strMon,String strMonHours,String strTue,String strTueHours,String strWed,
 			 String strWedHours,String strThu,String strThuHours,String strFri,String strFriHours,String strSat,String strSatHours,
 			 String strSun,String strSunHours,String strWeek,String overriderName) throws Throwable{
 	 	try{
 	 		blnEventReport = true;
 	 			
 	 		String cssValue=driver.findElement(By.xpath(EDTC_OR.ELEMENTTEXT1+strWeek+"')]/../preceding-sibling::td/span[contains(text(),'Mgr O/R')]")).getCssValue("background-color");
 	 		Color color = Color.fromString(cssValue);
 	 		String bgdcolor=color.asHex().toString();
 	 		if(!bgdcolor.equalsIgnoreCase("#df9123")){
 	 			failureReport("Validate whether the Background color of Mgr O/R: "+overriderName+" label is Orange Color after Manager Overrides the Timesheet", "Background color is not Orange Color");
 	 		}else{
 	 			SuccessReport("Validate whether the Background color of Mgr O/R: "+overriderName+" label is Orange Color after Manager Overrides the Timesheet", "Background color is Orange Color");
 	 		}
 	 			
 	  		click(By.xpath(EDTC_OR.ELEMENTTEXT1+strWeek+"')]/../preceding-sibling::td/span[contains(text(),'Mgr O/R')]/../following-sibling::td/div[@title='View timesheet']//span"), "Eye-Open Icon");
 	 		waitForElementPresent(EDTC_OR.SEARCHMATCHESLABEL, "Modal Diaolg");
 	 		
 	 		String strTimeText=getText(EDTC_OR.TIMESHEETUPDATEDTIME1,"").trim();
 	 		String strTime=strTimeText.replaceAll("\\pL+", "").trim().split("  ")[1];
 	 		String strAM_PM=mgrApproveTime.split(" ")[1];
 	 		DateFormat sdf = new SimpleDateFormat("hh:mm");
 	 		Date appTime = sdf.parse(strTime);
 	 		Date codeTime = sdf.parse(mgrApproveTime);
 	 		long diff = appTime.getTime() - codeTime.getTime();
 	 		long diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(diff);
 	 		String strTodaysDate=getCurrentDate("MM/dd/YYYY");
 	 		if(diffInSeconds<=100 && strTimeText.contains(strAM_PM) && strTimeText.contains("GMT") && strTimeText.contains(strTodaysDate) && strTimeText.contains(overriderName)){
 	 			SuccessReport("Validate whether the Time stamp is displayed correctly after the Mrg Overrides the timesheet "+empRequestTime, strTimeText+" Time stamp is displayed correctly after the Mrg Overrides the timesheet ");
 	 		}else{
 	 			failureReport("Validate whether the Time stamp is displayed correctly after the Mrg Overrides the timesheet "+empRequestTime, "Time stamp is not displayed correctly after the Mrg Overrides the timesheet ");
 	 		} 
 	 			
 	 			
 	 		//Validate Time Sheet Entered for Monday
 	 		validateHoursEntered(strMon,strMonHours,2,"Monday",regHrs.get(0));
 	 		//Validate Time Sheet Entered for Tuesday
 	 		validateHoursEntered(strTue,strTueHours,3,"Tuesday",regHrs.get(1));
 	 		//Validate Time Sheet Entered for Wednesday
 	 		validateHoursEntered(strWed,strWedHours,4,"Wednesday",regHrs.get(2));
 	 		//Validate Time Sheet Entered for Thursday
 	 		validateHoursEntered(strThu,strThuHours,5,"Thursday",regHrs.get(3));
 	 		//Validate Time Sheet Entered for Friday
 	 		validateHoursEntered(strFri,strFriHours,6,"Friday",regHrs.get(4));
 	 		//Validate Time Sheet Entered for Saturday
 	 		validateHoursEntered(strSat,strSatHours,7,"Saturday",regHrs.get(5));
 	 		//Validate Time Sheet Entered for Sunday
 	 		validateHoursEntered(strSun,strSunHours,8,"Sunday",regHrs.get(6));
 	 		
 	 		//This method validates the Total Hours
 	 		validateTotalHours(EDTC_OR.MODALDIALOGTABLE);
 	 		
 	 		click(EDTC_OR.MODALDIALOGCLOSEBTN, "Close Button");
 	 		
 	 		blnEventReport = false;
 		} catch (Exception e) {
 			throw e;
 		}
 	}    
     /********************************************************************************************************
      * Method 	Name		:	empValidatesApprovedTimeSheet()
      * Author				:	
      * Description			:	This method validates the validates State Code
      * Date of creation 	:	
      * modifying person 	: 	
      * Date of modification	:
      ********************************************************************************************************/	
      public void empValidatesOverriddenTimeSheet(String strMon,String strMonHours,String strTue,String strTueHours,String strWed,
    		 String strWedHours,String strThu,String strThuHours,String strFri,String strFriHours,String strSat,String strSatHours,
  			 String strSun,String strSunHours,String strWeek,String overriderName) throws Throwable{
    	  try{
    		  blnEventReport = true;
    		  
    		  //Change the Date format to M/d/yyy
    		  SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yyyy");
    		  Date d_date = dateFormat.parse(strWeek);
 			  String week=dateFormat.format(d_date);
    		  selectByVisibleText(EDTC_OR.CHANGETOWEEKENDINGDROPDOWN, week, "Change to Week Ending on Drop Down");
    		  pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
    		  String strTimeText=getText(EDTC_OR.TIMESHEETAPPROVALLABEL,"").trim();
    		  String strTime=strTimeText.replaceAll("\\pL+", "").replaceAll("'", "").replaceAll(",", "").trim().split("  ")[1];
    		  String strAM_PM=mgrApproveTime.split(" ")[1];
    		  DateFormat sdf = new SimpleDateFormat("hh:mm");
    		  Date appTime = sdf.parse(strTime);
    		  Date codeTime = sdf.parse(mgrApproveTime);
    		  long diff = appTime.getTime() - codeTime.getTime();
    		  long diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(diff);
    		  String strTodaysDate=getCurrentDate("MM/dd/YYYY");
    		  if(diffInSeconds<=100 && strTimeText.contains(strAM_PM) && strTimeText.contains("GMT") && strTimeText.contains(strTodaysDate) && strTimeText.contains(overriderName) && strTimeText.contains("Mgr override by ")){
    			  SuccessReport("Validate whether the Time stamp is displayed correctly after the Mgr Overrides the timesheet "+mgrApproveTime, strTimeText+" Time stamp is displayed correctly after the Mgr Overrides the timesheet ");
    		  }else{
    			  failureReport("Validate whether the Time stamp is displayed correctly after the Mgr Overrides the timesheet "+mgrApproveTime, "Time stamp is not displayed correctly after the Mgr Overrides the timesheet ");
    		  } 
    		  
    		  //Validate Time Sheet Entered for Monday
    		  validateHoursEntered(strMon,strMonHours,2,"Monday",regHrs.get(0));
    		  //Validate Time Sheet Entered for Tuesday
    		  validateHoursEntered(strTue,strTueHours,3,"Tuesday",regHrs.get(1));
    		  //Validate Time Sheet Entered for Wednesday
    		  validateHoursEntered(strWed,strWedHours,4,"Wednesday",regHrs.get(2));
    		  //Validate Time Sheet Entered for Thursday
    		  validateHoursEntered(strThu,strThuHours,5,"Thursday",regHrs.get(3));
    		  //Validate Time Sheet Entered for Friday
    		  validateHoursEntered(strFri,strFriHours,6,"Friday",regHrs.get(4));
    		  //Validate Time Sheet Entered for Saturday
    		  validateHoursEntered(strSat,strSatHours,7,"Saturday",regHrs.get(5));
    		  //Validate Time Sheet Entered for Sunday
    		  validateHoursEntered(strSun,strSunHours,8,"Sunday",regHrs.get(6));
    		  
    		  validateTotalHours(EDTC_OR.TIMESHEETSENTRYTABLE);
    		  
     		  blnEventReport = false;
     		 } catch (Exception e) {
     			 throw e;
     		 }
     	 }    
     /********************************************************************************************************
      * Method 	Name		:	clickPTOSchedulesLink()
      * Author				:	
      * Description			:	This method validates the validates State Code
      * Date of creation 	:	
      * modifying person 	: 	
      * Date of modification	:
      ********************************************************************************************************/	
     public void clickPTOSchedulesLink(String strEmptype) throws Throwable {
     	try {
     		blnEventReport = true;
     		click(EDTC_OR.PTOSCHEDULESLINK,"PTO Schedules Link");
     		waitForElementPresent(EDTC_OR.SEARCHMATCHESLABEL, "Select Employee Group");
     		click(EDTC_OR.MODALDIALOGCLOSELINK, "Modal Dialog Close Link");
     			 
     		//This method validates the Page title
     		validatePageHeader(EDTC_OR.PAGEHEADER, "MANAGER TOOLS");
     		
     		click(EDTC_OR.PTOSCHEDULESLINK,"PTO Schedules Link");
     		waitForElementPresent(EDTC_OR.SEARCHMATCHESLABEL, "Select Employee Group");
     		//Validate the Modal Dialog Heading
     		assertText(EDTC_OR.SEARCHMATCHESLABEL, "Select employee group");
     		//Validate the Modal Dialog Heading
     		assertText(EDTC_OR.TIMESHEETSLABEL, "PTO Schedules");
     		
     		//Click on Exempt/Non-Exempt Link
     		click(By.xpath(EDTC_OR.MODALDIALOGLINKTEXT+strEmptype+"']"),strEmptype+" Link");
     			
     		//This method validates the Page title
     		if(strEmptype.equalsIgnoreCase("Exempt")){
     			validatePageHeader(EDTC_OR.PAGEHEADER, "FTE Employees Time Off Report for: "+loginEmpName);
     		}else if(strEmptype.equalsIgnoreCase("Non-Exempt")){
     			validatePageHeader(EDTC_OR.PAGEHEADER, "FTN Employees Time Off Report for: "+loginEmpName);
     		}else if(strEmptype.equalsIgnoreCase("Temporary")){
     			validatePageHeader(EDTC_OR.PAGEHEADER, "HRN Employees Time Off Report for: "+loginEmpName);
			}
     			
     		blnEventReport = false;
     	} catch (Exception e) {
     		throw e;
     	}
     }		
     /********************************************************************************************************
      * Method 	Name		:	clickPTOSchedulesLink()
      * Author				:	
      * Description			:	This method validates the validates State Code
      * Date of creation 	:	
      * modifying person 	: 	
      * Date of modification	:
      ********************************************************************************************************/	
     public void validateEmpTimeOffReportScreen(String strWeeks,String ptoTimeOffReportHelpText,String scrollTimeOffReportHelptext) throws Throwable {
     	try {
     		blnEventReport = true;
     		
     		//This method validates the Links present at the Top oof the Home Page
			validateFieldNames(EDTC_OR.WEEKSTAB, strWeeks);
			
			//Validate PTO Time Off Report Help Text
			click(EDTC_OR.PTOTIMEOFFREPORTHELPLINK,"PTO Time Off Report Help Link");
			assertText(EDTC_OR.MODALDIALOGTEXT,ptoTimeOffReportHelpText);
			click(EDTC_OR.MODALDIALOGCLOSEBTN,"Close Button");
			Thread.sleep(lSleep_Low);
			
			//Validate PTO Time Off Report Help Text
			click(EDTC_OR.TIMEOFFREPORTHELPBTN,"Scrolling the Time Off Report Help Link" );
			assertText(EDTC_OR.MODALDIALOGTEXT,scrollTimeOffReportHelptext);
			click(EDTC_OR.MODALDIALOGCLOSEBTN,"Close Button");
     		
     		
     		blnEventReport = false;
     	} catch (Exception e) {
     		throw e;
     	}
     }   
     /********************************************************************************************************
      * Method 	Name		:	validateTotalPTO_OPT()
      * Author				:	
      * Description			:	This method validates the validates State Code
      * Date of creation 	:	
      * modifying person 	: 	
      * Date of modification	:
      ********************************************************************************************************/	
     public void validateTotalPTO_OPT(String strWeek,Double strTotalPTO,Double strTotalOPT) throws Throwable {
     	try {
     		blnEventReport = true;
     		String month=strWeek.split("/")[0];
     		String day=strWeek.split("/")[1];
     		String week=month.concat("/").concat(day);
     		
     		int col=driver.findElements(By.xpath(EDTC_OR.ELEMENTTEXT1+week+"')]/preceding-sibling::th")).size();
     		String cssValue=driver.findElement(By.xpath(EDTC_OR.ELEMENTTEXT1+empName+" ("+empID+")')]//following-sibling::td["+col+"]//div[contains(@class,'progress-bar')]")).getCssValue("background-color");
  			Color color = Color.fromString(cssValue);
  			String bgdcolor=color.asHex().toString();
  			if(!bgdcolor.equalsIgnoreCase("#f0ad4e")){
  				failureReport("Validate whether the Background color of Progress Bar is Orange in Color after Employee has entered Time Off Entries", "Background color of Progress Bar is not Orange");
  			}else{
  				SuccessReport("Validate whether the Background color of Progress Bar is Orange in Color after Employee has entered Time Off Entries", "Background color of Progress Bar is Orange");
  			}
     		
  			click(By.xpath(EDTC_OR.ELEMENTTEXT1+empName+" ("+empID+")')]//following-sibling::td["+col+"]//div[contains(@class,'progress-bar')]"),"Progress Bar for the "+week+" Week");
  			waitForElementPresent(EDTC_OR.SEARCHMATCHESLABEL, "Modal Dialog");
  			
  			//Assert Text of the 
  			assertText(EDTC_OR.SEARCHMATCHESLABEL, "Employee entered PTO/OPT for "+empName+" ("+empID+")");
  			
  			//This method validates the Total Hours
			validateTotalHours(EDTC_OR.MODALDIALOGTABLE);
			
			Double PTOHours=Double.valueOf(getText(By.xpath(EDTC_OR.MODALDIALOGTABLE+"//*[contains(text(),'PTO')]/following-sibling::td[last()]"), "Total PTO Hours"));
			Double OPTHours=Double.valueOf(getText(By.xpath(EDTC_OR.MODALDIALOGTABLE+"//*[contains(text(),'OPT')]/following-sibling::td[last()]"), "Total OPT Hours"));
     		
			if(Double.compare(PTOHours, strTotalPTO)==0 && Double.compare(OPTHours, strTotalOPT)==0){
				SuccessReport("Validate the Total Number of PTOs entered by the Employee is disaplyed corectly", "Employee has entered "+PTOHours+" PTOs");
				SuccessReport("Validate the Total Number of OPTs entered by the Employee is disaplyed corectly", "Employee has entered "+OPTHours+" OPTs");
			}else{
				failureReport("Validate the Total Number of PTO and OPTs entered by the Employee is disaplyed corectly", "Total Number of PTO and OPTs entered by the Employee is not disaplyed corectly");
			}
			
     		blnEventReport = false;
     	} catch (Exception e) {
     		throw e;
     	}
     } 
     /********************************************************************************************************
      * Method 	Name		:	approve_PTO_OPT_Entries()
      * Author				:	
      * Description			:	This method validates the validates State Code
      * Date of creation 	:	
      * modifying person 	: 	
      * Date of modification	:
      ********************************************************************************************************/	
     public void approve_PTO_OPT_Entries(String week,String strNote,String strSendEmail) throws Throwable {
     	try {
     		blnEventReport = true;
     		//Click on the Grant Radio Button
     		click(EDTC_OR.GRANTREQUESTRADIOBTN, "Grant Request Radio Button");	
     	
     		if(!strNote.isEmpty()){
     			type(EDTC_OR.MEMOTEXTAREA, strNote, "Note to employee Text Area");
     		}
     		if(strSendEmail.equalsIgnoreCase("Y")){
     			if(!isChecked(EDTC_OR.SENDEMAILTOEMPCHECKBOX, "Send/Re-send status email to employee")){
     				click(EDTC_OR.SENDEMAILTOEMPCHECKBOX, "Send/Re-send status email to employee");	
     			}
     		}else if(strSendEmail.equalsIgnoreCase("Y")){
     			if(isChecked(EDTC_OR.SENDEMAILTOEMPCHECKBOX, "Send/Re-send status email to employee")){
     				click(EDTC_OR.SENDEMAILTOEMPCHECKBOX, "Send/Re-send status email to employee");	
     			}
     		}
     		click(EDTC_OR.SAVECHANGESBTN, "Save Changes Button");
     		waitForElementPresent(EDTC_OR.APPROVEDLABEL, "Approved Label");
     		isChecked_Report(EDTC_OR.GRANTREQUESTRADIOBTN, "Grant Request Radio Button");
     		String cssValue=driver.findElement(EDTC_OR.APPROVEDLABEL).getCssValue("background-color");
  			Color color = Color.fromString(cssValue);
  			String bgdcolor=color.asHex().toString();
  			if(!bgdcolor.equalsIgnoreCase("#5cb85c")){
  				failureReport("Validate whether the Background color of Approved Label is Green in Color after Manager has granted the PTO and OPT entries", "Background color of Approved Label is not Green");
  			}else{
  				SuccessReport("Validate whether the Background color of Approved Label is Green in Color after Manager has granted the PTO and OPT entries", "Background color of Approved Label is Green");
  			}
     		click(EDTC_OR.MODALDIALOGCLOSEBTN, "Close Button");
     		
     		int col=driver.findElements(By.xpath(EDTC_OR.ELEMENTTEXT1+week+"')]/preceding-sibling::th")).size();
     		cssValue=driver.findElement(By.xpath(EDTC_OR.ELEMENTTEXT1+empName+" ("+empID+")')]//following-sibling::td["+col+"]//div[contains(@class,'progress-bar')]")).getCssValue("background-color");
  			color = Color.fromString(cssValue);
  			bgdcolor=color.asHex().toString();
  			if(!bgdcolor.equalsIgnoreCase("#f0ad4e")){
  				failureReport("Validate whether the Background color of Progress Bar is Green in Color after Manager has granted the PTO and OPT entries", "Background color of Progress Bar is not Green");
  			}else{
  				SuccessReport("Validate whether the Background color of Progress Bar is Green in Color after Manager has granted the PTO and OPT entries", "Background color of Progress Bar is Green");
  			}
     		
     		blnEventReport = false;
     	} catch (Exception e) {
     		throw e;
     	}
     } 
     
     /********************************************************************************************************
      * Method 	Name		:	validateEmpTimeOffReport()
      * Author				:	
      * Description			:	This method validates the validates State Code
      * Date of creation 	:	
      * modifying person 	: 	
      * Date of modification	:
      ********************************************************************************************************/	    
      public void validateEmpTimeOffReport_AfterMgrOverridesTS(String strWeek) throws Throwable{
    	  try{
    		  blnEventReport = true;
    		  String month=strWeek.split("/")[0];
    		  String day=strWeek.split("/")[1];
    		  String week=month.concat("/").concat(day);
       		
    		  int col=driver.findElements(By.xpath(EDTC_OR.ELEMENTTEXT1+week+"')]/preceding-sibling::th")).size();
    		  click(By.xpath(EDTC_OR.ELEMENTTEXT1+empName+" ("+empName+")')]//following-sibling::td["+col+"]//div[contains(@class,'progress-bar')]"),"Progress Bar for the "+week+" Week");
    		  waitForElementPresent(EDTC_OR.SEARCHMATCHESLABEL, "Modal Dialog");
    		  
    		  assertText(EDTC_OR.SEARCHMATCHESLABEL, "Manager entered PTO/OPT for "+empName+" ("+empID+")");
    		  isElementDisplayed(EDTC_OR.MGROVERRIDENLABEL, "Mgr/Adm override record -- not subject to approval! Message is displayed");
    		  
    		  click(EDTC_OR.MODALDIALOGCLOSEBTN, "Close Button");
    		  
    		  blnEventReport = false;
       	} catch (Exception e) {
       		throw e;
       	}
      }
      
      /********************************************************************************************************
       * Method 	Name		:	reject_PTO_OPT_Entries()
       * Author				:	
       * Description			:	This method validates the validates State Code
       * Date of creation 	:	
       * modifying person 	: 	
       * Date of modification	:
       ********************************************************************************************************/	
      public void reject_PTO_OPT_Entries(String week,String strNote,String strSendEmail) throws Throwable {
      	try {
      		blnEventReport = true;
      		//Click on the Grant Radio Button
      		click(EDTC_OR.REJECTREQUESTRADIOBTN, "Reject Request Radio Button");	
      	
      		if(!strNote.isEmpty()){
      			type(EDTC_OR.MEMOTEXTAREA, strNote, "Note to employee Text Area");
      		}
      		if(strSendEmail.equalsIgnoreCase("Y")){
      			if(!isChecked(EDTC_OR.SENDEMAILTOEMPCHECKBOX, "Send/Re-send status email to employee")){
      				click(EDTC_OR.SENDEMAILTOEMPCHECKBOX, "Send/Re-send status email to employee");	
      			}
      		}else if(strSendEmail.equalsIgnoreCase("Y")){
      			if(isChecked(EDTC_OR.SENDEMAILTOEMPCHECKBOX, "Send/Re-send status email to employee")){
      				click(EDTC_OR.SENDEMAILTOEMPCHECKBOX, "Send/Re-send status email to employee");	
      			}
      		}
      		click(EDTC_OR.SAVECHANGESBTN, "Save Changes Button");
      		isChecked_Report(EDTC_OR.GRANTREQUESTRADIOBTN, "Grant Request Radio Button");
      		click(EDTC_OR.MODALDIALOGCLOSEBTN, "Close Button");
      		
      		int col=driver.findElements(By.xpath(EDTC_OR.ELEMENTTEXT1+week+"')]/preceding-sibling::th")).size();
      		String cssValue=driver.findElement(By.xpath(EDTC_OR.ELEMENTTEXT1+empName+" ("+empID+")')]//following-sibling::td["+col+"]//div[contains(@class,'progress-bar')]")).getCssValue("background-color");
      		Color color = Color.fromString(cssValue);
   			String bgdcolor=color.asHex().toString();
   			if(!bgdcolor.equalsIgnoreCase("#f0ad4e")){
   				failureReport("Validate whether the Background color of Progress Bar is Orange in Color after Manager has Rejected the PTO and OPT entries", "Background color of Progress Bar is not Orange");
   			}else{
   				SuccessReport("Validate whether the Background color of Progress Bar is Orange in Color after Manager has Rejected the PTO and OPT entries", "Background color of Progress Bar is Orange");
   			}
      		
      		blnEventReport = false;
      	} catch (Exception e) {
      		throw e;
      	}
      }   
      /********************************************************************************************************
       * Method 	Name		:	validateRemJobSchedulingScreen()
       * Author				:	
       * Description			:	This method validates the validates State Code
       * Date of creation 	:	
       * modifying person 	: 	
       * Date of modification	:
       ********************************************************************************************************/	    
       public void validateRemJobSchedulingScreen(String strTableHeadings,String strJobNames) throws Throwable{
    	   try{
    		   blnEventReport = true;
    		   	
    		   //This method validates the Table Headings
    		   verifyTableHeading(By.xpath(EDTC_OR.TIMESHEETSUMMARYTABLE+"//th"), strTableHeadings);
    		   
    		   isElementDisplayed(EDTC_OR.CLEARBTN, "Clear Button");
    		   isElementDisplayed(EDTC_OR.UPDATEBTN, "Update Button");
    		   	
    		   //This method validates the Job Names
    		   validateFieldNames(EDTC_OR.JOBNAMES, strJobNames);
    		   
    		   blnEventReport = true;
    		   //Validate the Fields
    		   String[] arrayJobNames=strJobNames.split(",");
    		   for(int i=0;i<arrayJobNames.length;i++){
    			   isElementDisplayed(By.xpath(EDTC_OR.ELEMENTTEXT1+arrayJobNames[i]+"')]/following-sibling::td//input[@type='checkbox']"), arrayJobNames[i]+" Enabled Checkbox");
    			   isElementDisplayed(By.xpath(EDTC_OR.ELEMENTTEXT1+arrayJobNames[i]+"')]/../following-sibling::tr//input[contains(@id,'hours')]"), arrayJobNames[i]+" Hours Text Field");
    			   isElementDisplayed(By.xpath(EDTC_OR.ELEMENTTEXT1+arrayJobNames[i]+"')]/../following-sibling::tr//input[contains(@id,'mins')]"), arrayJobNames[i]+" Minutes Text Field");
    			  
    			   isElementDisplayed(By.xpath(EDTC_OR.ELEMENTTEXT1+arrayJobNames[i]+"')]/../following-sibling::tr//label[contains(.,'Mon')]/input"), arrayJobNames[i]+" Days: Mon Checkbox");
    			   isElementDisplayed(By.xpath(EDTC_OR.ELEMENTTEXT1+arrayJobNames[i]+"')]/../following-sibling::tr//label[contains(.,'Tue')]/input"), arrayJobNames[i]+" Days: Tue Checkbox");
    			   isElementDisplayed(By.xpath(EDTC_OR.ELEMENTTEXT1+arrayJobNames[i]+"')]/../following-sibling::tr//label[contains(.,'Wed')]/input"), arrayJobNames[i]+" Days: Wed Checkbox");
    			   isElementDisplayed(By.xpath(EDTC_OR.ELEMENTTEXT1+arrayJobNames[i]+"')]/../following-sibling::tr//label[contains(.,'Thu')]/input"), arrayJobNames[i]+" Days: Thu Checkbox");
    			   isElementDisplayed(By.xpath(EDTC_OR.ELEMENTTEXT1+arrayJobNames[i]+"')]/../following-sibling::tr//label[contains(.,'Fri')]/input"), arrayJobNames[i]+" Days: Fri Checkbox");
    			   isElementDisplayed(By.xpath(EDTC_OR.ELEMENTTEXT1+arrayJobNames[i]+"')]/../following-sibling::tr//label[contains(.,'Sat')]/input"), arrayJobNames[i]+" Days: Sat Checkbox");
    			   isElementDisplayed(By.xpath(EDTC_OR.ELEMENTTEXT1+arrayJobNames[i]+"')]/../following-sibling::tr//label[contains(.,'Sun')]/input"), arrayJobNames[i]+" Days: Sun Checkbox");
    		   }
    		   blnEventReport = false;
         	} catch (Exception e) {
         		throw e;
         	}
       }
       
       /********************************************************************************************************
        * Method 	Name		:	validateRemJobSchedulingScreen()
        * Author				:	
        * Description			:	This method validates the validates State Code
        * Date of creation 	:	
        * modifying person 	: 	
        * Date of modification	:
        ********************************************************************************************************/	    
        public void updateJobs(String strJobName,String strHours,String strMins,String strJobStatus,String strDays) throws Throwable{
     	   try{
     		   blnEventReport = true;
     		   	
     		   if(!strHours.isEmpty()){
     			   type(By.xpath(EDTC_OR.ELEMENTTEXT1+strJobName+"')]/../following-sibling::tr//input[contains(@id,'hours')]"), strHours, strJobName+" Hours Text Field");
     		   }
     		   if(!strMins.isEmpty()){
     			   type(By.xpath(EDTC_OR.ELEMENTTEXT1+strJobName+"')]/../following-sibling::tr//input[contains(@id,'mins')]"), strMins, strJobName+" Minutes Text Field");
     		   }
     		   if(!strDays.isEmpty()){
    			   click(By.xpath(EDTC_OR.ELEMENTTEXT1+strJobName+"')]/../following-sibling::tr//label[contains(.,'"+strDays+"')]/input"),strDays+" Checkbox ");
    		   }
     		   
     		   if(strJobStatus.equalsIgnoreCase("Enable")){
     			   if(!isChecked(By.xpath(EDTC_OR.ELEMENTTEXT1+strJobName+"')]/following-sibling::td//input[@type='checkbox']"),"Checkbox")){
     				 click(By.xpath(EDTC_OR.ELEMENTTEXT1+strJobName+"')]/following-sibling::td//input[@type='checkbox']"),"Checkbox");
     			   }
     		   }else if(strJobStatus.equalsIgnoreCase("Disable")){
     			  if(isChecked(By.xpath(EDTC_OR.ELEMENTTEXT1+strJobName+"')]/following-sibling::td//input[@type='checkbox']"),"Checkbox")){
      				 click(By.xpath(EDTC_OR.ELEMENTTEXT1+strJobName+"')]/following-sibling::td//input[@type='checkbox']"),"Checkbox");
      			   }  
     		   }
     		   
     		   click(EDTC_OR.UPDATEBTN, "Update Button");
     		   
     		   
     		   blnEventReport = false;
          	} catch (Exception e) {
          		throw e;
          	}
        } 
        /********************************************************************************************************
    	 * Method Name 			: validateSystemOptionsPage()
    	 * Author :
    	 * Description 			: This method validates the validates State Code Date of creation :
    	 * modifyingperson 		:
    	 * Date of modification :
    	 ********************************************************************************************************/
    	public void validateSystemOptionsPage(String systemOptionsHelpText,String loginBannerHelpText,String strTimeDropDownValues,String strGmtOffsetDropDownValues) throws Throwable {
    		try {
    			blnEventReport = true;
    		
    			//validate save button
    			isElementDisplayed(EDTC_OR.TOPSAVEHELPBUTTON, "Top Save Button");
    			
    			//Validate Day Of Week Radio Buttons
    			isElementDisplayed(EDTC_OR.MONDAYRADIOBTN,"Monday Radio Button");
    			isElementDisplayed(EDTC_OR.TUESDAYRADIOBTN,"Tuesday Radio Button");
    			isElementDisplayed(EDTC_OR.WEDNESDAYRADIOBTN,"Wednesday Radio Button");
    			isElementDisplayed(EDTC_OR.THURSEDAYRADIOBTN,"Thursday Radio Button");
    			isElementDisplayed(EDTC_OR.FRIDAYRADIOBTN,"Friday Radio Button");
    			
    			//Validate Time Drop Down values
    			isElementDisplayed(EDTC_OR.TIMEDROPDOWN,"Time Drop Down");
    			validateDropDownValues(EDTC_OR.TIMEDROPDOWN, strTimeDropDownValues, "Time Drop Down");
    			
    			//Validate Zone Radio Buttons
    			isElementDisplayed(EDTC_OR.STANDARDRADIOBTN,"Standard Radio Button");
    			isElementDisplayed(EDTC_OR.DAYLIGHTRADIOBTN,"Daylight Radio Button");
    			
    			
    			//Validate Before or After? Radio Buttons
    			isElementDisplayed(EDTC_OR.AFTERPEDATERADIOBTN,"After The PE Date Radio Button");
    			isElementDisplayed(EDTC_OR.BEFOREPEDATERADIOBTN,"Befor The PE Date Radio Button");
    			
    			
    			//Validate Time Drop Down values
    			isElementDisplayed(EDTC_OR.GMTOFFSETDROPDOWN,"GMT Offset Drop Down");
    			validateDropDownValues(EDTC_OR.GMTOFFSETDROPDOWN, strGmtOffsetDropDownValues, "GMT Offset Drop Down");
    			
    			
    					
    			//Validate Login Banner Text Box
    			isElementDisplayed(EDTC_OR.LOGINBANNERTEXTBOX, "Login Banner Text Box");
    			//Validate Punch System Banner Text Box
    			isElementDisplayed(EDTC_OR.PUNCHSYSTEMBANNERTEXTBOX, " Punch System Banner Text Box");
    		
    			//Validate PTO/OPT Radio Buttons
    			isElementDisplayed(EDTC_OR.ISSUEWARNINGSRADIOBTN,"Issue Warnings Radio Button");
    			isElementDisplayed(EDTC_OR.ISSUEERRORSRADIOBTN,"Issue Errors Radio Button");
    			
    			//Validate Primary Receipent Text Box
    			isElementDisplayed(EDTC_OR.PRIMARYRECIPIENTTEXTBOX, "Primary Receipent Text Box");
    			//Validate Secondary Receipent Text Box
    			isElementDisplayed(EDTC_OR.SECONDARYRECIPIENTTEXTBOX, "Secondary Receipent Text Box");
    			//validate Bottom Save button
    			isElementDisplayed(EDTC_OR.BOTTOMSAVEBTNBTN, "Bottom Save Button");
    			isElementDisplayed(EDTC_OR.TOPSAVEBTNBTN, "Top Save Button");
    			//validate Reset Web Sessions button
    			isElementDisplayed(EDTC_OR.RESETWEBSESSIONSBUTTON, "Reset Web Sessions button");
    			
    			// Validate system Options Help Text
    			isEnabled(EDTC_OR.SYSTEMOPTIONSHELPLINK, "System Options Help Link");
    			click(EDTC_OR.SYSTEMOPTIONSHELPLINK, "System Options Help Link");
    			assertText(EDTC_OR.MODALDIALOGTEXT, systemOptionsHelpText);
    			click(EDTC_OR.MODALDIALOGCLOSEBTN, "System Options Help Close Button");
    			Thread.sleep(lSleep_VLow);
    			
    			// Validate Login Banner Help Text
    			isEnabled(EDTC_OR.LOGINBANNERHELPLINK, "Login Banner Help Link");
    			click(EDTC_OR.LOGINBANNERHELPLINK, "Login Banner Help Link");
    			assertText(EDTC_OR.MODALDIALOGTEXT, loginBannerHelpText);
    			click(EDTC_OR.MODALDIALOGCLOSEBTN, "Login Banner Help Close Button");
    			Thread.sleep(lSleep_VLow);
    	
    		
    			blnEventReport = false;
    		} catch (Exception e) {
    			throw e;
    		}
    	}
    	
   	/********************************************************************************************************
   	 * Method Name 			: enterDetails_SystemOptionsPage()
   	 * Author 				:
   	 * Description 			: This method validates the validates State Code Date of creation :
   	 * modifyingperson 		:
   	 * Date of modification :
   	 ********************************************************************************************************/
    	public void enterDetails_SystemOptionsPage(String strDayOfweek,String strTimeDropDown,String strZone,String strBeforOrAfter,String strGmtOffSet,String strLoginBanner,String strPunchSystemBanner,String strPTO,String strPrimaryRecipient,String strSecondaryRecipient) throws Throwable {
    		try {
    			blnEventReport = true;
    			
    			//Click on day of week Radio Buttons
    			if(!strDayOfweek.isEmpty()){
    			   click(By.xpath(EDTC_OR.RADIOBTN +strDayOfweek+ "']/input"),strDayOfweek+ "Radio Button");	
    			}
    			//Select Time DroP Down Value
    			if(!strTimeDropDown.isEmpty()){
    				selectByVisibleText(EDTC_OR.TIMEDROPDOWN,strTimeDropDown, "Time DropDown");
    			}
    			//Click on Zones Radio Buttons
    			if(!strZone.isEmpty()){
    			   click(By.xpath(EDTC_OR.RADIOBTN +strZone+ "']/input"),strZone+ "Radio Button");	
    			}
    			//Click on Before Or After Radio Buttons
    			if(!strBeforOrAfter.isEmpty()){
    			   click(By.xpath(EDTC_OR.RADIOBTN +strBeforOrAfter+ "']/input"),strBeforOrAfter+ "Radio Button");	
    			}
    			//Select GMT Offset DropDown Value
    			if(!strGmtOffSet.isEmpty()){
    				 selectByVisibleText(EDTC_OR.TIMEDROPDOWN,strGmtOffSet, "GMT Offset DropDown");
    			}
    			//Enter value in Login Banner Text Field
    			if(!strLoginBanner.isEmpty()){
    				type(EDTC_OR.LOGINBANNERTEXTBOX, strLoginBanner, "login Banner Text Field");	
    			}
    			//Enter value in Punch System Banner Text Field
    			if(!strPunchSystemBanner.isEmpty()){
    				type(EDTC_OR.PUNCHSYSTEMBANNERTEXTBOX, strPunchSystemBanner, "Punch System Banner Text Field");	
    			}
    			//Click on PTO/OPT Radio Buttons
    			if(!strPTO.isEmpty()){
    			   click(By.xpath(EDTC_OR.RADIOBTN +strPTO+"']/input"),strPTO+ "Radio Button");	
    			}
    			//Enter value in Primary Recipient Text Field
    			if(!strPunchSystemBanner.isEmpty()){
    				type(EDTC_OR.PRIMARYRECIPIENTTEXTBOX, strPrimaryRecipient, "Primary Recipient Text Field");	
    			}
    			//Enter value in Secondary Recipient Text Field
    			if(!strPunchSystemBanner.isEmpty()){
    				type(EDTC_OR.PRIMARYRECIPIENTTEXTBOX, strSecondaryRecipient, "Secondary Recipient Text Field");	
    			}
    			
    			click(EDTC_OR.BOTTOMSAVEBTNBTN, "Save Button");
    			waitForElementPresent(EDTC_OR.SEARCHMATCHESLABEL, "System Options Save Modal Dialog");
    			assertText(EDTC_OR.SEARCHMATCHESLABEL, "System options saved");
    			click(EDTC_OR.MODALDIALOGOKBTN,"OK Button");
    			
    			blnEventReport = false;
    		} catch (Exception e) {
    			throw e;
    		}

    	}
    /********************************************************************************************************
     * Method Name 			: validateSystemOptions()
     * Author 				:
     * Description 			: This method validates the validates State Code Date of creation :
     * modifyingperson 		:
     * Date of modification :
     ********************************************************************************************************/
    	public void validateSystemOptions(String strDayOfweek,String strTimeDropDown,String strZone,String strBeforOrAfter,String strGmtOffSet,String strLoginBanner,String strPunchSystemBanner,String strPTO,String strPrimaryRecipient,String strSecondaryRecipient) throws Throwable {
    		try {
    			blnEventReport = true;
    			
    			//Click on day of week Radio Buttons
    			if(!strDayOfweek.isEmpty()){
    				isChecked_Report(By.xpath(EDTC_OR.RADIOBTN +strDayOfweek+ "']/input"),strDayOfweek+ "Radio Button");	
    			}
    			//Select Time DroP Down Value
    			if(!strTimeDropDown.isEmpty()){
    				validateDropDownValue(EDTC_OR.TIMEDROPDOWN,strTimeDropDown, "Time DropDown");
    			}
    			//Click on Zones Radio Buttons
    			if(!strZone.isEmpty()){
    				isChecked_Report(By.xpath(EDTC_OR.RADIOBTN +strZone+ "']/input"),strZone+ "Radio Button");	
    			}
    			//Click on Before Or After Radio Buttons
    			if(!strBeforOrAfter.isEmpty()){
    				isChecked_Report(By.xpath(EDTC_OR.RADIOBTN +strBeforOrAfter+ "']/input"),strBeforOrAfter+ "Radio Button");	
    			}
    			//Select GMT Offset DropDown Value
    			if(!strGmtOffSet.isEmpty()){
    				validateDropDownValue(EDTC_OR.TIMEDROPDOWN,strGmtOffSet, "GMT Offset DropDown");
    			}
    			//Enter value in Login Banner Text Field
    			if(!strLoginBanner.isEmpty()){
    				validateText(EDTC_OR.LOGINBANNERTEXTBOX, strLoginBanner, "login Banner Text Field");	
    			}
    			//Enter value in Punch System Banner Text Field
    			if(!strPunchSystemBanner.isEmpty()){
    				validateText(EDTC_OR.PUNCHSYSTEMBANNERTEXTBOX, strPunchSystemBanner, "Punch System Banner Text Field");	
    			}
        			//Click on PTO/OPT Radio Buttons
    			if(!strPTO.isEmpty()){
    				isChecked_Report(By.xpath(EDTC_OR.RADIOBTN +strPTO+"']/input"),strPTO+ "Radio Button");	
    			}
    			//Enter value in Primary Recipient Text Field
    			if(!strPunchSystemBanner.isEmpty()){
    				validateText(EDTC_OR.PRIMARYRECIPIENTTEXTBOX, strPrimaryRecipient, "Primary Recipient Text Field");	
    			}
    			//Enter value in Secondary Recipient Text Field
    			if(!strPunchSystemBanner.isEmpty()){
    				validateText(EDTC_OR.PRIMARYRECIPIENTTEXTBOX, strSecondaryRecipient, "Secondary Recipient Text Field");	
    			}
        			
    			blnEventReport = false;
    		} catch (Exception e) {
    			throw e;
    		}
    		
    	}   
    	
    	/********************************************************************************************************
    	 * Method 	Name  	    :	validateTotalHoursSummaryPage()
    	 * Author				:	
    	 * Description		    :	This method will validate the page header
    	 * Date of creation 	:	
    	 * modifying person 	: 	
    	 * Date of modification: 
    	 * @throws Throwable	:
         ********************************************************************************************************/   
    	 public void validateTotalHoursSummaryPage(String weDate) throws Throwable{
    		 try{
    			 blnEventReport = true;
    			 Double count=Double.valueOf(getText(By.xpath(EDTC_OR.ELEMENTTEXT1+weDate+"')]/../preceding-sibling::td/span[text()='Emp entered']/../following-sibling::td[2]"), ""));
    			 int total=Double.compare(count, totalRegHrs);
    			 if(total==0){
    				 SuccessReport("Validate the Total Regular Hours is displayed correctly", count+" Total Regular Hours is displayed correctly");
    			 }else{
    				 failureReport("Validate the Total Regular Hours is displayed correctly", "Total Regular Hours is incorrect");
    			 }
    			 
    			 count=Double.valueOf(getText(By.xpath(EDTC_OR.ELEMENTTEXT1+weDate+"')]/../preceding-sibling::td/span[text()='Emp entered']/../following-sibling::td[3]"), ""));
    			 total=Double.compare(count, additionalCount);
    			 if(total==0){
    				 SuccessReport("Validate the Additional Hours is displayed correctly", count+" Additional Hours is displayed correctly");
    			 }else{
    				 failureReport("Validate the Additional Hours is displayed correctly", "Additional Hours is incorrect");
    			 }
    			 
    			 count=Double.valueOf(getText(By.xpath(EDTC_OR.ELEMENTTEXT1+weDate+"')]/../preceding-sibling::td/span[text()='Emp entered']/../following-sibling::td[4]"), ""));
    			 total=Double.compare(count, offsiteCount);
    			 if(total==0){
    				 SuccessReport("Validate the Offsite Hours is displayed correctly", count+" Offsite Hours is displayed correctly");
    			 }else{
    				 failureReport("Validate the Offsite Hours is displayed correctly", "Offsite Hours is incorrect");
    			 }
    			 
    			 
    			 count=Double.valueOf(getText(By.xpath(EDTC_OR.ELEMENTTEXT1+weDate+"')]/../preceding-sibling::td/span[text()='Emp entered']/../following-sibling::td[5]"), ""));
    			 total=Double.compare(count, ptoCount);
    			 if(total==0){
    				 SuccessReport("Validate the PTO Hours is displayed correctly", count+" PTO Hours is displayed correctly");
    			 }else{
    				 failureReport("Validate the PTO Hours is displayed correctly", "PTO Hours is incorrect");
    			 }
    			 
    			 
    			 count=Double.valueOf(getText(By.xpath(EDTC_OR.ELEMENTTEXT1+weDate+"')]/../preceding-sibling::td/span[text()='Emp entered']/../following-sibling::td[6]"), ""));
    			 total=Double.compare(count, optCount);
    			 if(total==0){
    				 SuccessReport("Validate the OPT Hours is displayed correctly", count+" OPT Hours is displayed correctly");
    			 }else{
    				 failureReport("Validate the OPT Hours is displayed correctly", "OPT Hours is incorrect");
    			 }
    			 
    			 
    			 count=Double.valueOf(getText(By.xpath(EDTC_OR.ELEMENTTEXT1+weDate+"')]/../preceding-sibling::td/span[text()='Emp entered']/../following-sibling::td[7]"), ""));
    			 total=Double.compare(count, juryDutyCount);
    			 if(total==0){
    				 SuccessReport("Validate the JuryDuty Hours is displayed correctly", count+" JuryDuty Hours is displayed correctly");
    			 }else{
    				 failureReport("Validate the JuryDuty Hours is displayed correctly", "JuryDuty Hours is incorrect");
    			 }
    			 
    			 count=Double.valueOf(getText(By.xpath(EDTC_OR.ELEMENTTEXT1+weDate+"')]/../preceding-sibling::td/span[text()='Emp entered']/../following-sibling::td[8]"), ""));
    			 total=Double.compare(count, bereavementCount);
    			 if(total==0){
    				 SuccessReport("Validate the Bereavement Hours is displayed correctly", count+" Bereavement Hours is displayed correctly");
    			 }else{
    				 failureReport("Validate the Bereavement Hours is displayed correctly", "Bereavement Hours is incorrect");
    			 }
    			 
    			 count=Double.valueOf(getText(By.xpath(EDTC_OR.ELEMENTTEXT1+weDate+"')]/../preceding-sibling::td/span[text()='Emp entered']/../following-sibling::td[9]"), ""));
    			 total=Double.compare(count, sickCount);
    			 if(total==0){
    				 SuccessReport("Validate the Sick Hours is displayed correctly", count+" Sick Hours is displayed correctly");
    			 }else{
    				 failureReport("Validate the Sick Hours is displayed correctly", "Sick Hours is incorrect");
    			 }
    			 
    			 count=Double.valueOf(getText(By.xpath(EDTC_OR.ELEMENTTEXT1+weDate+"')]/../preceding-sibling::td/span[text()='Emp entered']/../following-sibling::td[10]"), ""));
    			 total=Double.compare(count, unpaidCount);
    			 if(total==0){
    				 SuccessReport("Validate the Unpaid Hours is displayed correctly", count+" Unpaid Hours is displayed correctly");
    			 }else{
    				 failureReport("Validate the Unpaid Hours is displayed correctly", "Unpaid Hours is incorrect");
    			 }
    			 
    			 
    			
    			 blnEventReport = false;
    			} catch (Exception e) {
    				throw e;
    			}
    	 }   	
    /********************************************************************************************************
   	  * Method Name : validate_ImpersonateLoginPageFields() 
   	  * Author : 
   	  * Description   : This method Validates the Fields on the Login Page Date of creation :
   	  * modifying person 
   	  * Date of modification :
   	  * @throws Throwable
   	  ********************************************************************************************************/
    	 public void validate_ImpersonateLoginPageFields() throws Throwable {
    		 blnEventReport = true;
    		 // Validate whether User is navigated to MyAccount Impersonate Login
    		 // Page
    		 driver.get("https://edtc-qa.na.wkglobal.com/edtc/login/impersonate");
    		 ImpersonateFlag = true;
    		 if (waitForVisibilityOfElementWithoutReport(EDTC_OR.SIGNINBTN, "Sign In Button")) {
    			 SuccessReport("Validate whether User is navigated to EDTC Login Page",
    					 "User Is succesfully navigated to EDTC Login Page");
    		 } else {
    			 failureReport("Validate whether User is navigated to EDTC Login Page", "Failed to Navigate");
    		 }
    		 // Validate the Fields on the Login page
    		 isElementDisplayed(EDTC_OR.SIGNINBTN, "Sign In Button");
    		 isElementDisplayed(EDTC_OR.PAYROLLIDTEXTFIELD, "Payroll Text Field");
    		 isElementDisplayed(EDTC_OR.LOGINHELPLINK, "Login Help Link Next to Payroll ID text field");
    		 isElementDisplayed(EDTC_OR.PWDTEXTFIELD, "Password Text Field");
    		 
    		 isElementDisplayed(EDTC_OR.IMPERSONATEIDFIELD, "Impersonate ID text Field");
    		 
    		 isElementDisplayed(EDTC_OR.HELPLINK, "Help Link");
    		 isElementDisplayed(EDTC_OR.TORRANCEPAYROLLLINK, "Torrance Payroll Link");
    		 isElementDisplayed(EDTC_OR.LOGINFUNCTIONSHELPLINK, "Login Functions Help Link");
    		 
    		 String strForgotPwd = getText(EDTC_OR.FORGOTPWDLINK, "Forgot password Link");
    		 if (strForgotPwd.equalsIgnoreCase("Forgot your password? Click here")) {
    			 SuccessReport("Validate whether Forgot your password? Click here text is present","Forgot your password? Click here text is present");
    		 } else {
    			 failureReport("Validate whether Forgot your password? Click here text is present","Forgot your password? Click here text is not " + "present");
    		 }
    		 blnEventReport = false;
    	 }
    	 /********************************************************************************************************
    		 * Method Name :  signInImpersonate() 
    		 * Author : 
    		 * Description :  This method will Log into the EDTC Application Date of modification :
    		 * @param username: Valid Email Address
    		 * @param password:
    		 *            Valid Password
    		 * @param ImpersonateID:
    		 *            Valid Impersonate ID
    		 * @throws Throwable
    		 ********************************************************************************************************/
    		public void signIn(String strPayrollID, String strPassword, String strImpersonateID) throws Throwable {
    			try {
    				blnEventReport = true;

    				type(EDTC_OR.PAYROLLIDTEXTFIELD, strPayrollID, "Payroll Text Field");
    				type(EDTC_OR.PWDTEXTFIELD, strPassword, "Password Text Field");

    				type(EDTC_OR.IMPERSONATEIDFIELD, strImpersonateID, "Imperonate Text Field");

    				click(EDTC_OR.SIGNINBTN, "Sign In button");

    				// Check for Logout Link in the Home Page
    				waitForElementPresent(EDTC_OR.SIGNOUTLINK, "Sign Out Link");
    				if (isElementPresent(EDTC_OR.SIGNOUTLINK, "Sign Out Link")) {
    					SuccessReport("Validate whether User is able to login succesffully",
    							"User is able to login succesffully");
    				} else {
    					failureReport("Validate whether User is able to login succesffully", "Failed to login");
    				}
    				blnEventReport = false;
    			} catch (Exception e) {
    				throw e;
    			}

    		}  	
    		/********************************************************************************************************
    		 * Method Name : C2AdminSignIn_Impersonate() Author : Description : This
    		 * method will Log into the EDTC Application Date of creation Modifying
    		 * person : Date of modification :
    		 * 
    		 * @param username:
    		 *            C2 Admin employee Id
    		 * @param password
    		 *            : Valid Password
    		 * @param Impersonate
    		 *            ID : Valid employee ID
    		 * @throws Throwable
    		 ********************************************************************************************************/
    		public void C2AdminSignIn_Impersonate(String strPayrollID, String strPassword, String impersonateID)
    				throws Throwable {
    			try {
    				blnEventReport = true;
    				type(EDTC_OR.PAYROLLIDTEXTFIELD, strPayrollID, "Payroll Text Field");
    				type(EDTC_OR.PWDTEXTFIELD, strPassword, "Password Text Field");
    				type(EDTC_OR.IMPERSONATEIDFIELD, impersonateID, "Impersonate ID text field");
    				click(EDTC_OR.SIGNINBTN, "Sign In button");

    				waitForElementPresent(EDTC_OR.IMPERSONATELOGINFAILED, "Login Failed Error Message");
    				String payrollID = getAttribute(EDTC_OR.PAYROLLIDTEXTFIELD, "value", "Payroll Text Field");
    				String password = getAttribute(EDTC_OR.PWDTEXTFIELD, "value", "Password Text Field");
    				// String
    				// impersonateId=getAttribute(EDTC_OR.IMPERSONATEIDFIELD,"value","Impersonate
    				// ID field");

    				if (payrollID.isEmpty() && password.isEmpty()) {
    					SuccessReport("Validate whether data is deleted from the Payroll ID and Password text fields",
    							"Data is deleted from the Payroll ID and Password text fields");
    				} else {
    					failureReport("Validate whether data is deleted from the Payroll ID and Password text fields ",
    							"Data is not deleted from the Payroll ID and Password text fields");
    				}
    				String strFailMsg = getText(EDTC_OR.IMPERSONATELOGINFAILED, "Login Failed Error Message").trim();
    				// System.out.println(strFailMsg);
    				if (strFailMsg.equalsIgnoreCase(
    						"Login failed: Invalid setup encountered. Only Admin C1 User can use Impersonation functionality")) {
    					SuccessReport("Validate whether " + "\"" + strFailMsg + "\" error message is displayed",
    							"\"" + strFailMsg + "\" Error message is displayed");
    				} else {
    					failureReport("Validate whether " + "\"" + strFailMsg + "\" error message is displayed",
    							"Error message is not displayed");
    				}
    				blnEventReport = false;
    			} catch (Exception e) {
    				throw e;
    			}

    		}
    		
   		/********************************************************************************************************
   		 * Method Name : validateHomePageFields() 
   		 * Author : Description : This method will Logout from the EDTC Application 
   		 * Date of creation : 
   		 * modifying person
   		 * Date of modification :
   		 * @throws Throwable
   		 ********************************************************************************************************/
    	 public void validateHomePageFields(String strNavigationLinks, String strQuickLaunchLinks, String strUserType,
    			String strTopBarLink) throws Throwable {
    		try {
    			blnEventReport = true;
    			String userName = getText(EDTC_OR.USERNAMEDISPLAY, "User Name display").trim();
    			if (userName.replaceAll(" ", "").contains(loginEmpName.replaceAll(" ", "") + "(" + loginEmpID.toLowerCase().replaceAll(" ", "") + ")")) {
    				SuccessReport("Validate whether User Name is displayed on the Home Page " + userName,
    						userName + " User Name is displayed on the Home Page");
    			} else {
    				failureReport("Validate whether User Name is displayed on the Home Page " + userName,
    						"User Name is not displayed on the Home Page");
    			}
    				if (ImpersonateFlag) {
   					if (isElementPresent(EDTC_OR.UPDATEPWDLINK, "Update Password Link")) {
   						failureReport("Validate whether the Update Password Link is present in Impersonation mode",
   								"Update Password link is Present");
   					} else
   						SuccessReport("Validate whether the Update Password Link is present in Impersonation mode",
   								"Update Password link is not Present");
    					if (strUserType.equalsIgnoreCase("TPS")) {
   						isElementDisplayed(EDTC_OR.TPSLINK, "TPS Link");
   					} else {
   						if (isElementPresent(EDTC_OR.TPSLINK, "TPS Link")) {
   							failureReport("Validate whether the TPS Link is present for Non TPS User",
   									"TPS Link is present");
   						} else {
   							SuccessReport("Validate whether the TPS Link is present for Non TPS User",
   									"TPS Link is not present");
   						}
   					}
   	                // This method validates the Links present at the Top of the
   					// Home Page
   					validateFieldNames(EDTC_OR.TOPBARLINKS, strTopBarLink);
   					// Validate the Navigation Links
   					validateFieldNames(EDTC_OR.LEFTPANELINKS, strNavigationLinks);
   					// Validate the Quick Launch Icons on the Home Page
   					validateFieldNames(EDTC_OR.QUICKLAUNCHLINKS, strQuickLaunchLinks);
    					blnEventReport = false;
   				}
   			} catch (Exception e) {
   				throw e;
   			}
    		} 		
    	 /********************************************************************************************************
    	  * Method 	Name  	    :	enterTimeSheet()
    	  * Author				:	
    	  * Description		    :	This method will validate the page header
    	  * Date of creation 	:	
    	  * modifying person 	: 	
    	  * Date of modification: 
    	  * @throws Throwable	:
         ********************************************************************************************************/    
    	 public void enterTimeSheet_HRN(String strMon,String strMonHours,String strTue,String strTueHours,String strWed,
    			 String strWedHours,String strThu,String strThuHours,String strFri,String strFriHours,String strSat,String strSatHours,
    			 String strSun,String strSunHours,String strWeek,String passwordRequired,String strPwd) throws Throwable{
    		 try{
    			 blnEventReport = true;
    			 pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
    			 //Change the Date format to M/d/yyy
    			 SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yyyy");
    			 Date d_date = dateFormat.parse(strWeek);
    			 String week=dateFormat.format(d_date);
    			
    			 selectByVisibleText(EDTC_OR.CHANGETOWEEKENDINGDROPDOWN, week, "Change to Week Ending on Drop Down");
    			 pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
    		 
    			 
    			 //Enter Hours for Monday
    			 enterHours(strMon,strMonHours,2);
    			 //Enter Hours for Tuesday
    			 enterHours(strTue,strTueHours,3);
    			 //Enter Hours for Wednesday
    			 enterHours(strWed,strWedHours,4);
    			 //Enter Hours for Thursday
    			 enterHours(strThu,strThuHours,5);
    			 //Enter Hours for Friday
    			 enterHours(strFri,strFriHours,6);
    			 //Enter Hours for Saturday
    			 enterHours(strSat,strSatHours,7);
    			 //Enter Hours for Sunday
    			 enterHours(strSun,strSunHours,8);
    			 Thread.sleep(lSleep_Low);
    			 
    			 //Save
    			 click(EDTC_OR.SAVEBTN, "Save Button");
    			 pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
    			 
    			 if(passwordRequired.equalsIgnoreCase("Y")){
    				 waitForElementPresent(EDTC_OR.SEARCHMATCHESLABEL, "Confirm password Modal Dialog");
    				 isDisabled(EDTC_OR.MODALDIALOGSUBMITBTN, "Submit Button");
    				 type(EDTC_OR.CONFIRMPASSWORDTEXTFIELD,"invalid","Confirm Password Text Field");
    				 isEnabled(EDTC_OR.MODALDIALOGSUBMITBTN, "Submit Button");
    				 click(EDTC_OR.MODALDIALOGSUBMITBTN, "Submit Button");
    				 Thread.sleep(lSleep_Low);
    				 isElementDisplayed(EDTC_OR.INVALIDAPWD, "Invalid Password entered.");
    				 type(EDTC_OR.CONFIRMPASSWORDTEXTFIELD,strPwd,"Confirm Password Text Field");
    				 isEnabled(EDTC_OR.MODALDIALOGSUBMITBTN, "Submit Button");
    				 click(EDTC_OR.MODALDIALOGSUBMITBTN, "Submit Button");
    				 Thread.sleep(lSleep_Low);
    			 }
    			 pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
    			 
    			 Date todaysDate = new Date();
    			 SimpleDateFormat formatter = new SimpleDateFormat("hh:mm a");
    			 formatter.setTimeZone(TimeZone.getTimeZone("GMT"));
    			 empRequestTime = formatter.format(todaysDate);
    			 System.out.println(empRequestTime);
    			 Thread.sleep(lSleep_Low);
    			 
    			 //Calculate the PTO
    			 if(!isElementPresent(EDTC_OR.TIMESHEETENTRYERRORMSG, "Error Message")){
    		
    				 value=getText(EDTC_OR.TIMESHEETUPDATEDTIME, "TimeSheet Updated Time");
    				 SuccessReport("Validate the Message once the TimeSheet is saved", value);
    				 value.replaceAll("Hours ", "");
    				 
    				 int count=driver.findElements(By.xpath(EDTC_OR.ELEMENTTEXT2+"Scheduled') or contains(text(),'Regular')]/following-sibling::td")).size();
    				 for(int i=1;i<=count-1;i++){
    					 String strHrs=getAttribute(By.xpath(EDTC_OR.ELEMENTTEXT2+"Scheduled') or contains(text(),'Regular')]/following-sibling::td["+i+"]/input"),"value","");
    					 regHrs.add(Double.valueOf(strHrs)); 
    					 totalRegHrs+=Double.valueOf(strHrs);
    				 }
    				 
    				 //Validate Time Sheet Entered for Monday
    				 validateHoursEntered(strMon,strMonHours,2,"Monday",regHrs.get(0));
    				 //Validate Time Sheet Entered for Tuesday
    				 validateHoursEntered(strTue,strTueHours,3,"Tuesday",regHrs.get(1));
    				 //Validate Time Sheet Entered for Wednesday
    				 validateHoursEntered(strWed,strWedHours,4,"Wednesday",regHrs.get(2));
    				 //Validate Time Sheet Entered for Thursday
    				 validateHoursEntered(strThu,strThuHours,5,"Thursday",regHrs.get(3));
    				 //Validate Time Sheet Entered for Friday
    				 validateHoursEntered(strFri,strFriHours,6,"Friday",regHrs.get(4));
    				 //Validate Time Sheet Entered for Saturday
    				 validateHoursEntered(strSat,strSatHours,7,"Saturday",regHrs.get(5));
    				 System.out.println(regHrs);
    		    		
    				 //Validate Time Sheet Entered for Sunday
    				 validateHoursEntered(strSun,strSunHours,8,"Sunday",regHrs.get(6));
    				 
    				 validateTotalHours(EDTC_OR.TIMESHEETSENTRYTABLE);
    				 
    				 String strTimeText=getText(EDTC_OR.TIMESHEETUPDATEDTIME,"").trim();
    				 String strTime=strTimeText.replaceAll("[a-zA-Z]", "").trim().split("  ")[1];
    				 String strAM_PM=empRequestTime.split(" ")[1];
    				 DateFormat sdf = new SimpleDateFormat("hh:mm");
    				 Date appTime = sdf.parse(strTime);
    				 Date codeTime = sdf.parse(empRequestTime);
    				 long diff = appTime.getTime() - codeTime.getTime();
    				 long diffInSeconds = TimeUnit.MILLISECONDS.toSeconds(diff);
    				 String strTodaysDate=getCurrentDate("MM/dd/YYYY");
    				 if(diffInSeconds<=100 && strTimeText.contains(strAM_PM) && strTimeText.contains("GMT") && strTimeText.contains(strTodaysDate)){
    					   SuccessReport("Validate whether the Time stamp is displayed correctly after the Employee/Mgr saves the timesheet "+empRequestTime, strTimeText+" Time stamp is displayed correctly after the Employee/Mgr saves the timesheet ");
    				 }else{
    					   failureReport("Validate whether the Time stamp is displayed correctly after the Employee/Mgr saves the timesheet "+empRequestTime, "Time stamp is not displayed correctly after the Employee/Mgr saves the timesheet ");
    				 } 
    				 
    			 }
    			 blnEventReport = false;
    			} catch (Exception e) {
    				throw e;
    			}
    	 } 
 		
	/********************************************************************************************************
	 * Method 	Name  	    :	enterTimeSheet()
	 * Author				:	
	 * Description		    :	This method will validate the page header
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification: 
	 * @throws Throwable	:
	 ********************************************************************************************************/    
	 public void clearTimeSheet(String strWeek) throws Throwable{
		 try {
			
			 waitForElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+empName+" ("+empID+"')]/../../following-sibling::tr/td/span[contains(text(),'Employee Entered')]/../following-sibling::td//span[contains(@class,'pencil')]"), "Edit - Pencil Icon");
			 //Change the Date format to M/d/yyy
			 SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yyyy");
			 Date d_date = dateFormat.parse(strWeek);
			 String week=dateFormat.format(d_date);
			 selectByVisibleText(EDTC_OR.CHANGETOWEEKENDINGDROPDOWN, week, "Change to Week Ending on Drop Down");
			 pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
			 click(By.xpath(EDTC_OR.ELEMENTTEXT1+empName+" ("+empID+"')]/../../following-sibling::tr/td/span[contains(text(),'Employee Entered')]/../following-sibling::td//span[contains(@class,'pencil')]"), "Edit - Pencil Icon");
			 pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
 			 //This method validates the Page Title
 			 validatePageHeader(EDTC_OR.PAGEHEADER, " O/R FOR "+empName+"  ("+empID+")");
 			 blnEventReport=false;
			 int count=driver.findElements(By.xpath(EDTC_OR.ELEMENTTEXT1+"Day')]/../../following-sibling::tbody/tr")).size();
			 for(int i=1;i<=count;i++){
				 String strType=getText(By.xpath(EDTC_OR.ELEMENTTEXT1+"Day')]/../../following-sibling::tbody/tr["+i+"]/td[1]"), "Type Name");
				 if(!strType.equalsIgnoreCase("Regular") && !strType.equalsIgnoreCase("Scheduled") && !strType.equalsIgnoreCase("Holiday")){
					 int colCount=driver.findElements(By.xpath(EDTC_OR.ELEMENTTEXT1+"Day')]/../../following-sibling::tbody/tr["+i+"]/td")).size();
					 for(int j=2;j<=colCount-1;j++){
						 if(isElementPresent(By.xpath(EDTC_OR.ELEMENTTEXT1+"Day')]/../../following-sibling::tbody/tr["+i+"]/td["+j+"]/input"),"")){
							 type(By.xpath(EDTC_OR.ELEMENTTEXT1+"Day')]/../../following-sibling::tbody/tr["+i+"]/td["+j+"]/input"), "0", "");	 
						 }
					 }
				 }
			 }
			 
			 
			 //Save
			 click(EDTC_OR.SAVEBTN, "Save Button");
			 pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
			 
			 backButton();
			 pageLoadingCompleted(EDTC_OR.SEARCHMODALLOADER);
		 } catch (Exception e) {
			 throw e;
		 }
	 }
 
	/********************************************************************************************************
	 * Method 	Name  	    :	enterTimeSheet()
	 * Author				:	
	 * Description		    :	This method will validate the page header
	 * Date of creation 	:	
	 * modifying person 	: 	
	 * Date of modification: 
	 * @throws Throwable	:
	 ********************************************************************************************************/    
   	 public void validate_PTOScheduleLinkVisibility(String strEmpReporting,String strEmpTimeSheet) throws Throwable {
   		try {
   			blnEventReport=true;
   			if(strEmpReporting.equalsIgnoreCase("Y") && strEmpTimeSheet.equalsIgnoreCase("Y")){
   				isElementDisplayed(EDTC_OR.PTOSCHEDULESLINK, "PTO Schedules");
   			}else{
   				isElementNotDisplayed(EDTC_OR.PTOSCHEDULESLINK, "PTO Schedules");
   			}
   			
   			blnEventReport=false;
		} catch (Exception e) {
			throw e;
		}
	}
   	 
   	 
 	/********************************************************************************************************
 	 * Method 	Name  	    :	enterTimeSheet()
 	 * Author				:	
 	 * Description		    :	This method will validate the page header
 	 * Date of creation 	:	
 	 * modifying person 	: 	
 	 * Date of modification: 
 	 * @throws Throwable	:
 	 ********************************************************************************************************/    
    	 public void validate_EmpTSLinkVisibility(String strEmpReporting) throws Throwable {
    		try {
    			blnEventReport=true;
    			if(strEmpReporting.equalsIgnoreCase("Y")){
    				isElementDisplayed(EDTC_OR.EMPTIMESHEETSLINK, "Employee TimeSheets Link");
    			}else{
    				isElementNotDisplayed(EDTC_OR.EMPTIMESHEETSLINK, "Employee TimeSheets Link");
    			}
    			
    			blnEventReport=false;
 		} catch (Exception e) {
 			throw e;
 		}
 	}
 	 
   	/********************************************************************************************************
 	 * Method 	Name  	    :	validateSelectGrp_EmpTimeSheets()
 	 * Author				:	
 	 * Description		    :	This method will validate the page header
 	 * Date of creation 	:	
 	 * modifying person 	: 	
 	 * Date of modification: 
 	 * @throws Throwable	:
 	 ********************************************************************************************************/    
   	 public void validateSelectGrp_EmpTimeSheets(String strEmpGrp_TimeSheets) throws Throwable {
   		 try {
   			 
   			 blnEventReport=true;
   			 click(EDTC_OR.EMPTIMESHEETSLINK,"Employee Time Sheets Link");
   			 waitForElementPresent(EDTC_OR.SEARCHMATCHESLABEL, "Select Employee Group");
   			 
   			 // Employee Type
   			 validateFieldNames(EDTC_OR.EMPGROUP,strEmpGrp_TimeSheets); 
   			 
   			click(EDTC_OR.MODALDIALOGCLOSELINK, "Modal Dialog Close Link");
   			 blnEventReport=false;
  		} catch (Exception e) {
 			throw e;
 		}
 	}  
   	 
  	/********************************************************************************************************
  	 * Method 	Name  	    :	validateSelectGrp_PTOSchedules()
  	 * Author				:	
  	 * Description		    :	This method will validate the page header
  	 * Date of creation 	:	
  	 * modifying person 	: 	
  	 * Date of modification: 
  	 * @throws Throwable	:
  	 ********************************************************************************************************/    
    	 public void validateSelectGrp_PTOSchedules(String strEmpGrp_PTOSchedules) throws Throwable {
    		 try {
    			 
    			 blnEventReport=true;
    			 click(EDTC_OR.PTOSCHEDULESLINK, "PTO Schedules");
    			 waitForElementPresent(EDTC_OR.SEARCHMATCHESLABEL, "Select Employee Group");
    			 
    			 // Employee Type
    			 validateFieldNames(EDTC_OR.EMPGROUP,strEmpGrp_PTOSchedules); 
    			 
    			 click(EDTC_OR.MODALDIALOGCLOSELINK, "Modal Dialog Close Link");
    			 
    			 blnEventReport=false;
   		} catch (Exception e) {
  			throw e;
  		}
  	}  
    	 
   	
	  
}






